"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[720],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),h=o,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8997:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:3,title:"Deployment (MVP)"},s=void 0,d={unversionedId:"deployment",id:"deployment",title:"Deployment (MVP)",description:"Knowledge Agents is a federated technology, so there is no central component setup to take into account.",source:"@site/docs/deployment.md",sourceDirName:".",slug:"/deployment",permalink:"/product-knowledge/docs/deployment",editUrl:"https://github.com/catenax-ng/product-knowledge/edit/main/docs/deployment.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Deployment (MVP)"},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/product-knowledge/docs/architecture"},next:{title:"How To (Pilot)",permalink:"/product-knowledge/docs/howto"}},c={},p=[{value:"Dataspace Partner Roles",id:"dataspace-partner-roles",level:2},{value:"Role: As A Consumer",id:"role-as-a-consumer",level:3},{value:"Role: As A Skill Provider",id:"role-as-a-skill-provider",level:3},{value:"Role: As A Provider",id:"role-as-a-provider",level:3},{value:"Sub-Role: As A Data Provider",id:"sub-role-as-a-data-provider",level:4},{value:"Sub-Role: As A Function Provider",id:"sub-role-as-a-function-provider",level:4},{value:"Deployment of the Dataspace Connector",id:"deployment-of-the-dataspace-connector",level:2},{value:"Option 1: Include Knowledge Agents into your own EDC Build",id:"option-1-include-knowledge-agents-into-your-own-edc-build",level:3},{value:"Option 2: Drop an additional extension jar into your EDC images",id:"option-2-drop-an-additional-extension-jar-into-your-edc-images",level:3},{value:"Option 3: Use the ready-made Agent-enbled EDC images",id:"option-3-use-the-ready-made-agent-enbled-edc-images",level:3},{value:"Deployment using a Helm umbrella chart",id:"deployment-using-a-helm-umbrella-chart",level:3},{value:"Deployment of the Provisioning Agent",id:"deployment-of-the-provisioning-agent",level:2},{value:"Using the Preconfigured Docker Image",id:"using-the-preconfigured-docker-image",level:3},{value:"Deployment using a Helm umbrella chart",id:"deployment-using-a-helm-umbrella-chart-1",level:3},{value:"Deployment of the Remoting Agent",id:"deployment-of-the-remoting-agent",level:2},{value:"Using the Preconfigured Docker Image",id:"using-the-preconfigured-docker-image-1",level:3},{value:"Deployment using a Helm umbrella chart",id:"deployment-using-a-helm-umbrella-chart-2",level:3}],u={toc:p};function h(e){var t=e.components,l=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Knowledge Agents is a federated technology, so there is no central component setup to take into account.\nInstead, the Semantic Dataspace is formed by the individual business partners extending/configuring their\nconnectors and enabling their backend systems and/or datalakes. The deployment depends hereby on the\nrole that the business partner takes."),(0,r.kt)("h2",{id:"dataspace-partner-roles"},"Dataspace Partner Roles"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Semantic Dataspace Roles",src:n(110).Z,width:"910",height:"726"})),(0,r.kt)("h3",{id:"role-as-a-consumer"},"Role: As A Consumer"),(0,r.kt)("p",null,"As a consumer, you just need to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"enable your dataspace connector to initiate/delegate the required Agent protocols (here: SparQL-over-Http)."),(0,r.kt)("li",{parentName:"ul"},"(optionally) mount your connector as a remote repository into your enterprise graph infrastructure.")),(0,r.kt)("h3",{id:"role-as-a-skill-provider"},"Role: As A Skill Provider"),(0,r.kt)("p",null,"As a skill provider, you need to "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"enable your dataspace connector to transfer/delegate the required Agent protocols."),(0,r.kt)("li",{parentName:"ul"},"(optionally) employ multiple data planes in case you want to expose hosted skills (skill assets that operate as stored procedures\nand which require computational resources at the provider side) instead of distributed skills (skill assets that are offered as query texts/files and which are executed at the consumer side).")),(0,r.kt)("h3",{id:"role-as-a-provider"},"Role: As A Provider"),(0,r.kt)("p",null,"As a provider, you need to "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"enable your dataspace connector to receive/internalize the required Agent protocols. ")),(0,r.kt)("p",null,'Depending on the kind of provisioning, you will setup additional internal "agents" (endpoints).'),(0,r.kt)("h4",{id:"sub-role-as-a-data-provider"},"Sub-Role: As A Data Provider"),(0,r.kt)("p",null,"As a data provider, you want to "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"bind your data sources to knowledge graphs following the Catena-X ontology. Therefore, a provisioning agent\nshould be setup on top of a data virtualization/database layer.")),(0,r.kt)("h4",{id:"sub-role-as-a-function-provider"},"Sub-Role: As A Function Provider"),(0,r.kt)("p",null,"As a function provider, you want to "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"bind your API to a special knowledge graph structure. Therefore, a remoting agent should be setup.")),(0,r.kt)("h2",{id:"deployment-of-the-dataspace-connector"},"Deployment of the Dataspace Connector"),(0,r.kt)("p",null,"For enabling your Dataspace Connector (or rather: its control plane and its data plane(s)) to speak Agent protocols, you can opt for one of three choices."),(0,r.kt)("h3",{id:"option-1-include-knowledge-agents-into-your-own-edc-build"},"Option 1: Include Knowledge Agents into your own EDC Build"),(0,r.kt)("p",null,"Version 0.6.4-SNAPSHOT of Knowledge Agents is compatible with Catena-X EDC Release 0.1.2\nVersion 0.7.2-SNAPSHOT of Knowledge Agents is compatible with Catena-X EDC Release 0.1.4 (unpublished)\nVersion 0.7.>=3-SNAPSHOT of Knowledge Agents is compatible with Catena-X EDC Release >=0.2.0"),(0,r.kt)("p",null,"Add the following dependency to your final control plane pom:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"}," <dependency>\n    <groupId>io.catenax.knowledge.dataspace.edc.control-plane</groupId>\n    <artifactId>control-plane-transfer</artifactId>\n    <version>0.7.4-SNAPSHOT</version>\n </dependency>\n")),(0,r.kt)("p",null,"Add the following dependency to your final data plane pom:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"  <dependency>\n    <groupId>io.catenax.knowledge.dataspace.edc.control-plane</groupId>\n    <artifactId>agent-plane-protocol</artifactId>\n    <version>0.7.4-SNAPSHOT</version>\n  </dependency>\n")),(0,r.kt)("p",null,"Add the following to the repositories section of your master pom (and remember to put your github access token to the settings.xml):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"  <repository>\n    <id>github-ka</id>\n    <name>Catena-X Knowledge Agents Maven Repository</name>\n    <url>https://maven.pkg.github.com/catenax-ng/product-knowledge</url>\n   </repository>\n")),(0,r.kt)("h3",{id:"option-2-drop-an-additional-extension-jar-into-your-edc-images"},"Option 2: Drop an additional extension jar into your EDC images"),(0,r.kt)("p",null,"Version 0.6.4-SNAPSHOT of Knowledge Agents is compatible with Catena-X EDC Release 0.1.2\nVersion 0.7.2-SNAPSHOT of Knowledge Agents is compatible with Catena-X EDC Release 0.1.4 (unpublished)\nVersion 0.7.>=3-SNAPSHOT of Knowledge Agents is compatible with Catena-X EDC Release >=0.2.0"),(0,r.kt)("p",null,"Download the jar from the following location and add it to the lib/ext folder of your EDC control plane installation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/catenax-ng/product-knowledge/packages/1776419"},"Control Plane Agent Transfer Package"))),(0,r.kt)("p",null,"Download the jar from the following location and add it to the lib/ext folder of your EDC data plane installation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/catenax-ng/product-knowledge/packages/1781577"},"Data Plane Agent Protocol Package"))),(0,r.kt)("p",null,"If using a docker environment, these files could be simply mounted under /app/lib/ext"),(0,r.kt)("h3",{id:"option-3-use-the-ready-made-agent-enbled-edc-images"},"Option 3: Use the ready-made Agent-enbled EDC images"),(0,r.kt)("p",null,"Version 0.6.4-SNAPSHOT of Knowledge Agents is built against Catena-X EDC Release 0.1.2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/controlplane-memory:0.6.4-SNAPSHOT"},"Agent-Enabled In-Memory Control Plane using Azure Vault")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/agentplane-azurevault:0.6.4-SNAPSHOT"},"Agent-Enabled Data Plane (Http-Only) using Azure Vault"))),(0,r.kt)("p",null,"Version 0.7.2-SNAPSHOT of Knowledge Agents is built against Catena-X EDC Release 0.1.4 (unpublished)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/controlplane-memory:0.7.2-SNAPSHOT"},"Agent-Enabled In-Memory Control Plane using Azure Vault")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/agentplane-azurevault:0.7.2-SNAPSHOT"},"Agent-Enabled Data Plane (Http-Only) using Azure Vault"))),(0,r.kt)("p",null,"Version 0.7.>3-SNAPSHOT of Knowledge Agents is built against Catena-X EDC Release >=0.2.0"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/controlplane-memory:0.7.4-SNAPSHOT"},"Agent-Enabled In-Memory Control Plane using Azure Vault")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/agentplane-azurevault:0.7.4-SNAPSHOT"},"Agent-Enabled Data Plane (Http-Only) using Azure Vault"))),(0,r.kt)("h3",{id:"deployment-using-a-helm-umbrella-chart"},"Deployment using a Helm umbrella chart"),(0,r.kt)("p",null,"In each case, we have adopted two helm charts which can be used as sub-charts in a more complex umbrella."),(0,r.kt)("p",null,"Add the KA helm repo for that purpose:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"helm repo add catenax-knowledge https://catenax-ng.github.io/product-knowledge/infrastructure\n")),(0,r.kt)("p",null,"Add aliased dependencies to your umbrella chart:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  - name: agent-control-plane\n    repository: https://catenax-ng.github.io/product-knowledge/infrastructure\n    version: 0.7.4-SNAPSHOT\n    alias: supplier-control-plane\n  - name: agent-data-plane\n    repository: https://catenax-ng.github.io/product-knowledge/infrastructure\n    version: 0.7.4-SNAPSHOT\n    alias: supplier-data-plane\n")),(0,r.kt)("p",null,"and update the dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"helm dependencies update\n")),(0,r.kt)("p",null,"You may now configure the deployment instances in your values.yaml in more detail (see the documentation of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/product-knowledge/tree/feature/KA-188-extract-sub-charts/infrastructure/charts/agent-control-plane"},"agent control plane chart")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/product-knowledge/tree/feature/KA-188-extract-sub-charts/infrastructure/charts/agent-data-plane"},"agent data plane chart"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# Common Api-Key Settings\nauth: &auth\n key: X-Api-Key\n value: <apikey>\n\n# Access to the Vault\nvault: &vault\n name: "<name>"\n tenantid: "<tenantid>"\n clientid: "<clientid>"\n clientsecret: "<clientsecret>"\n\n# Common Oauth Settings to Connect the Dataspace\ndaps: &daps\n  clientid: <dapsclientid>\n  providerAudience: idsc:IDS_CONNECTORS_ALL\n  providerJwksUrl: https://daps.public/.well-known/jwks.json\n  tokenUrl: https://daps.public/token\n\n# The Supplier Providing Control plane\nsupplier-control-plane: \n  nameOverride: supplier-control-plane\n  fullnameOverride: supplier-control-plane\n  vault: *vault\n  oauth: \n    <<: *daps\n    privateKeyAlias: supplier-daps-key\n    publicKeyAlias: supplier-daps-crt\n    endpointAudience: http://supplier-control-plane:8282/api/v1/ids/data\n  transfer:\n    proxy:\n      token:\n        signerPrivateKeyAlias: supplier-daps-key\n        verifierPublicKeyAlias: supplier-daps-crt\n  configuration:\n    properties: |-\n      edc.hostname=edc-control.public\n      edc.ids.id=urn:connector:edc:supplier\n      edc.ids.title=Supplier Dataspace Connector\n      edc.ids.description=Providing Eclipse Dataspace Connector for Knowledge Agents Supplier\n      edc.ids.endpoint=https://edc-control.public/api/v1/ids\n      edc.ids.validation.referringconnector=false\n      edc.ids.maintainer=http://your.company\n      edc.ids.curator=http://your.company\n      edc.ids.catalog.id=urn:catalog:catenax\n      edc.ids.security.profile=base\n      ids.webhook.address=http://edc-control.public\n      edc.data.encryption.algorithm=NONE\n      edc.receiver.http.endpoint=https://apiwrapper.local/callback/endpoint-data-reference\n  dataplanes: \n    agentplane:\n      url: http://edc-data.intern/\n      publicurl: https://edc-data.public/api/public\n      callback: \n        url: http://edc-data.intern/callback/endpoint-data-reference\n        auth: *auth      \n\n# The Supplier Data plane\nsupplier-data-plane: &supplierdataplane\n  nameOverride: supplier-data-plane\n  fullnameOverride: supplier-data-plane\n  vault: *vault\n  oauth: \n    <<: *daps\n    privateKeyAlias: supplier-daps-key\n    publicKeyAlias: supplier-daps-crt\n    endpointAudience: http://supplier-control-plane:8282/api/v1/ids/data\n  token:\n    validationEndpoint: http://dlr-agent-control:8182/validation/token\n  configuration:\n    properties: |-\n      edc.hostname=edc-data.public\n  assets:\n    dataspace.ttl: resources/dataspace.ttl\n  agent:\n    # -- Data API Url of the associated Control Plane\n    controlPlaneDataUrl: http://supplier-control-plane:8181/data\n    # -- Initial Definition of the default graph, path to a mounted resource containing a turtle file\n    defaultGraph: \n      content: dataspace.ttl\n      name: api\n    # Configures the Federated Data Catalogue\n    federation: \n      # -- Enable synchronization by specifying the number of milliseconds\n      synchronization: 60000\n      # -- A List of Base Urls Hinting to the IDS Apis of business partners\n      connectors: \n        - https://business-partner-edc.public\n\n')),(0,r.kt)("p",null,"And be sure to replace the charts/agent-data-plane/resources/dataspace.ttl with the\ninitial graph data for your dataspace, such as in the ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/catenax-ng/product-knowledge/feature/KA-188-extract-sub-charts/infrastructure/resources/dataspace.ttl"},"Catena-X Integration Default Graph")),(0,r.kt)("h2",{id:"deployment-of-the-provisioning-agent"},"Deployment of the Provisioning Agent"),(0,r.kt)("h3",{id:"using-the-preconfigured-docker-image"},"Using the Preconfigured Docker Image"),(0,r.kt)("p",null,"The provisioning agent uses a version of Ontop VKP:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/provisioning-agent:0.7.4-SNAPSHOT"},"Provisioning Agent based on Ontop VKP"))),(0,r.kt)("h3",{id:"deployment-using-a-helm-umbrella-chart-1"},"Deployment using a Helm umbrella chart"),(0,r.kt)("p",null,"We have published a helm chart which can be used as a sub-chart in a more complex umbrella."),(0,r.kt)("p",null,"Add the KA helm repo for that purpose:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"helm repo add catenax-knowledge https://catenax-ng.github.io/product-knowledge/infrastructure\n")),(0,r.kt)("p",null,"Add an (aliased) dependency to your umbrella chart:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  - name: provisioning-agent\n    repository: https://catenax-ng.github.io/product-knowledge/infrastructure\n    version: 0.7.4-SNAPSHOT\n    alias: oem-provider-agent\n")),(0,r.kt)("p",null,"and update the dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"helm dependencies update\n")),(0,r.kt)("p",null,"You may now configure the deployment instances in your values.yaml in more detail (see the documentation of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/product-knowledge/tree/feature/KA-188-extract-sub-charts/infrastructure/charts/provisioning-agent"},"provisioning agent chart"),")."),(0,r.kt)("p",null,"Note that the entries under bindings represent the individual mappings/endpoints which bind to your data source. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"\n# -- Configures the OEM provider agent\noem-provider-agent: \n  nameOverride: oem-provider-agent\n  fullnameOverride: oem-provider-agent\n  # -- Ontologies need extended memory, for each CX endpoint add ~300MB \n  resources: \n    requests:\n      cpu: 0.5\n      memory: \"1.5Gi\"\n    limits:\n      cpu: 0.5\n      memory: \"1.5Gi\"\n  bindings:\n    # mute the default Diagnosic Trouble Code sample endpoint \n    dtc: null\n    # Add a sample Telematics endpoint\n    telematics: \n      port: 8080\n      path: /(.*)\n      settings: \n        jdbc.url: 'jdbc:postgresql://rawdatadb:5432/rawdata'\n        jdbc.user: <path:secret#username>\n        jdbc.password: <path:secret#password>\n        jdbc.driver: 'org.postgresql.Driver'      \n      ontology: cx-ontology.xml\n      mapping: |-\n        [PrefixDeclaration]\n        uuid:       urn:uuid:\n        bpnl:       bpn:legal:\n        oem:    urn:oem:\n        cx:         https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#\n        owl:        http://www.w3.org/2002/07/owl#\n        rdf:        http://www.w3.org/1999/02/22-rdf-syntax-ns#\n        xml:        http://www.w3.org/XML/1998/namespace\n        xsd:        http://www.w3.org/2001/XMLSchema#\n        obda:       https://w3id.org/obda/vocabulary#\n        rdfs:       http://www.w3.org/2000/01/rdf-schema#\n        json:   https://json-schema.org/draft/2020-12/schema#\n\n        [MappingDeclaration] @collection [[\n        mappingId   vehicles\n        target      <{vehicle_id}> rdf:type cx:Vehicle ; cx:partProductionDate {production_date}^^xsd:date; cx:vehicleIdentificationNumber {van}^^xsd:string; cx:isProducedBy bpnl:{localIdentifiers_manufacturerId} .\n        source      SELECT vehicle_id, production_date, van, 'BPNL00000003AYRE' as localIdentifiers_manufacturerId FROM vehicles\n\n        mappingId   parts\n        target      <{gearbox_id}> rdf:type cx:AssemblyGroup ; cx:partName {partTypeInformation_nameAtManufacturer}^^xsd:string; cx:isProducedBy bpnl:{localIdentifiers_manufacturerId} .\n        source      SELECT gearbox_id, 'Differential Gear' as partTypeInformation_nameAtManufacturer, 'BPNL00000003B2OM' as localIdentifiers_manufacturerId FROM vehicles\n\n        mappingId   vehicleparts\n        target      <{gearbox_id}> cx:isPartOf <{vehicle_id}> .\n        source      SELECT vehicle_id, gearbox_id FROM vehicles\n\n        mappingId   partLoadSpectrum\n        target      <{gearbox_id}> cx:hasLoadSpectrum oem:{newest_telematics_id}/{index} .\n        source      SELECT gearbox_id, newest_telematics_id,  index FROM vehicles, (VALUES (0), (1), (2)) AS spectrum(index)\n\n        mappingId   loadspectrum\n        target      oem:{id}/{index} rdf:type cx:LoadSpectrum; cx:loadSpectrumId {metadata_projectDescription}^^xsd:string; cx:loadSpectrumName {header_countingValue}^^xsd:string; cx:loadSpectrumDescription {name}^^xsd:string; rdf:type cx:VehicleCurrentState; cx:vehicleOperatingHours {metadata_status_operatingHours}^^xsd:int; cx:vehicleCurrentStateDateTime {metadata_status_date}^^xsd:dateTime; cx:vehicleCurrentMileage {metadata_status_mileage}^^xsd:int; cx:loadSpectrumType {header_channels}^^xsd:string; cx:hasLoadSpectrumValues oem:{id}/{index}/0.\n        source      SELECT id, index, name, load_spectra::jsonb->index->'metadata'->>'projectDescription' as metadata_projectDescription, load_spectra::jsonb->index->'header'->>'countingValue' as header_countingValue, floor((load_spectra::jsonb->index->'metadata'->'status'->>'operatingHours')::numeric)::integer as metadata_status_operatingHours, replace(load_spectra::jsonb->index->'metadata'->'status'->>'date','Z','.000Z') as metadata_status_date, load_spectra::jsonb->index->'metadata'->'status'->>'mileage' as metadata_status_mileage, load_spectra::jsonb->index->'header'->'channels' as header_channels FROM (VALUES (0,'GearSet'), (1,'GearOil'), (2,'Clutch')) AS spectrum(index,name), telematics_data\n\n        mappingId   loadspectrumChannel\n        target      oem:{id}/{index}/0 rdf:type cx:LoadSpectrumValues; cx:loadSpectrumChannelIndex {body_classes}^^xsd:string; cx:loadSpectrumCountingUnit {header_countingUnit}^^xsd:string; cx:loadSpectrumCountingMethod {header_countingMethod}^^xsd:string; cx:loadSpectrumChannelValues {body_counts}^^xsd:string.\n        source      SELECT id, index, load_spectra::jsonb->index->'metadata'->>'componentDescription' as metadata_componentDescription, jsonb_extract_path(load_spectra::jsonb->index,'body','classes','0','classList','0') as body_classes, load_spectra::jsonb->index->'header'->>'countingUnit' as header_countingUnit, load_spectra::jsonb->index->'header'->>'countingMethod' as header_countingMethod, jsonb_extract_path(load_spectra::jsonb->index,'body','counts','countsList','0') as body_counts FROM (VALUES (0), (1), (2)) AS spectrum(index), telematics_data\n\n        mappingId   vehicleAdaptionValues\n        target      <{vehicle_id}> cx:hasAdaption oem:{newest_telematics_id} .\n        source      SELECT vehicle_id, newest_telematics_id FROM vehicles\n\n        mappingId   adaptionValues\n        target      oem:{id} rdf:type cx:Adaption; rdf:type cx:VehicleCurrentState; cx:vehicleOperatingHours {adaption_status_operatingHours}^^xsd:int; cx:vehicleCurrentStateDateTime {adaption_status_date}^^xsd:dateTime; cx:vehicleCurrentMileage {adaption_status_mileage}^^xsd:int; cx:hasValues {adaption_values}^^json:Object .\n        source      SELECT id, replace(adaption_values::jsonb->0->'status'->>'date','Z','.000Z') as adaption_status_date, floor((adaption_values::jsonb->0->'status'->>'operatingHours')::numeric)::integer as adaption_status_operatingHours, adaption_values::jsonb->0->'status'->>'mileage' as adaption_status_mileage, adaption_values::jsonb->0->'values' as adaption_values FROM public.telematics_data\n        ]]  \n")),(0,r.kt)("p",null,"When the endpoint is running, it can be published through the associated connector using the following REST call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl --location --request POST \'https://supplier-data-plane.public/data/assets\' \\\n--header \'X-Api-Key: <apikey>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "asset": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:oem:BehaviourTwin",\n      "asset:prop:contract": "urn:cx:Graph:oem",\n      "asset:prop:name": "OEM portion of the Behaviour Twin RUL/HI Testdataset.",\n      "asset:prop:description": "A graph asset/offering mounting Carena-X Testdata for Behaviour Twin.",\n      "asset:prop:version": "20230124_testdata_new_bamm",\n      "asset:prop:contenttype": "application/json, application/xml",\n      "rdf:type":"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#GraphAsset>",\n      "rdfs:isDefinedBy": "<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl>",\n      "cx:protocol": "<urn:cx:Protocol:w3c:Http#SPARQL>",\n      "cx:shape": "[ rdf:type sh:NodeShape ;\\n  sh:targetClass cx:LoadSpectrum ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class [ rdf:type sh:NodeShape ;\\n  sh:targetClass cx:VehicleComponent ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003B2OM> ;\\n    ] ] ];\\n",\n      "cx:isFederated": true\n    }\n  },\n  "dataAddress": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:oem:BehaviourTwin",\n      "baseUrl": "http://oem-provider-agent:8080/sparql",\n      "type": "urn:cx:Protocol:w3c:Http#SPARQL",\n      "proxyPath": "false",\n      "proxyMethod": "true",\n      "proxyQueryParams": "true",\n      "proxyBody": "true",\n      "authKey": "Authorization",\n      "authCode": "<ingressauth>"\n    }\n  }\n}\'\n')),(0,r.kt)("h2",{id:"deployment-of-the-remoting-agent"},"Deployment of the Remoting Agent"),(0,r.kt)("h3",{id:"using-the-preconfigured-docker-image-1"},"Using the Preconfigured Docker Image"),(0,r.kt)("p",null,"The remoting agent uses a version of RDF4J:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/remoting-agent:0.7.4-SNAPSHOT"},"Remotin Agent based on RDF4J"))),(0,r.kt)("h3",{id:"deployment-using-a-helm-umbrella-chart-2"},"Deployment using a Helm umbrella chart"),(0,r.kt)("p",null,"We have provided a helm chart which can be used as a sub-chart in a more complex umbrella."),(0,r.kt)("p",null,"Add the KA helm repo for that purpose:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"helm repo add catenax-knowledge https://catenax-ng.github.io/product-knowledge/infrastructure\n")),(0,r.kt)("p",null,"Add aliased dependencies to your umbrella chart:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  - name: remoting-agent\n    repository: https://catenax-ng.github.io/product-knowledge/infrastructure\n    version: 0.7.4-SNAPSHOT\n    alias: supplier-remoting-agent\n")),(0,r.kt)("p",null,"and update the dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"helm dependencies update\n")),(0,r.kt)("p",null,"You may now configure the deployment instances in your values.yaml in more detail (see the documentation of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/product-knowledge/tree/feature/KA-188-extract-sub-charts/infrastructure/charts/remoting-agent"},"remoting agent chart"),")."),(0,r.kt)("p",null,"Note that the entries under the repositories object represent the individual bindings/endpoints which bind to your API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# The supplier remoting agent\nsupplier-remoting-agent: \n  nameOverride: supplier-remoting-agent\n  fullnameOverride: supplier-remoting-agent\n  repositories:\n    health: |-\n      #\n      # Rdf4j configuration for a health-specific remoting\n      #\n      @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.\n      @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.\n      @prefix rep: <http://www.openrdf.org/config/repository#>.\n      @prefix sr: <http://www.openrdf.org/config/repository/sail#>.\n      @prefix sail: <http://www.openrdf.org/config/sail#>.\n      @prefix sp: <http://spinrdf.org/sp#>.\n      @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n      @prefix json: <https://json-schema.org/draft/2020-12/schema#> .\n      @prefix dcterms: <http://purl.org/dc/terms/> .\n      @prefix cx-fx: <https://github.com/catenax-ng/product-knowledge/ontology/fx.ttl#>.\n      @prefix cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>.\n      @prefix cx-rt: <urn:io.catenax.knowledge.agents.remoting#>.\n\n      [] rdf:type rep:Repository ;\n        rep:repositoryID "health" ;\n        rdfs:label "Health Prognosis Functions" ;\n        rep:repositoryImpl [\n            rep:repositoryType "openrdf:SailRepository" ;\n            sr:sailImpl [\n              sail:sailType "io.catenax.knowledge:Remoting" ;\n              cx-fx:supportsInvocation cx-health:HealthIndication;\n            ]\n        ].\n\n      cx-health:HealthIndication rdf:type cx-fx:Function;\n        dcterms:description "Health Indication is an evaluation function operating on batches of load collectives and adaptive values."@en ;\n        dcterms:title "Health Indication" ;\n        cx-fx:targetUri "http://service-backend:5005/api/hi";\n        cx-fx:invocationMethod "POST-JSON-MF";\n        cx-fx:batch "100"^^xsd:long;\n        cx-fx:inputProperty "hi_input.healthIndicatorInputs";\n        cx-fx:invocationIdProperty "requestRefId";\n        cx-fx:input cx-health:requestComponentId;\n        cx-fx:input cx-health:classifiedLoadCollectiveProjectDescription;\n        cx-fx:input cx-health:classifiedLoadCollectiveComponentDescription;\n        cx-fx:input cx-health:classifiedLoadCollectiveCountingValue;\n        cx-fx:input cx-health:classifiedLoadCollectiveCountingMethod;\n        cx-fx:input cx-health:classifiedLoadCollectiveCountingUnit;\n        cx-fx:input cx-health:classifiedLoadCollectiveChannels;\n        cx-fx:input cx-health:classifiedLoadCollectiveCounts;\n        cx-fx:input cx-health:classifiedLoadCollectiveClasses;\n        cx-fx:input cx-health:adaptionValueVersion;\n        cx-fx:input cx-health:adaptionValueTimestamp;\n        cx-fx:input cx-health:adaptionValueMileage;\n        cx-fx:input cx-health:adaptionValueOperatingTime;\n        cx-fx:input cx-health:adaptionValueList;\n        cx-fx:result cx-health:HealthIndicator.\n\n      cx-health:HealthIndicator rdf:type cx-fx:Result;\n        dcterms:description "Health Indicator is part of a indicator batch."@en ;\n        dcterms:title "Health Indicator" ;\n        cx-fx:outputProperty "healthIndicatorOutputs";\n        cx-fx:resultIdProperty "componentId";\n        cx-fx:correlationInput cx-health:requestComponentId;\n        cx-fx:output cx-health:indicatorVersion;\n        cx-fx:output cx-health:responseComponentId;\n        cx-fx:output cx-health:healthIndicatorValues.\n\n      cx-health:requestComponentId rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Input relates to a component."@en ;\n        dcterms:title "Health Indicator Component Id";\n        cx-fx:argumentName "componentId".\n\n      cx-health:classifiedLoadCollectiveProjectDescription rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a project description."@en ;\n        dcterms:title "Classified Load Collective Project Description";\n        cx-fx:mandatory "false"^^xsd:boolean;\n        cx-fx:argumentName "classifiedLoadCollective.metadata.projectDescription".\n\n      cx-health:classifiedLoadCollectiveComponentDescription rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a component description."@en ;\n        dcterms:title "Classified Load Collective Component Description";\n        cx-fx:argumentName "classifiedLoadCollective.metadata.componentDescription".\n\n      cx-health:classifiedLoadCollectiveCountingValue rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a value for the counting dimension."@en ;\n        dcterms:title "Classified Load Collective Counting Value";\n        cx-fx:mandatory "false"^^xsd:boolean;\n        cx-fx:argumentName "classifiedLoadCollective.header.countingValue".\n\n      cx-health:classifiedLoadCollectiveCountingUnit rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a unit for the counting dimension."@en ;\n        dcterms:title "Classified Load Collective Counting Unit";\n        cx-fx:argumentName "classifiedLoadCollective.header.countingUnit".\n\n      cx-health:classifiedLoadCollectiveCountingMethod rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a method for the counting dimension."@en ;\n        dcterms:title "Classified Load Collective Counting Method";\n        cx-fx:argumentName "classifiedLoadCollective.header.countingMethod".\n\n      cx-health:classifiedLoadCollectiveChannels rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has descriptors for all channels."@en ;\n        dcterms:title "Classified Load Collective Channels";\n        cx-fx:argumentName "classifiedLoadCollective.header.channels".\n\n      cx-health:classifiedLoadCollectiveCounts rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a body with the raw measurements."@en ;\n        dcterms:title "Classified Load Collective Counts";\n        cx-fx:argumentName "classifiedLoadCollective.body.counts".\n\n      cx-health:classifiedLoadCollectiveClasses rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a body with the class indices."@en ;\n        dcterms:title "Classified Load Collective Classes";\n        cx-fx:argumentName "classifiedLoadCollective.body.classes".\n\n      cx-health:adaptionValueVersion rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs a version."@en ;\n        dcterms:title "Adaption Value List Version";\n        cx-fx:argumentName "adaptionValueList.version".\n\n      cx-health:adaptionValueTimestamp rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs a timestamp."@en ;\n        dcterms:title "Adaption Value List Timestamp";\n        cx-fx:argumentName "adaptionValueList.timestamp".\n\n      cx-health:adaptionValueMileage rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs a mileage of the embedding vehicle."@en ;\n        dcterms:title "Adaption Value List Mileage";\n        cx-fx:argumentName "adaptionValueList.mileage_km".\n\n      cx-health:adaptionValueOperatingTime rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs an operating time of the embedding vehicle."@en ;\n        dcterms:title "Adaption Value List Operating Time";\n        cx-fx:argumentName "adaptionValueList.operatingtime_s".\n\n      cx-health:adaptionValueList rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs an array of adaption values."@en ;\n        dcterms:title "Adaption Value List Values";\n        cx-fx:argumentName "adaptionValueList.values".\n\n      cx-health:indicatorVersion rdf:type cx-fx:ReturnValue;\n        dcterms:description "Version of the health indicator prognosis."@en ;\n        dcterms:title "Health Indicator Prognosis Version" ;\n        cx-fx:valuePath "version";\n        cx-fx:dataType xsd:string.\n\n      cx-health:responseComponentId rdf:type cx-fx:ReturnValue;\n        dcterms:description "Component Id of the health indicator prognosis."@en ;\n        dcterms:title "Health Indicator Prognosis Component Id" ;\n        cx-fx:valuePath "componentId";\n        cx-fx:dataType xsd:string.\n\n      cx-health:healthIndicatorValues rdf:type cx-fx:ReturnValue;\n        dcterms:description "Health Indicator Values are percentages."@en ;\n        dcterms:title "Health Indicator Values" ;\n        cx-fx:valuePath "healthIndicatorValues";\n        cx-fx:dataType json:Object.\n')),(0,r.kt)("p",null,"When the endpoint is running, it can be published through the associated connector using the following REST call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl --location --request POST \'https://supplier-data-plane.public/data/assets\' \\\n--header \'X-Api-Key: <apikey>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "asset": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:tierA:HealthIndicatorGearbox",\n      "asset:prop:contract": "urn:cx:Graph:tierA",\n      "asset:prop:name": "Health Indications Service for Gearboxes",\n      "asset:prop:description": "Another sample graph asset/offering referring to a specific prognosis resource.",\n      "asset:prop:version": "0.7.4-SNAPSHOT",\n      "asset:prop:contenttype": "application/json, application/xml",\n      "rdf:type":"<https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#GraphAsset>",\n      "rdfs:isDefinedBy": "<https://github.com/catenax-ng/product-knowledge/ontology/health.ttl>",\n      "cx:protocol": "urn:cx:Protocol:w3c:Http#SPARQL",\n      "cx:shape": "[ rdf:type sh:NodeShape ;\\n  sh:targetClass cx-health:HealthIndication ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003CPIY> ]].\\n",\n      "cx:isFederated": true\n    }\n  },\n  "dataAddress": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:tierA:HealthIndicatorGearbox",\n      "baseUrl": "http://supplier-remoting-agent:8081/rdf4j-server/repositories/health",\n      "type": "urn:cx:Protocol:w3c:Http#SPARQL",\n      "proxyPath": "false",\n      "proxyMethod": "true",\n      "proxyQueryParams": "true",\n      "proxyBody": "true",\n      "authKey": "Authorization",\n      "authCode": "<ingresskey>"\n    }\n  }\n}\'\n')))}h.isMDXComponent=!0},110:function(e,t,n){t.Z=n.p+"assets/images/dataspace_roles-db363eb611331d2088f1ba994313c9b5.png"}}]);