"use strict";(self.webpackChunkproduct_knowledge_tractusx_github_io=self.webpackChunkproduct_knowledge_tractusx_github_io||[]).push([[816],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||r;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},99344:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:1,title:"Provisioning"},i=void 0,s={unversionedId:"operation-view/provider",id:"operation-view/provider",title:"Provisioning",description:"This document describes deployment for Provider modules(Provisiong Agent for Data Provisioning, Remoting Agent for Function Provisioning) of the Agents Kit.",source:"@site/docs/operation-view/provider.md",sourceDirName:"operation-view",slug:"/operation-view/provider",permalink:"/product-knowledge/docs/operation-view/provider",draft:!1,editUrl:"https://github.com/catenax-ng/product-knowledge/tree/feature/ART3-382-documentation/docs/operation-view/provider.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Provisioning"},sidebar:"docs",previous:{title:"Agent-Enabled Dataspace Connector",permalink:"/product-knowledge/docs/operation-view/agent_edc"},next:{title:"Data Sovereignity & Policies",permalink:"/product-knowledge/docs/operation-view/policy"}},c={},l=[{value:"Deployment of the Provisioning Agent",id:"deployment-of-the-provisioning-agent",level:2},{value:"Using the Preconfigured Docker Image",id:"using-the-preconfigured-docker-image",level:3},{value:"Deployment using a Helm umbrella chart",id:"deployment-using-a-helm-umbrella-chart",level:3},{value:"Deployment of the Remoting Agent",id:"deployment-of-the-remoting-agent",level:2},{value:"Using the Preconfigured Docker Image",id:"using-the-preconfigured-docker-image-1",level:3},{value:"Deployment using a Helm umbrella chart",id:"deployment-using-a-helm-umbrella-chart-1",level:3}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document describes deployment for Provider modules(Provisiong Agent for Data Provisioning, Remoting Agent for Function Provisioning) of the Agents Kit."),(0,o.kt)("p",null,"For more information see"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Our ",(0,o.kt)("a",{parentName:"li",href:"../adoption-view/intro"},"Adoption")," guideline"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"../development-view/architecture"},"Architecture")," documentation"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"deployment"},"Deployment")," overview"),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("a",{parentName:"li",href:"policy"},"Data Sovereignity & Graph Policy")," discussion")),(0,o.kt)("h2",{id:"deployment-of-the-provisioning-agent"},"Deployment of the Provisioning Agent"),(0,o.kt)("h3",{id:"using-the-preconfigured-docker-image"},"Using the Preconfigured Docker Image"),(0,o.kt)("p",null,"The provisioning agent uses a version of Ontop VKP:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/provisioning-agent:0.7.4-SNAPSHOT"},"Provisioning Agent based on Ontop VKP"))),(0,o.kt)("h3",{id:"deployment-using-a-helm-umbrella-chart"},"Deployment using a Helm umbrella chart"),(0,o.kt)("p",null,"We have published a helm chart which can be used as a sub-chart in a more complex umbrella."),(0,o.kt)("p",null,"Add the KA helm repo for that purpose:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"helm repo add catenax-knowledge https://catenax-ng.github.io/product-knowledge/infrastructure\n")),(0,o.kt)("p",null,"Add an (aliased) dependency to your umbrella chart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  - name: provisioning-agent\n    repository: https://catenax-ng.github.io/product-knowledge/infrastructure\n    version: 0.7.4-SNAPSHOT\n    alias: oem-provider-agent\n")),(0,o.kt)("p",null,"and update the dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"helm dependencies update\n")),(0,o.kt)("p",null,"You may now configure the deployment instances in your values.yaml in more detail (see the documentation of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/product-knowledge/tree/feature/KA-188-extract-sub-charts/infrastructure/charts/provisioning-agent"},"provisioning agent chart"),")."),(0,o.kt)("p",null,"Note that the entries under bindings represent the individual mappings/endpoints which bind to your data source."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"\n# -- Configures the OEM provider agent\noem-provider-agent: \n  nameOverride: oem-provider-agent\n  fullnameOverride: oem-provider-agent\n  # -- Ontologies need extended memory, for each CX endpoint add ~300MB \n  resources: \n    requests:\n      cpu: 0.5\n      memory: \"1.5Gi\"\n    limits:\n      cpu: 0.5\n      memory: \"1.5Gi\"\n  bindings:\n    # mute the default Diagnosic Trouble Code sample endpoint \n    dtc: null\n    # Add a sample Telematics endpoint\n    telematics: \n      port: 8080\n      path: /(.*)\n      settings: \n        jdbc.url: 'jdbc:postgresql://rawdatadb:5432/rawdata'\n        jdbc.user: <path:secret#username>\n        jdbc.password: <path:secret#password>\n        jdbc.driver: 'org.postgresql.Driver'      \n      ontology: cx-ontology.xml\n      mapping: |-\n        [PrefixDeclaration]\n        uuid:  urn:uuid:\n        bpnl:  bpn:legal:\n        oem:    urn:oem:\n        cx:   https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#\n        owl:  http://www.w3.org/2002/07/owl#\n        rdf:  http://www.w3.org/1999/02/22-rdf-syntax-ns#\n        xml:  http://www.w3.org/XML/1998/namespace\n        xsd:  http://www.w3.org/2001/XMLSchema#\n        obda:  https://w3id.org/obda/vocabulary#\n        rdfs:  http://www.w3.org/2000/01/rdf-schema#\n        json:   https://json-schema.org/draft/2020-12/schema#\n\n        [MappingDeclaration] @collection [[\n        mappingId vehicles\n        target  <{vehicle_id}> rdf:type cx:Vehicle ; cx:partProductionDate {production_date}^^xsd:date; cx:vehicleIdentificationNumber {van}^^xsd:string; cx:isProducedBy bpnl:{localIdentifiers_manufacturerId} .\n        source  SELECT vehicle_id, production_date, van, 'BPNL00000003AYRE' as localIdentifiers_manufacturerId FROM vehicles\n\n        mappingId parts\n        target  <{gearbox_id}> rdf:type cx:AssemblyGroup ; cx:partName {partTypeInformation_nameAtManufacturer}^^xsd:string; cx:isProducedBy bpnl:{localIdentifiers_manufacturerId} .\n        source  SELECT gearbox_id, 'Differential Gear' as partTypeInformation_nameAtManufacturer, 'BPNL00000003B2OM' as localIdentifiers_manufacturerId FROM vehicles\n\n        mappingId vehicleparts\n        target  <{gearbox_id}> cx:isPartOf <{vehicle_id}> .\n        source  SELECT vehicle_id, gearbox_id FROM vehicles\n\n        mappingId   partLoadSpectrum\n        target  <{gearbox_id}> cx:hasLoadSpectrum oem:{newest_telematics_id}/{index} .\n        source  SELECT gearbox_id, newest_telematics_id,  index FROM vehicles, (VALUES (0), (1), (2)) AS spectrum(index)\n\n        mappingId   loadspectrum\n        target      oem:{id}/{index} rdf:type cx:LoadSpectrum; cx:loadSpectrumId {metadata_projectDescription}^^xsd:string; cx:loadSpectrumName {header_countingValue}^^xsd:string; cx:loadSpectrumDescription {name}^^xsd:string; rdf:type cx:VehicleCurrentState; cx:vehicleOperatingHours {metadata_status_operatingHours}^^xsd:int; cx:vehicleCurrentStateDateTime {metadata_status_date}^^xsd:dateTime; cx:vehicleCurrentMileage {metadata_status_mileage}^^xsd:int; cx:loadSpectrumType {header_channels}^^xsd:string; cx:hasLoadSpectrumValues oem:{id}/{index}/0.\n        source  SELECT id, index, name, load_spectra::jsonb->index->'metadata'->>'projectDescription' as metadata_projectDescription, load_spectra::jsonb->index->'header'->>'countingValue' as header_countingValue, floor((load_spectra::jsonb->index->'metadata'->'status'->>'operatingHours')::numeric)::integer as metadata_status_operatingHours, replace(load_spectra::jsonb->index->'metadata'->'status'->>'date','Z','.000Z') as metadata_status_date, load_spectra::jsonb->index->'metadata'->'status'->>'mileage' as metadata_status_mileage, load_spectra::jsonb->index->'header'->'channels' as header_channels FROM (VALUES (0,'GearSet'), (1,'GearOil'), (2,'Clutch')) AS spectrum(index,name), telematics_data\n\n        mappingId   loadspectrumChannel\n        target      oem:{id}/{index}/0 rdf:type cx:LoadSpectrumValues; cx:loadSpectrumChannelIndex {body_classes}^^xsd:string; cx:loadSpectrumCountingUnit {header_countingUnit}^^xsd:string; cx:loadSpectrumCountingMethod {header_countingMethod}^^xsd:string; cx:loadSpectrumChannelValues {body_counts}^^xsd:string.\n        source  SELECT id, index, load_spectra::jsonb->index->'metadata'->>'componentDescription' as metadata_componentDescription, jsonb_extract_path(load_spectra::jsonb->index,'body','classes','0','classList','0') as body_classes, load_spectra::jsonb->index->'header'->>'countingUnit' as header_countingUnit, load_spectra::jsonb->index->'header'->>'countingMethod' as header_countingMethod, jsonb_extract_path(load_spectra::jsonb->index,'body','counts','countsList','0') as body_counts FROM (VALUES (0), (1), (2)) AS spectrum(index), telematics_data\n\n        mappingId   vehicleAdaptionValues\n        target  <{vehicle_id}> cx:hasAdaption oem:{newest_telematics_id} .\n        source  SELECT vehicle_id, newest_telematics_id FROM vehicles\n\n        mappingId   adaptionValues\n        target  oem:{id} rdf:type cx:Adaption; rdf:type cx:VehicleCurrentState; cx:vehicleOperatingHours {adaption_status_operatingHours}^^xsd:int; cx:vehicleCurrentStateDateTime {adaption_status_date}^^xsd:dateTime; cx:vehicleCurrentMileage {adaption_status_mileage}^^xsd:int; cx:hasValues {adaption_values}^^json:Object .\n        source  SELECT id, replace(adaption_values::jsonb->0->'status'->>'date','Z','.000Z') as adaption_status_date, floor((adaption_values::jsonb->0->'status'->>'operatingHours')::numeric)::integer as adaption_status_operatingHours, adaption_values::jsonb->0->'status'->>'mileage' as adaption_status_mileage, adaption_values::jsonb->0->'values' as adaption_values FROM public.telematics_data\n        ]]  \n")),(0,o.kt)("p",null,"When the endpoint is running, it can be published through the associated connector using the following REST call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'curl --location --request POST \'https://supplier-data-plane.public/data/assets\' \\\n--header \'X-Api-Key: <apikey>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "asset": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:oem:BehaviourTwin",\n      "asset:prop:contract": "urn:cx:Graph:oem",\n      "asset:prop:name": "OEM portion of the Behaviour Twin RUL/HI Testdataset.",\n      "asset:prop:description": "A graph asset/offering mounting Carena-X Testdata for Behaviour Twin.",\n      "asset:prop:version": "20230124_testdata_new_bamm",\n      "asset:prop:contenttype": "application/json, application/xml",\n      "rdf:type":"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#GraphAsset>",\n      "rdfs:isDefinedBy": "<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl>",\n      "cx:protocol": "<urn:cx:Protocol:w3c:Http#SPARQL>",\n      "cx:shape": "[ rdf:type sh:NodeShape ;\\n  sh:targetClass cx:LoadSpectrum ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class [ rdf:type sh:NodeShape ;\\n  sh:targetClass cx:VehicleComponent ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003B2OM> ;\\n    ] ] ];\\n",\n      "cx:isFederated": true\n    }\n  },\n  "dataAddress": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:oem:BehaviourTwin",\n      "baseUrl": "http://oem-provider-agent:8080/sparql",\n      "type": "urn:cx:Protocol:w3c:Http#SPARQL",\n      "proxyPath": "false",\n      "proxyMethod": "true",\n      "proxyQueryParams": "true",\n      "proxyBody": "true",\n      "authKey": "Authorization",\n      "authCode": "<ingressauth>"\n    }\n  }\n}\'\n')),(0,o.kt)("h2",{id:"deployment-of-the-remoting-agent"},"Deployment of the Remoting Agent"),(0,o.kt)("h3",{id:"using-the-preconfigured-docker-image-1"},"Using the Preconfigured Docker Image"),(0,o.kt)("p",null,"The remoting agent uses a version of RDF4J:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"ghcr.io/catenax-ng/product-knowledge/remoting-agent:0.7.4-SNAPSHOT"},"Remotin Agent based on RDF4J"))),(0,o.kt)("h3",{id:"deployment-using-a-helm-umbrella-chart-1"},"Deployment using a Helm umbrella chart"),(0,o.kt)("p",null,"We have provided a helm chart which can be used as a sub-chart in a more complex umbrella."),(0,o.kt)("p",null,"Add the KA helm repo for that purpose:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"helm repo add catenax-knowledge https://catenax-ng.github.io/product-knowledge/infrastructure\n")),(0,o.kt)("p",null,"Add aliased dependencies to your umbrella chart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  - name: remoting-agent\n    repository: https://catenax-ng.github.io/product-knowledge/infrastructure\n    version: 0.7.4-SNAPSHOT\n    alias: supplier-remoting-agent\n")),(0,o.kt)("p",null,"and update the dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"helm dependencies update\n")),(0,o.kt)("p",null,"You may now configure the deployment instances in your values.yaml in more detail (see the documentation of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/product-knowledge/tree/feature/KA-188-extract-sub-charts/infrastructure/charts/remoting-agent"},"remoting agent chart"),")."),(0,o.kt)("p",null,"Note that the entries under the repositories object represent the individual bindings/endpoints which bind to your API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# The supplier remoting agent\nsupplier-remoting-agent: \n  nameOverride: supplier-remoting-agent\n  fullnameOverride: supplier-remoting-agent\n  repositories:\n    health: |-\n      #\n      # Rdf4j configuration for a health-specific remoting\n      #\n      @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.\n      @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.\n      @prefix rep: <http://www.openrdf.org/config/repository#>.\n      @prefix sr: <http://www.openrdf.org/config/repository/sail#>.\n      @prefix sail: <http://www.openrdf.org/config/sail#>.\n      @prefix sp: <http://spinrdf.org/sp#>.\n      @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n      @prefix json: <https://json-schema.org/draft/2020-12/schema#> .\n      @prefix dcterms: <http://purl.org/dc/terms/> .\n      @prefix cx-fx: <https://github.com/catenax-ng/product-knowledge/ontology/fx.ttl#>.\n      @prefix cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>.\n      @prefix cx-rt: <urn:io.catenax.knowledge.agents.remoting#>.\n\n      [] rdf:type rep:Repository ;\n        rep:repositoryID "health" ;\n        rdfs:label "Health Prognosis Functions" ;\n        rep:repositoryImpl [\n            rep:repositoryType "openrdf:SailRepository" ;\n            sr:sailImpl [\n              sail:sailType "io.catenax.knowledge:Remoting" ;\n              cx-fx:supportsInvocation cx-health:HealthIndication;\n            ]\n        ].\n\n      cx-health:HealthIndication rdf:type cx-fx:Function;\n        dcterms:description "Health Indication is an evaluation function operating on batches of load collectives and adaptive values."@en ;\n        dcterms:title "Health Indication" ;\n        cx-fx:targetUri "http://service-backend:5005/api/hi";\n        cx-fx:invocationMethod "POST-JSON-MF";\n        cx-fx:batch "100"^^xsd:long;\n        cx-fx:inputProperty "hi_input.healthIndicatorInputs";\n        cx-fx:invocationIdProperty "requestRefId";\n        cx-fx:input cx-health:requestComponentId;\n        cx-fx:input cx-health:classifiedLoadCollectiveProjectDescription;\n        cx-fx:input cx-health:classifiedLoadCollectiveComponentDescription;\n        cx-fx:input cx-health:classifiedLoadCollectiveCountingValue;\n        cx-fx:input cx-health:classifiedLoadCollectiveCountingMethod;\n        cx-fx:input cx-health:classifiedLoadCollectiveCountingUnit;\n        cx-fx:input cx-health:classifiedLoadCollectiveChannels;\n        cx-fx:input cx-health:classifiedLoadCollectiveCounts;\n        cx-fx:input cx-health:classifiedLoadCollectiveClasses;\n        cx-fx:input cx-health:adaptionValueVersion;\n        cx-fx:input cx-health:adaptionValueTimestamp;\n        cx-fx:input cx-health:adaptionValueMileage;\n        cx-fx:input cx-health:adaptionValueOperatingTime;\n        cx-fx:input cx-health:adaptionValueList;\n        cx-fx:result cx-health:HealthIndicator.\n\n      cx-health:HealthIndicator rdf:type cx-fx:Result;\n        dcterms:description "Health Indicator is part of a indicator batch."@en ;\n        dcterms:title "Health Indicator" ;\n        cx-fx:outputProperty "healthIndicatorOutputs";\n        cx-fx:resultIdProperty "componentId";\n        cx-fx:correlationInput cx-health:requestComponentId;\n        cx-fx:output cx-health:indicatorVersion;\n        cx-fx:output cx-health:responseComponentId;\n        cx-fx:output cx-health:healthIndicatorValues.\n\n      cx-health:requestComponentId rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Input relates to a component."@en ;\n        dcterms:title "Health Indicator Component Id";\n        cx-fx:argumentName "componentId".\n\n      cx-health:classifiedLoadCollectiveProjectDescription rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a project description."@en ;\n        dcterms:title "Classified Load Collective Project Description";\n        cx-fx:mandatory "false"^^xsd:boolean;\n        cx-fx:argumentName "classifiedLoadCollective.metadata.projectDescription".\n\n      cx-health:classifiedLoadCollectiveComponentDescription rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a component description."@en ;\n        dcterms:title "Classified Load Collective Component Description";\n        cx-fx:argumentName "classifiedLoadCollective.metadata.componentDescription".\n\n      cx-health:classifiedLoadCollectiveCountingValue rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a value for the counting dimension."@en ;\n        dcterms:title "Classified Load Collective Counting Value";\n        cx-fx:mandatory "false"^^xsd:boolean;\n        cx-fx:argumentName "classifiedLoadCollective.header.countingValue".\n\n      cx-health:classifiedLoadCollectiveCountingUnit rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a unit for the counting dimension."@en ;\n        dcterms:title "Classified Load Collective Counting Unit";\n        cx-fx:argumentName "classifiedLoadCollective.header.countingUnit".\n\n      cx-health:classifiedLoadCollectiveCountingMethod rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a method for the counting dimension."@en ;\n        dcterms:title "Classified Load Collective Counting Method";\n        cx-fx:argumentName "classifiedLoadCollective.header.countingMethod".\n\n      cx-health:classifiedLoadCollectiveChannels rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has descriptors for all channels."@en ;\n        dcterms:title "Classified Load Collective Channels";\n        cx-fx:argumentName "classifiedLoadCollective.header.channels".\n\n      cx-health:classifiedLoadCollectiveCounts rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a body with the raw measurements."@en ;\n        dcterms:title "Classified Load Collective Counts";\n        cx-fx:argumentName "classifiedLoadCollective.body.counts".\n\n      cx-health:classifiedLoadCollectiveClasses rdf:type cx-fx:Argument;\n        dcterms:description "A Load Collective has a body with the class indices."@en ;\n        dcterms:title "Classified Load Collective Classes";\n        cx-fx:argumentName "classifiedLoadCollective.body.classes".\n\n      cx-health:adaptionValueVersion rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs a version."@en ;\n        dcterms:title "Adaption Value List Version";\n        cx-fx:argumentName "adaptionValueList.version".\n\n      cx-health:adaptionValueTimestamp rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs a timestamp."@en ;\n        dcterms:title "Adaption Value List Timestamp";\n        cx-fx:argumentName "adaptionValueList.timestamp".\n\n      cx-health:adaptionValueMileage rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs a mileage of the embedding vehicle."@en ;\n        dcterms:title "Adaption Value List Mileage";\n        cx-fx:argumentName "adaptionValueList.mileage_km".\n\n      cx-health:adaptionValueOperatingTime rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs an operating time of the embedding vehicle."@en ;\n        dcterms:title "Adaption Value List Operating Time";\n        cx-fx:argumentName "adaptionValueList.operatingtime_s".\n\n      cx-health:adaptionValueList rdf:type cx-fx:Argument;\n        dcterms:description "A Health Indicator Adaption needs an array of adaption values."@en ;\n        dcterms:title "Adaption Value List Values";\n        cx-fx:argumentName "adaptionValueList.values".\n\n      cx-health:indicatorVersion rdf:type cx-fx:ReturnValue;\n        dcterms:description "Version of the health indicator prognosis."@en ;\n        dcterms:title "Health Indicator Prognosis Version" ;\n        cx-fx:valuePath "version";\n        cx-fx:dataType xsd:string.\n\n      cx-health:responseComponentId rdf:type cx-fx:ReturnValue;\n        dcterms:description "Component Id of the health indicator prognosis."@en ;\n        dcterms:title "Health Indicator Prognosis Component Id" ;\n        cx-fx:valuePath "componentId";\n        cx-fx:dataType xsd:string.\n\n      cx-health:healthIndicatorValues rdf:type cx-fx:ReturnValue;\n        dcterms:description "Health Indicator Values are percentages."@en ;\n        dcterms:title "Health Indicator Values" ;\n        cx-fx:valuePath "healthIndicatorValues";\n        cx-fx:dataType json:Object.\n')),(0,o.kt)("p",null,"When the endpoint is running, it can be published through the associated connector using the following REST call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'curl --location --request POST \'https://supplier-data-plane.public/data/assets\' \\\n--header \'X-Api-Key: <apikey>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "asset": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:tierA:HealthIndicatorGearbox",\n      "asset:prop:contract": "urn:cx:Graph:tierA",\n      "asset:prop:name": "Health Indications Service for Gearboxes",\n      "asset:prop:description": "Another sample graph asset/offering referring to a specific prognosis resource.",\n      "asset:prop:version": "0.7.4-SNAPSHOT",\n      "asset:prop:contenttype": "application/json, application/xml",\n      "rdf:type":"<https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#GraphAsset>",\n      "rdfs:isDefinedBy": "<https://github.com/catenax-ng/product-knowledge/ontology/health.ttl>",\n      "cx:protocol": "urn:cx:Protocol:w3c:Http#SPARQL",\n      "cx:shape": "[ rdf:type sh:NodeShape ;\\n  sh:targetClass cx-health:HealthIndication ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003CPIY> ]].\\n",\n      "cx:isFederated": true\n    }\n  },\n  "dataAddress": {\n    "properties": {\n      "asset:prop:id": "urn:cx:Graph:tierA:HealthIndicatorGearbox",\n      "baseUrl": "http://supplier-remoting-agent:8081/rdf4j-server/repositories/health",\n      "type": "urn:cx:Protocol:w3c:Http#SPARQL",\n      "proxyPath": "false",\n      "proxyMethod": "true",\n      "proxyQueryParams": "true",\n      "proxyBody": "true",\n      "authKey": "Authorization",\n      "authCode": "<ingresskey>"\n    }\n  }\n}\'\n')))}p.isMDXComponent=!0}}]);