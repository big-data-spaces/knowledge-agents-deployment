{
	"info": {
		"_postman_id": "b3a8c4e9-117f-4c9f-bc63-7a7adcdada52",
		"name": "Upcoming Release (1.14.24 - CX 24.12)",
		"description": "A collection of API calls against various services of the Knowledge Agents Product.\n\nAlso contains a special integration test and e2e test subfolders.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2757771",
		"_collection_link": "https://www.postman.com/catena-x/workspace/c205e5d8-e00e-4e9e-a1b4-3d8e79bb83e2/collection/2757771-b3a8c4e9-117f-4c9f-bc63-7a7adcdada52?action=share&source=collection_link&creator=2757771"
	},
	"item": [
		{
			"name": "Dataspace",
			"item": [
				{
					"name": "OEM (Data Providing Agent)",
					"item": [
						{
							"name": "Provisioning/Binding Agent",
							"item": [
								{
									"name": "Query Trouble Code Endpoint/Asset",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:   <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:     <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:  <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:     <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT * WHERE {\n\n\t\t\t# Select Business Partner\n            ?oem rdf:type cx-common:BusinessPartner;\n              cx-core:id \"BPNL00000003COJN\".\n        \n\t\t\t#Search for Trouble Codes of the Business Partner\n            # related to a cause in the \"Kabelbaum\"\n            ?Dtc rdf:type cx-reliability:Analysis;\n\t\t\t\t   cx-core:id ?code;\n\t\t\t\t   cx-core:name ?description;\n\t\t\t\t   cx-reliability:analysedObject ?Part.\n\n            FILTER contains(?description,\"Zylinder\").       \n\n            ?Part cx-vehicle:manufacturer ?oem;\n\t\t\t\t  cx-core:id ?partend;\n\t\t\t\t  cx-core:name ?partclass.\n\n            FILTER contains(?partclass,'Powertrain').\n\n}"
										},
										"url": {
											"raw": "{{provisioningAgent}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Reliability Endpoint/Asset",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?teleAnalysis ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values WHERE {\n\n    VALUES (?van ?aggregate) { \n        (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (<https://w3id.org/catenax/taxonomy#GearOil>) (<https://w3id.org/catenax/taxonomy#GearSet>) \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent5}}/sparql",
											"host": [
												"{{provisioningAgent5}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Traceablity Endpoint/Asset",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common: <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core: <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-bom: <https://w3id.org/catenax/ontology/bill-of-material#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n\n\n    SELECT DISTINCT ?id ?name ?pasp ?psasp ?hasRecycling ?slbomap ?slusap ?mfr\n    WHERE {\n\n        # all parts are twins\n        ?id rdf:type cx-vehicle:Part;\n            cx-core:name ?name.\n\n        # Part\n        OPTIONAL{\n            ?id cx-core:id ?manufacturerPartId.\n            BIND(<urn:bamm:io.catenax.part_as_planned:1.0.1#PartAsPlanned> as ?pasp).\n        }\n    }\n\n    ORDER BY DESC(?id)"
										},
										"url": {
											"raw": "{{provisioningAgent3}}/sparql",
											"host": [
												"{{provisioningAgent3}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Data Provisioning Agents Directly Which Sits upon some Data Source.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "AAS Bridge",
							"item": [
								{
									"name": "Description",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"user-agent": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/api/v3.0/description",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"description"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Shells",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/api/v3.0/shells",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"shells"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Submodels",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/api/v3.0/submodels?content=value&level=deep",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"submodels"
											],
											"query": [
												{
													"key": "content",
													"value": "value"
												},
												{
													"key": "level",
													"value": "deep"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Submodel",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/api/v3.0/submodels/:submodelIdentifier/submodel?level=deep",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"submodels",
												":submodelIdentifier",
												"submodel"
											],
											"query": [
												{
													"key": "level",
													"value": "deep"
												},
												{
													"key": "content",
													"value": "value",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "submodelIdentifier",
													"value": "dHJhY2VhYmlsaXR5L3VybjpiYW1tOmlvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWQ6MS4wLjAjUGFydFNpdGVJbmZvcm1hdGlvbkFzUGxhbm5lZC91cm46dXVpZDplNWM5NmFiNS04OTZhLTQ4MmMtODc2MS1lZmQ3NDc3N2NhOTc="
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Shell",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/api/v3.0/shells/:shellid",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"shells",
												":shellid"
											],
											"variable": [
												{
													"key": "shellid",
													"value": "dHJhY2VhYmlsaXR5L3Vybjp1dWlkOmU1Yzk2YWI1LTg5NmEtNDgyYy04NzYxLWVmZDc0Nzc3Y2E5Nw=="
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Shell Submodel (PartSiteInformation)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/shells/:shellid/aas/submodels/:submodelId/submodel?content=value",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"shells",
												":shellid",
												"aas",
												"submodels",
												":submodelId",
												"submodel"
											],
											"query": [
												{
													"key": "content",
													"value": "value",
													"description": "Shows only remaining values"
												},
												{
													"key": "content",
													"value": "normal",
													"description": "The default AAS mode",
													"disabled": true
												},
												{
													"key": "level",
													"value": "deep",
													"description": "Whether to recurse into the structures",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "shellid",
													"value": "dHJhY2VhYmlsaXR5L3Vybjp1dWlkOmU1Yzk2YWI1LTg5NmEtNDgyYy04NzYxLWVmZDc0Nzc3Y2E5Nw=="
												},
												{
													"key": "submodelId",
													"value": "dHJhY2VhYmlsaXR5L3VybjpiYW1tOmlvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWQ6MS4wLjAjUGFydFNpdGVJbmZvcm1hdGlvbkFzUGxhbm5lZC91cm46dXVpZDplNWM5NmFiNS04OTZhLTQ4MmMtODc2MS1lZmQ3NDc3N2NhOTc="
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Shell Submodel (SingleLevelBom)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/shells/:shellid/aas/submodels/:submodelId/submodel?content=value",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"shells",
												":shellid",
												"aas",
												"submodels",
												":submodelId",
												"submodel"
											],
											"query": [
												{
													"key": "content",
													"value": "value",
													"description": "Shows only remaining values"
												},
												{
													"key": "content",
													"value": "normal",
													"description": "The default AAS mode",
													"disabled": true
												},
												{
													"key": "level",
													"value": "deep",
													"description": "Whether to recurse into the structures",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "shellid",
													"value": "dHJhY2VhYmlsaXR5L3Vybjp1dWlkOmU1Yzk2YWI1LTg5NmEtNDgyYy04NzYxLWVmZDc0Nzc3Y2E5Nw=="
												},
												{
													"key": "submodelId",
													"value": "dHJhY2VhYmlsaXR5L3VybjpiYW1tOmlvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkOjIuMC4wI1NpbmdsZUxldmVsQm9tQXNQbGFubmVkL3Vybjp1dWlkOmU1Yzk2YWI1LTg5NmEtNDgyYy04NzYxLWVmZDc0Nzc3Y2E5Nw=="
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Shell Submodel (Part As Planned)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/shells/:shellid/aas/submodels/:submodelId/submodel?content=normal",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"shells",
												":shellid",
												"aas",
												"submodels",
												":submodelId",
												"submodel"
											],
											"query": [
												{
													"key": "content",
													"value": "value",
													"description": "Shows only remaining values",
													"disabled": true
												},
												{
													"key": "content",
													"value": "normal",
													"description": "The default AAS mode"
												},
												{
													"key": "level",
													"value": "deep",
													"description": "Whether to recurse into the structures",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "shellid",
													"value": "dHJhY2VhYmlsaXR5L3Vybjp1dWlkOmU1Yzk2YWI1LTg5NmEtNDgyYy04NzYxLWVmZDc0Nzc3Y2E5Nw=="
												},
												{
													"key": "submodelId",
													"value": "dHJhY2VhYmlsaXR5L3VybjpiYW1tOmlvLmNhdGVuYXgucGFydF9hc19wbGFubmVkOjEuMC4xI1BhcnRBc1BsYW5uZWQvdXJuOnV1aWQ6ZTVjOTZhYjUtODk2YS00ODJjLTg3NjEtZWZkNzQ3NzdjYTk3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Shell Festo",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://admin-shell-io.com/51411/aas/Festo_3S7PM0CP4BD",
											"protocol": "https",
											"host": [
												"admin-shell-io",
												"com"
											],
											"path": [
												"51411",
												"aas",
												"Festo_3S7PM0CP4BD"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "EDC",
							"item": [
								{
									"name": "Setup Assets, Policies, Contracts and Skills",
									"item": [
										{
											"name": "Register Data-Plane in OEM Consumer EDC",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@id\": \"de4acfeb-3bab-453f-b8ef-ffb39efc0c52\",\n    \"@type\": [\n        \"https://w3id.org/edc/v0.0.1/ns/DataPlaneInstance\"\n    ],\n    \"https://w3id.org/edc/v0.0.1/ns/url\": [\n        {\n            \"@value\": \"http://oem-data-plane:8083/api/signaling/v1/dataflows\"\n        }\n    ],\n    \"https://w3id.org/edc/v0.0.1/ns/lastActive\": [\n        {\n            \"@value\": 1728468090908\n        }\n    ],\n    \"https://w3id.org/edc/v0.0.1/ns/turnCount\": [\n        {\n            \"@value\": 0\n        }\n    ],\n    \"https://w3id.org/edc/v0.0.1/ns/allowedSourceTypes\": [\n        {\n            \"@value\": \"AmazonS3\"\n        },\n        {\n            \"@value\": \"HttpData\"\n        },\n        {\n            \"@value\": \"cx-common:Protocol?w3c:http:SKILL\"\n        },\n        {\n            \"@value\": \"cx-common:Protocol?w3c:http:SPARQL\"\n        },\n        {\n            \"@value\": \"AzureStorage\"\n        }\n    ],\n    \"https://w3id.org/edc/v0.0.1/ns/allowedDestTypes\": [\n        {\n            \"@value\": \"AmazonS3\"\n        },\n        {\n            \"@value\": \"HttpData\"\n        },\n        {\n            \"@value\": \"AzureStorage\"\n        }\n    ],\n    \"https://w3id.org/edc/v0.0.1/ns/allowedTransferTypes\": [\n        {\n            \"@value\": \"AzureStorage-PUSH\"\n        },\n        {\n            \"@value\": \"HttpData-PULL\"\n        },\n        {\n            \"@value\": \"cx-common:Protocol?w3c:http:SKILL-PULL\"\n        },\n        {\n            \"@value\": \"HttpData-PUSH\"\n        },\n        {\n            \"@value\": \"AmazonS3-PUSH\"\n        },\n        {\n            \"@value\": \"cx-common:Protocol?w3c:http:SPARQL-PULL\"\n        }\n    ],\n    \"https://w3id.org/edc/v0.0.1/ns/stateTimestamp\": [\n        {\n            \"@value\": 1728468090910\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemConsumerEdcInternal}}/control/v1/dataplanes",
													"host": [
														"{{oemConsumerEdcInternal}}"
													],
													"path": [
														"control",
														"v1",
														"dataplanes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"cx-policy\": \"https://w3id.org/catenax/policy/\"\n    },\n    \"@id\": \"Policy?oem=Graph\",\n    \"policy\": {\n        \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n        \"@type\": \"Set\",\n        \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Graph\",\n        \"profile\": \"cx-policy:profile2405\",\n        \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n        \"assigner\": {\n            \"@id\": \"{{oemBPNL}}\"\n        },\n        \"permission\": [\n            {\n                \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n                \"action\": \"https://w3id.org/edc/v0.0.1/ns/use\",\n                \"constraint\": {\n                    \"@type\": \"LogicalConstraint\",\n                    \"or\": [\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{oemBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{supplierBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{consumerBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"BPNL00000002HCQ9\"\n                        }\n                    ]\n                }\n            }\n        ],\n        \"prohibition\": [],\n        \"obligation\": []\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v2/policydefinitions",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Update Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"cx-policy\": \"https://w3id.org/catenax/policy/\"\n    },\n    \"@id\": \"Policy?oem=Graph\",\n    \"policy\": {\n        \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n        \"@type\": \"Set\",\n        \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Graph\",\n        \"profile\": \"cx-policy:profile2405\",\n        \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n        \"assigner\": {\n            \"@id\": \"{{oemBPNL}}\"\n        },\n        \"permission\": [\n            {\n                \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n                \"action\": \"https://w3id.org/edc/v0.0.1/ns/use\",\n                \"constraint\": {\n                    \"@type\": \"LogicalConstraint\",\n                    \"or\": [\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{oemBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{supplierBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{consumerBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"BPNL00000002HCQ9\"\n                        }\n                    ]\n                }\n            }\n        ],\n        \"prohibition\": [],\n        \"obligation\": []\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v2/policydefinitions/:name",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "Policy%3Foem%3DGraph"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Create Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?oem=Graph\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?oem=Graph\",\n    \"contractPolicyId\": \"Policy?oem=Graph\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?oem=Graph\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v2/contractdefinitions",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Update Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?oem=Graph\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?oem=Graph\",\n    \"contractPolicyId\": \"Policy?oem=Graph\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?oem=Graph\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v2/contractdefinitions",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Create CONF Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n    \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n    \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n    \"sh\": \"http://www.w3.org/ns/shacl#\",\n    \"dct\": \"https://purl.org/dc/terms/\"\n  },\n  \"@id\": \"GraphAsset?oem=Conforming\",\n  \"properties\": {\n    \"name\": \"Conforming Asset.\",\n    \"description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n    \"cx-common:version\": \"1.9.3-SNAPSHOT\",\n    \"contenttype\": \"application/json, application/xml\",\n    \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n    \"dct:type\": \"cx-taxo:GraphAsset\",\n    \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n    \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n    \"sh:shapesGraph\": \"@prefix : <GraphAsset?oem=Conforming#> .\\n\",\n    \"cx-common:isFederated\": \"true^^xsd:boolean\"\n  },\n  \"privateProperties\": {\n  },\n  \"dataAddress\": {\n    \"id\": \"GraphAsset?oem=Conforming\", \n    \"@type\": \"DataAddress\",\n    \"baseUrl\": \"http://conforming-agent:8080/bind\",\n    \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n    \"proxyPath\": \"false\",\n    \"proxyMethod\": \"true\",\n    \"proxyQueryParams\": \"true\",\n    \"proxyBody\": \"true\",\n    \"authKey\": \"{{oemBackendAuthKey}}\",\n    \"authCode\": \"{{oemBackendAuthCode}}\",\n    \"cx-common:allowServicePattern\": \"(http|edc)s?://.*\",\n    \"cx-common:denyServicePattern\": \"http://ifconfig\\\\.me.*\"\n  }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v3/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create DT Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n    \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n    \"sh\": \"http://www.w3.org/ns/shacl#\"\n  },\n  \"@id\": \"GraphAsset?oem=Diagnosis2022\", \n  \"properties\": {\n            \"name\": \"Diagnostic Trouble Code Catalogue Version 2022\",\n            \"description\": \"A sample graph asset/offering referring to a specific diagnosis resource.\",\n            \"version\": \"1.9.3-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/diagnosis>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix cx-common: <https://w3id.org/catenax/ontology/common#>. \\n@prefix : <GraphAsset?oem=Diagnosis2022#> .\\n@prefix cx-diag: <https://w3id.org/catenax/ontology/diagnosis#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\n:OemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DTC ;\\n  sh:property [\\n        sh:path cx-diag:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:version ;\\n        sh:hasValue \\\"0\\\"^^xsd:long \\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:affects ;\\n        sh:class :OemDiagnosedParts\\n    ] .\\n\\n:OemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx-diag:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003COJN>\\n    ] .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\":{\n    },\n    \"dataAddress\": {\n        \"id\":\"GraphAsset?oem=Diagnosis2022\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{oemProviderAgent}}/sparql\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"(http|edc)s?://.*\",\n        \"cx-common:denyServicePattern\": \"http://ifconfig\\\\.me.*\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v3/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create TAP Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n    \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n    \"sh\": \"http://www.w3.org/ns/shacl#\"\n  },\n  \"@id\": \"GraphAsset?oem=TraceabilityAsPlanned\", \n  \"properties\": {\n            \"name\": \"OEM portion of the Traceability As-Planned Testdataset.\",\n            \"description\": \"A graph asset/offering mounting Carena-X Testdata for Traceability.\",\n            \"version\": \"CX_Testdata_v1.5-SNAPSHOT-AsPlanned\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"dct:type\": { \"@id\": \"https://w3id.org/catenax/ontology/common#GraphAsset\" },\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/part>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?oem=TraceabilityAsPlanned#> .\\n@prefix cx-part: <ttps://w3id.org/catenax/ontology/part#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\n:OemAssemblyGroup rdf:type sh:NodeShape ;\\n  sh:targetClass cx-part:AssemblyGroup ;\\n  sh:property [\\n        sh:path cx-part:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-part:Version ;\\n        sh:hasValue sh:hasValue \\\"0\\\"^^xsd:long \\n    ] ;\\n  sh:property [\\n        sh:path cx-part:hasPart ;\\n        sh:class :SupplierParts \\n    ] .\\n\\n:SupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-part:Part ;\\n  sh:property [\\n        sh:path cx-part:isProducedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003B2OM> \\n    ] .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n\t\t\"privateProperties\":{\n\t\t\t\n\t\t},\n    \"dataAddress\": {\n        \"id\":\"GraphAsset?oem=TraceabilityAsPlanned\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"http://oem-provider-agent:8082/sparql\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v3/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create QUAL Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n    \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n    \"sh\": \"http://www.w3.org/ns/shacl#\"\n  },\n  \"@id\": \"GraphAsset?oem=Quality\", \n  \"properties\": {\n            \"name\": \"Quality Data.\",\n            \"description\": \"A graph asset/offering mounting Quality data.\",\n            \"version\": \"1.9.3-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/error>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?oem=Quality#> .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\": {\n    },\n    \"dataAddress\": {\n        \"id\":\"GraphAsset?oem=Quality\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"http://oem-provider-agent:8083/sparql\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v3/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create REL Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n     \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n     \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n     \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n     \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n     \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n     \"sh\": \"http://www.w3.org/ns/shacl#\",\n     \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n     \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"cx-taxo:GraphAsset?oem=BehaviourTwinReliability\",\n    \"properties\": {\n        \"cx-common:name\": \"Reliability Data Service\",\n        \"cx-common:description\": \"Test Telematics Data as provided by an OEM.\",\n        \"cx-common:description@de\": \"Test Telematik Daten eines OEM.\",\n        \"cx-common:version\": \"CX_RuL_Testdata_v1.0.0\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n        \"dct:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/taxonomy>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/reliability>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix schema: <http://schema.org/> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix edc: <https://w3id.org/edc/v0.0.1/ns/> .\\n@prefix cx-common: <https://w3id.org/catenax/ontology/common#> .\\n@prefix cx-core: <https://w3id.org/catenax/ontology/core#> .\\n@prefix cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#> .\\n@prefix cx-reliability: <https://w3id.org/catenax/ontology/reliability#> .\\n@prefix cx-sh: <https://w3id.org/catenax/ontology/schema#> .\\n@prefix cx-taxo: <https://w3id.org/catenax/taxonomy#> .\\n@prefix : <https://w3id.org/catenax/taxonomy#GraphAsset?oem=BehaviourTwinReliability&shapeObject=> .\\n\\n:LoadSpectrumShape a sh:NodeShape ;\\n    sh:targetClass  cx-reliability:LoadSpectrum;\\n    sh:property :observationOfShape, \\n                :countingValueShape, \\n                :countingUnitShape, \\n                :countingMethodShape, \\n                :channelsShape, \\n                :classesShape, \\n                :valuesShape.\\n\\n:observationOfShape a sh:PropertyShape;\\n    sh:path cx-reliability:observationOf;\\n    sh:in (cx-taxo:GearOil cx-taxo:GearSet cx-taxo:Clutch).\\n\\n:countingValueShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingValue.\\n\\n:countingUnitShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingUnit.\\n\\n:countingMethodShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingMethod.\\n\\n:countingMethodShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingMethod.\\n\\n:channelsShape a sh:PropertyShape;\\n    sh:path cx-reliability:channels.\\n\\n:classesShape a sh:PropertyShape;\\n    sh:path cx-reliability:classes.\\n\\n:valuesShape a sh:PropertyShape;\\n    sh:path cx-reliability:values.\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n\t\t\"privateProperties\": {\n\t\t},\n    \"dataAddress\": {\n        \"id\": \"cx-taxo:GraphAsset?oem=BehaviourTwinReliability\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{oemProviderAgent5}}/sparql\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"(http|edc)s?://.*\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v3/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Skill Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"cx-policy\": \"https://w3id.org/catenax/policy/\"\n  },\n  \"@id\": \"Policy?oem=Skill\",\n  \"policy\": {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"@type\": \"Set\",\n    \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Skill\",\n\t\t\"profile\": \"cx-policy:profile2405\",\n    \"target\": \"https://w3id.org/catenax/ontology/common#SkillAsset?oem=\",\n    \"assigner\": {\n            \"@id\": \"{{oemBPNL}}\"\n    },\n    \"permission\": [\n      {\n        \"target\": \"https://w3id.org/catenax/ontology/common#SkillAsset?oem=\",\n        \"action\": \"USE\",\n        \"constraint\": {\n\t\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\t\"or\" : [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{oemBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{consumerBPNL}}\"\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"BPNL00000002HCQ9\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t}\n      }\n    ]\n  }\n}\n\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcProviderControl}}/management/v2/policydefinitions",
													"host": [
														"{{oemEdcProviderControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Create Skill Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?oem=Skill\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?oem=Skill\",\n    \"contractPolicyId\": \"Policy?oem=Skill\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?oem=Skill\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcProviderControl}}/management/v2/contractdefinitions",
													"host": [
														"{{oemEdcProviderControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill contract."
											},
											"response": []
										},
										{
											"name": "Create Skill Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n    \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n    \"sh\": \"http://www.w3.org/ns/shacl#\"\n  },\n  \"@id\": \"SkillAsset?oem=Conforming\", \n\t\"properties\": {\n\t\t\t\"name\": \"Conforming Skill\",\n\t\t\t\"description\": \"A sample skill.\",\n\t\t\t\"version\": \"1.9.3-SNAPSHOT\",\n\t\t\t\"contenttype\": \"application/json, application/xml\",\n\t\t\t\"cx-common:publishedUnderContract\": \"Contract?oem=Skill\",\n\t\t\t\"rdf:type\": \"cx-common:SkillAsset\",\n\t\t\t\"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n\t\t\t\"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n\t\t\t\"cx-common:runsDistributed\": \"true^^xsd:boolean\",\n\t\t\t\"cx-common:isFederated\": \"true^^xsd:boolean\"\n\t},\n\t\"privateProperties\": {\n\t\t\t\"cx-common:query\":\"SELECT ?subject ?predicate ?object WHERE { SERVICE <http://conforming-agent:8080/bind> { ?subject ?predicate ?object. } }\"\n\t},\n  \"dataAddress\": {\n        \"id\":\"SkillAsset?oem=Conforming\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\":\"\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n  }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcProviderControl}}/management/v3/assets",
													"host": [
														"{{oemEdcProviderControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Register Dataspace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \nPREFIX sh: <http://www.w3.org/ns/shacl#> \n\nSELECT ?connector ?asset \n       ?name\n       (MIN(?adescription) AS ?description) \n       ?type\n       (MAX(?aversion) AS ?version) \n       (GROUP_CONCAT(DISTINCT ?acontentType;SEPARATOR=\",\") AS ?contentType) \n       ?protocol\n       (CONCAT(\"<\",GROUP_CONCAT(?aontology;SEPARATOR=\">,<\"),\">\") AS ?isDefinedBy) \n       (MIN(?ashape) AS ?shape)\n WHERE { \n     ?connector cx-common:offers ?asset. \n     ?asset cx-common:contentType ?acontentType; \n            cx-common:name ?name; \n            rdf:type ?type; \n            rdfs:isDefinedBy ?aontology; \n            cx-common:version ?aversion; \n            cx-common:description ?adescription;\n            cx-common:implementsProtocol ?protocol. \n\n    OPTIONAL {\n        ?asset sh:shapesGraph ?ashape\n    }\n} GROUP BY ?connector ?asset ?name ?type ?protocol",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{oemAgentPlane}}/api/agent/skill?asset=SkillAsset%3Foem%3DDataspace&isFederated=false",
													"host": [
														"{{oemAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Foem%3DDataspace"
														},
														{
															"key": "distributionMode",
															"value": "CONSUMER",
															"disabled": true
														},
														{
															"key": "isFederated",
															"value": "false"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Health Skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is Success\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,201]);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n# Sample for a Federated Skill (No Matchmaking) Which\n#  - Jumps right into the OEM with a set of VANs and aggregates\n#  - Feeds this data into the respective tiera connector/agent to perform a health prognosis \n\nSELECT ?van ?aggregate ?supplier ?assembly ?healthType ?recordDate ?mileage ?operatingTime ?health ?supplierEDC ?healthIndicatorAsset WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    VALUES (?van ?aggregate ?healthType ?adaptionValues) { \n      (\"@van\"^^xsd:string \"@aggregate\"^^xsd:string \"@healthType\"^^xsd:string \"@adaptionValues\"^^json:Object) \n    }\n    \n    # Now we are jumping into the OEM\n    SERVICE <{{oemProviderAgent2}}/sparql> { \n\n        ?vehicle rdf:type cx:Vehicle;\n           cx:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx:AssemblyGroup;\n            cx:partName ?aggregate;\n            cx:isPartOf ?vehicle;\n            cx:isProducedBy ?supplier;\n            cx:hasLoadSpectrum [ \n                 cx:vehicleOperatingHours ?operatingTime;\n                 cx:vehicleCurrentMileage ?mileage;\n                 cx:vehicleCurrentStateDateTime ?recordDate;\n                 cx:loadSpectrumDescription ?healthType;\n                 cx:loadSpectrumType ?channels;\n                 cx:hasLoadSpectrumValues [ \n                    cx:loadSpectrumCountingUnit ?countUnit; \n                    cx:loadSpectrumCountingMethod ?countMethod; \n                    cx:loadSpectrumChannelIndex ?classes; \n                    cx:loadSpectrumChannelValues ?counts\n                 ]\n            ].\n    }\n\n    ?supplier <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#hasConnector> ?supplierEDC.\n    ?supplierEDC <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#offersAsset> ?healthIndicatorAsset.\n    ?healthIndicatorAsset a cx:GraphAsset;\n       rdfs:isDefinedBy <{{cxOntologyRoot}}/load_spectum_ontology.ttl>.\n\n    #SERVICE <{{tierARemotingAgent}}/repositories/health> {\n    SERVICE ?supplierEDC {\n        GRAPH ?healthIndicatorAsset { \n            ?invocation rdf:type cx-health:HealthIndication;\n                  cx-health:requestComponentId ?assembly;\n                  cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n                  cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n                  cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n                  cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n                  cx-health:classifiedLoadCollectiveChannels ?channels;\n                  cx-health:classifiedLoadCollectiveClasses ?classes;\n                  cx-health:classifiedLoadCollectiveCounts ?counts;\n                  cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n                  cx-health:adaptionValueTimestamp ?recordDate;\n                  cx-health:adaptionValueMileage ?mileage; \n                  cx-health:adaptionValueOperatingTime ?operatingTime;\n                  cx-health:adaptionValueList ?adaptionValues;\n                  cx-health:indicatorVersion ?indicatorVersion;\n                  cx-health:responseComponentId ?indicatorComponentId;\n                  cx-health:healthIndicatorValues ?health.    \n        }\n    }\n    \n}\n\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{oemAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:oem:Health&distributionMode=ALL",
													"host": [
														"{{oemAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:oem:Health"
														},
														{
															"key": "distributionMode",
															"value": "ALL"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Modular Health Skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is Success\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,201]);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n# Sample for a Federated Modular Skill (No Matchmaking) Which\n#  - Jumps right into the OEM with a set of VINs\n#  - Calls subskills to perform a health prognosis for the main aggregates \n\nSELECT ?van ?aggregate ?supplier ?assembly ?healthType ?health ?supplierEDC WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    VALUES (?vin ) { \n      (\"@vin\"^^xsd:string) \n    }\n\n    # Lookup the manufacturer and its main vehicle information asset\n    ?vin cx:worldManufacturerId ?oem.\n    ?oem cx:hasConnector ?oemEDC.\n    ?oemEDC cx:offersAsset ?vehicleAsset.\n    ?vehicleAsset rdf:type cx:GraphAsset;\n       rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/vehicle_information_ontology.ttl>.\n\n    # Now we are jumping into the OEM\n    SERVICE ?oemEDC { \n\n        GRAPH ?vehicleAsset {\n            ?van rdf:type cx:Vehicle;\n                cx:vehicleIdentificationNumber ?vin.\n\n            ?assembly rdf:type cx:AssemblyGroup;\n                cx:partName ?aggregate;\n                cx:isPartOf ?van;\n                cx:isProducedBy ?supplier.\n        }\n\n        ?telematicsAsset rdf:type cx:GraphAsset;\n            rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl>.\n\n        ?supplier cx:hasConnector ?supplierEDC.\n        ?supplierEDC cx:offersAsset ?prognosisSkill.\n        ?prognosisSkill a cx:SkillAsset;\n            rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/prognosis_ontology.ttl>.\n\n        SERVICE <{?supplierEDC}#{?prognosisSkill}> {\n            BIND(?assembly AS ?assembly).\n            BIND(?oemEDC as ?oem).\n        }\n    }\n    \n}\n\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{oemAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:oem:Health&distributionMode=ALL",
													"host": [
														"{{oemAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:oem:Health"
														},
														{
															"key": "distributionMode",
															"value": "ALL"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Health Skill Module",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n# Sample for a Modular Subskill\n#  - Jumps back into the given OEM to obtain specific data\n#  - Feeds this data into the health prognosis asset \n\nSELECT ?healthType ?health WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    VALUES (?assembly ?telematicsAsset ?oemEDC ?healthType) { \n      (<@assembly> <@asset> <@oem> \"Gearbox\"^^xsd:string) \n    }\n    \n    # Now we are jumping into the OEM\n    SERVICE ?oemEDC { \n        GRAPH ?telematicsAsset {\n        ?assembly rdf:type cx:AssemblyGroup;\n            cx:hasLoadSpectrum [ \n                 cx:vehicleOperatingHours ?operatingTime;\n                 cx:vehicleCurrentMileage ?mileage;\n                 cx:vehicleCurrentStateDateTime ?recordDate;\n                 cx:loadSpectrumDescription ?healthType;\n                 cx:loadSpectrumType ?channels;\n                 cx:hasLoadSpectrumValues [ \n                    cx:loadSpectrumCountingUnit ?countUnit; \n                    cx:loadSpectrumCountingMethod ?countMethod; \n                    cx:loadSpectrumChannelIndex ?classes; \n                    cx:loadSpectrumChannelValues ?counts\n                 ]\n            ].\n    }\n\n    GRAPH <{{tieraRemotingAgent2}}>/sparql> { \n            ?invocation rdf:type cx-health:HealthIndication;\n                  cx-health:requestComponentId ?assembly;\n                  cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n                  cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n                  cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n                  cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n                  cx-health:classifiedLoadCollectiveChannels ?channels;\n                  cx-health:classifiedLoadCollectiveClasses ?classes;\n                  cx-health:classifiedLoadCollectiveCounts ?counts;\n                  cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n                  cx-health:adaptionValueTimestamp ?recordDate;\n                  cx-health:adaptionValueMileage ?mileage; \n                  cx-health:adaptionValueOperatingTime ?operatingTime;\n                  cx-health:adaptionValueList ?adaptionValues;\n                  cx-health:indicatorVersion ?indicatorVersion;\n                  cx-health:responseComponentId ?indicatorComponentId;\n                  cx-health:healthIndicatorValues ?health.    \n        }\n    }\n    \n}\n\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{tieraAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:supplier:Health",
													"host": [
														"{{tieraAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:supplier:Health"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Create Behaviour Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX schema: <http://schema.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-sh: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX cx-core: <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-reliability: <https://w3id.org/catenax/ontology/reliability#> \nPREFIX cx-schema: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\n\n################################################################\n# Sample for a Provider-Deployed Goal-Oriented SparQL Skill which\n#  - Depending on the targetted result\n#  - Finds the right supplier prognosis asset and its preconditions\n#  - jumps into the OEM-owned reliability asset to obtain the required data\n#  - feeds the gathered data back into the respective supplier connector/agent \n#    to perform a behavioural prognosis\n# Author: cgjung\n# (c) 2023-2024 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?van ?supplier ?vehicle ?assembly ?operatingTime ?mileage ?prognosis WHERE {\n\n  VALUES (?van ?aggregate ?result_type) { \n      (\"@van\"^^xsd:string \"Differential Gear\"^^xsd:string <@resultType>) \n  }\n\n  ################################################################\n  # Determine the prognosis asset\n  ################################################################\n  ?output sh:path ?result_type.\n  ?output cx-sh:outputOf ?functionShape. \n\n  ?assetFunction cx-sh:shapeObject ?functionShape.\n  ?functionConnector cx-common:offers ?assetFunction.\n\n  ?functionShape cx-sh:extensionOf* ?parentFunctionShape.\n  ?functionShape sh:targetClass ?function.\n  ?parentFunctionShape sh:property ?functionProperty.\n  ?functionProperty cx-sh:hasAsArgument ?argument.\n  ?functionProperty sh:in ?parameters.\n  ?parameters rdf:rest*/rdf:first ?ls_type.\n\n  ################################################################\n  # Determine the data asset providing necessary telematics data for the prognosis\n  ################################################################\n  ?assetData cx-sh:shapeObject ?nodeShape.\n  ?dataConnector cx-common:offers ?assetData.\n\n  ?nodeShape sh:property ?propertyShape.\n  ?propertyShape sh:path ?argument. \n  ?propertyShape sh:in ?parameters_target.\n  ?parameters_target rdf:rest*/rdf:first ?ls_type.\n\n  ################################################################\n  # Jump into the data providing connector & asset\n  ################################################################\n  SERVICE ?dataConnector { \n    GRAPH ?assetData { \n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n         ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n         ?teleAnalysis rdf:type cx-reliability:Analysis;\n             cx-reliability:analysedObject ?assembly;\n             cx-reliability:operatingHoursOfVehicle ?operatingTime;\n             cx-reliability:mileageOfVehicle ?mileage;\n             cx-core:startDateTime ?recordDate;\n             cx-reliability:result [\n                 cx-core:id ?ls_type;\n                 cx-core:name ?ls_name;\n                 cx-reliability:countingValue ?ls_value;\n                 cx-reliability:countingUnit ?ls_unit;\n                 cx-reliability:countingMethod ?ls_method;\n                 cx-reliability:channels ?ls_channels;\n                 cx-reliability:classes ?ls_classes;\n                 cx-reliability:values ?ls_values\n             ].\n     }\n  }\n\n  ################################################################\n  # Jump into the prognosis providing connector & asset\n  ################################################################\n  SERVICE ?functionConnector {\n    GRAPH ?assetFunction { \n      SELECT ?prognosis WHERE {\n        ?invocation a ?function;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              ?result_type ?prognosis.\n      }\n    }\n  } # SUPPLIER#CATALOG\n\n} # SELECT"
												},
												"url": {
													"raw": "{{oemAgentPlane}}/api/agent/skill?asset=cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis&distributionMode=PROVIDER&allowServicesPattern=edcs%3F%3A%2F%2F.*&isFederated=true",
													"host": [
														"{{oemAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis"
														},
														{
															"key": "distributionMode",
															"value": "PROVIDER"
														},
														{
															"key": "contract",
															"value": "Contract%3Foem%3DSkill",
															"disabled": true
														},
														{
															"key": "allowServicesPattern",
															"value": "edcs%3F%3A%2F%2F.*"
														},
														{
															"key": "denyServicesPattern",
															"value": "https%3F%3A%2F%2F.*",
															"disabled": true
														},
														{
															"key": "assetName",
															"value": "Behaviour%20Skill",
															"disabled": true
														},
														{
															"key": "assetDescription",
															"value": "Oer",
															"disabled": true
														},
														{
															"key": "ontology",
															"value": "%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fcore%3E%2C%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fbehaviour%3E",
															"disabled": true
														},
														{
															"key": "isFederated",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Debug State and Transfer",
									"item": [
										{
											"name": "Check Control Probe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check was successful\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
															"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
															"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
															"    pm.response.json().componentResults.map( function(component) {",
															"        pm.expect(component).to.have.property(\"isHealthy\",true);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{oemEdcControl}}/api/check/:stage",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"api",
														"check",
														":stage"
													],
													"variable": [
														{
															"key": "stage",
															"value": "startup",
															"description": "You may choose startup, readiness or liveness"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Data Probe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check was successful\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
															"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
															"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
															"    pm.response.json().componentResults.map( function(component) {",
															"        pm.expect(component).to.have.property(\"isHealthy\",true);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{oemAgentPlane}}/api/check/:stage",
													"host": [
														"{{oemAgentPlane}}"
													],
													"path": [
														"api",
														"check",
														":stage"
													],
													"variable": [
														{
															"key": "stage",
															"value": "startup",
															"description": "You may choose startup, readiness or liveness"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Deletion was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,404]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v2/contractdefinitions/:id",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "Contract%3Foem%3DGraph"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Delete Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Deletion was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,404]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcProviderControl}}/management/v3/assets/:id",
													"host": [
														"{{oemEdcProviderControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Delete Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Deletion was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,404]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/v2/policydefinitions/:id",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "Policy%3Foem%3DGraph"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "List Assets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gt(0);",
															"    pm.response.json().map(function(asset) {",
															"        pm.expect(asset).to.have.property(\"properties\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
															"        contenttypes.map(function(contenttype) {",
															"            var contenttypespec=contenttype.split(\";\");",
															"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcProviderControl}}/management/v3/assets/request",
													"host": [
														"{{oemEdcProviderControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the assets."
											},
											"response": []
										},
										{
											"name": "List Policies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gt(0);",
															"    pm.response.json().map(function(policy) {",
															"        pm.expect(policy).to.have.property(\"uid\");",
															"        pm.expect(policy).to.have.property(\"permissions\");",
															"        pm.expect(policy.permissions).to.have.length.gte(0);",
															"        policy.permissions.map(function(permission) {",
															"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
															"            pm.expect(permission).to.have.property(\"target\");",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{oemEdcProviderControl}}/management/v2/policydefinitions/request",
													"host": [
														"{{oemEdcProviderControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the policies."
											},
											"response": []
										},
										{
											"name": "List Contract Definitions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gt(0);",
															"    pm.response.json().map(function(policy) {",
															"        pm.expect(policy).to.have.property(\"uid\");",
															"        pm.expect(policy).to.have.property(\"permissions\");",
															"        pm.expect(policy.permissions).to.have.length.gte(0);",
															"        policy.permissions.map(function(permission) {",
															"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
															"            pm.expect(permission).to.have.property(\"target\");",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{oemEdcProviderControl}}/management/v2/contractdefinitions/request",
													"host": [
														"{{oemEdcProviderControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the policies."
											},
											"response": []
										},
										{
											"name": "List Contract Agreements",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gt(0);",
															"    pm.response.json().map(function(policy) {",
															"        pm.expect(policy).to.have.property(\"uid\");",
															"        pm.expect(policy).to.have.property(\"permissions\");",
															"        pm.expect(policy.permissions).to.have.length.gte(0);",
															"        policy.permissions.map(function(permission) {",
															"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
															"            pm.expect(permission).to.have.property(\"target\");",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/contractagreements/request",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractagreements",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the policies."
											},
											"response": []
										},
										{
											"name": "List Contract Negotiations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gt(0);",
															"    pm.response.json().map(function(policy) {",
															"        pm.expect(policy).to.have.property(\"uid\");",
															"        pm.expect(policy).to.have.property(\"permissions\");",
															"        pm.expect(policy.permissions).to.have.length.gte(0);",
															"        policy.permissions.map(function(permission) {",
															"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
															"            pm.expect(permission).to.have.property(\"target\");",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/contractnegotiations/request",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractnegotiations",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the policies."
											},
											"response": []
										},
										{
											"name": "Delete Contract Negotiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/contractnegotiations/:id/:type",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"contractnegotiations",
														":id",
														":type"
													],
													"variable": [
														{
															"key": "id",
															"value": "69091dba-f7cd-4a84-92bd-68967d8f4042"
														},
														{
															"key": "type",
															"value": "cancel"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Show (Own) Catalogue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Catalogue listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.property(\"id\");",
															"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
															"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
															"    pm.response.json().contractOffers.map(function(contractOffer) {",
															"        pm.expect(contractOffer).to.have.property(\"id\");",
															"        pm.expect(contractOffer).to.have.property(\"policy\");",
															"        pm.expect(contractOffer).to.have.property(\"asset\");",
															"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"counterPartyAddress\": \"{{oemEdcIds}}/api/v1/dsp\",\n    \"counterPartyId\": \"{{oemBPNL}}\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]         \n    }\n}\n"
												},
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/catalog/request",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"catalog",
														"request"
													]
												},
												"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
											},
											"response": []
										},
										{
											"name": "Show (Remote) Catalogue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Catalogue listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.property(\"id\");",
															"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
															"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
															"    pm.response.json().contractOffers.map(function(contractOffer) {",
															"        pm.expect(contractOffer).to.have.property(\"id\");",
															"        pm.expect(contractOffer).to.have.property(\"policy\");",
															"        pm.expect(contractOffer).to.have.property(\"asset\");",
															"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"counterPartyAddress\": \"{{tieraEdcIds}}/api/v1/dsp\",\n    \"counterPartyId\": \"{{supplierBPNL}}\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]         \n    }\n}\n"
												},
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/catalog/request",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"catalog",
														"request"
													]
												},
												"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
											},
											"response": []
										},
										{
											"name": "Initiate Self Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Body matches string\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"NEGOTIATION_ID\", jsonData.id);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@type\": \"NegotiationInitiateRequestDto\",\n    \"connectorAddress\": \"http://oem-control-plane:8282/api/v1/dsp\",\n    \"protocol\": \"dataspace-protocol-http\",\n    \"connectorId\": \"BPNL00000003COJN\",\n    \"providerId\": \"BPNL00000003COJN\",\n    \"offer\": {\n        \"offerId\": \"Contract?oem=GraphContract:GraphAsset?oem=Conforming:23398a16-1657-49cf-9885-266104a2fbe8\",\n        \"assetId\": \"GraphAsset?oem=Conforming\",\n        \"policy\": {\n            \"@type\": \"odrl:Set\",\n            \"odrl:permission\": {\n                \"odrl:target\": \"GraphAsset?oem=Conforming\",\n                \"odrl:action\": {\n                    \"odrl:type\": \"USE\"\n                },\n                \"odrl:constraint\": {\n                    \"odrl:or\": [\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003CPIY\"\n                        },\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003CQI9\"\n                        },\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003COJN\"\n                        }\n                    ]\n                }\n            },\n            \"odrl:prohibition\": [],\n            \"odrl:obligation\": [],\n            \"odrl:target\": \"GraphAsset?oem=Conforming\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/contractnegotiations",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractnegotiations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiate EDR",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Body matches string\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"NEGOTIATION_ID\", jsonData.id);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@type\": \"NegotiationInitiateRequestDto\",\n    \"connectorAddress\": \"http://oem-control-plane:8282/api/v1/dsp\",\n    \"protocol\": \"dataspace-protocol-http\",\n    \"connectorId\": \"BPNL00000003COJN\",\n    \"providerId\": \"BPNL00000003COJN\",\n    \"offer\": {\n        \"offerId\": \"Contract?oem=GraphContract:GraphAsset?oem=Conforming:23398a16-1657-49cf-9885-266104a2fbe8\",\n        \"assetId\": \"GraphAsset?oem=Conforming\",\n        \"policy\": {\n            \"@type\": \"odrl:Set\",\n            \"odrl:permission\": {\n                \"odrl:target\": \"GraphAsset?oem=Conforming\",\n                \"odrl:action\": {\n                    \"odrl:type\": \"USE\"\n                },\n                \"odrl:constraint\": {\n                    \"odrl:or\": [\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003CPIY\"\n                        },\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003CQI9\"\n                        },\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003COJN\"\n                        }\n                    ]\n                }\n            },\n            \"odrl:prohibition\": [],\n            \"odrl:obligation\": [],\n            \"odrl:target\": \"GraphAsset?oem=Conforming\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/edrs",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Cancel Negotation by ID Copy 2",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/contractnegotiations/:id/cancel",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractnegotiations",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id",
															"value": "43a0faf0-f879-4359-bf7c-d7d42f56b365"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Negotiation State",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/contractnegotiations/d86896a1-d33f-4e6d-8580-c7f798415eb8",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractnegotiations",
														"d86896a1-d33f-4e6d-8580-c7f798415eb8"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Agreement",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/contractagreements/:id",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractagreements",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "Contract%3Foem%3DGraphContract%3AGraphAsset%3Foem%3DDiagnosis2022%3Afd285d42-cabc-4e25-ab13-4dc523080368"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiate Transfer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"TRANSFER_ID\", Math.random());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Body matches string\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"TRANSFER_PROCESS_ID\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"assetId\": \"GraphAsset?oem=Conforming\",\n    \"connectorAddress\": \"http://oem-control-plane:8282/api/v1/dsp\",\n    \"connectorId\":\"http://oem-control-plane2:8282/api/v1/dsp\",\n    \"contractId\": \"Contract?oem=GraphContract:GraphAsset?oem=Conforming:a6c07762-883b-45a7-9b77-f3323ab0bb01\",\n    \"dataDestination\": {\n        \"type\": \"HttpProxy\"\n    },\n    \"managedResources\": false,\n    \"privateProperties\": {\n        \"receiverHttpEndpoint\": \"http://oem-data-plane:8187/callback/endpoint-data-reference\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"transferType\": {\n        \"contentType\": \"application/octet-stream\",\n        \"isFinite\": true\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/transferprocesses",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"transferprocesses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Transfer",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/transferprocesses/:id",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"transferprocesses",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "036cb706-6499-46c4-a135-e14f5f46bd86"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "List Transfer Processes",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"offset\": 0,\n    \"limit\": 100,\n    \"filterExpression\": [\n        {\n            \"operandLeft\": \"state\",\n            \"operator\": \"=\",\n            \"operandRight\": \"COMPLETED\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcConsumerControl}}/management/v2/transferprocesses/request",
													"host": [
														"{{oemEdcConsumerControl}}"
													],
													"path": [
														"management",
														"v2",
														"transferprocesses",
														"request"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Dataplanes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n  },\n  \"@id\": \"Policy?oem=Graph\",\n  \"policy\": {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"@type\": \"Set\",\n    \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Graph\",\n    \"permission\": [\n      {\n        \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n        \"action\": \"USE\",\n        \"constraint\": {\n\t\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\t\"or\" : [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{oemBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{consumerBPNL}}\"\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"BPNL00000002HCQ9\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t}\n      }\n    ]\n  }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemProviderEdcInternal}}/control/v1/dataplanes",
													"host": [
														"{{oemProviderEdcInternal}}"
													],
													"path": [
														"control",
														"v1",
														"dataplanes"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										}
									]
								},
								{
									"name": "Execute Dataspace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/sparql-results+xml"
											}
										],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset=SkillAsset%3Foem%3DDataspace&()=",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Foem%3DDataspace"
												},
												{
													"key": "()",
													"value": ""
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Perform an OEM-Local SparQL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Self-SparQL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} ",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23cx-common:GraphAsset%3Foem%3ADiagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{tieraEdcIds}}%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23GraphAsset%3Foem%3DDiagnosis2022",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} "
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Execute Skill",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#\nPREFIX rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#\nPREFIX rdfs: http://www.w3.org/2000/01/rdf-schema#\n\nSELECT ?catenaXId ?site ?function ?roleValidFrom ?roleValidTo WHERE {\n\n  BIND(\"production\" AS ?function)\n\n  SERVICE http://oem-provider-agent:8082/sparql {\n    ?catenaXId cx:isProducedBy ?site.\n    ?site cx:isMemberOf ?legal;\n        cx:roleValidFrom ?roleValidFrom;\n        cx:roleValidTo ?roleValidTo .\n  }\n\n\n}\n"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset=http%3A%2F%2Foem-control-plane%3A8282%23SkillAsset%3Foem%3DConforming",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282#SkillAsset%3Foem%3DConforming"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Perform a Self-SparQL Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset=http%3A%2F%2Foem-control-plane%3A8282%23GraphAsset%3Foem%3DDiagnosis2022",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23cx-common:GraphAsset%3Foem%3ADiagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23GraphAsset%3Foem%3DDiagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Self-SparQL",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"WBAAL31029PZ00001\"^^xsd:string \"Getriebe\"^^xsd:string \"0\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    #?oemConnector cx:offersAsset ?diagnoseAsset.\n    #?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n    #               rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    SERVICE ?oemConnector {\n        GRAPH ?diagnoseAsset {\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Execute Health Indicator Skill Post Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"van\",\n            \"aggregate\",\n            \"healthType\",\n            \"adaptionValues\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FNLQNRVCOFLHAQ\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FGPTXINYZAVJYK\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"DVAJDTLJMKKZGY\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FKUBNDMDXQNFHI\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n           {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"HHXDGSMSUTWFUO\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FVARQFZDICATNV\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"VKKTXVZTRKRNSB\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"HGWQDJCIGBSKXH\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            }   \n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset=urn:cx:Skill:oem:Health",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "urn:cx:Skill:oem:Health"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Check GraphDB/FedX requirements",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:7200/repositories/INTERN/rest/monitor/query",
											"host": [
												"localhost"
											],
											"port": "7200",
											"path": [
												"repositories",
												"INTERN",
												"rest",
												"monitor",
												"query"
											]
										}
									},
									"response": []
								},
								{
									"name": "Perform RUL Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\n################################################################\n# Sample for a Catena-X SPARQL Skill which\n#. - For a given VIN, vehicle component and a set of measurement types (load spectra)\n#. - jumps to the telematics asset of the OEM of the car\n#. - exchanges the VIN against an anonymous VAN \n#. - obtains latest measurements\n#  - finds the supplier of the respective vehicle component \n#  - jumps to the prognosis asset of the respective component supplier\n#  - performs a prognosis for the remaining usefule lifetime and mileage of the component given the telematics measurements\n# Author: cgjung\n# (c) 2023-2024 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vin ?van ?operatingTime ?mileage ?distanceKm ?timeHours WHERE {\n\n  VALUES (?vin) { \n      (\"HHXDGSMSUTWFUO\"^^xsd:string) \n#      (\"FNLQNRVCOFLHAQ\"^^xsd:string) \n  }\n\n  VALUES (?aggregate) { \n      (\"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (<https://w3id.org/catenax/taxonomy#GearOil>)\n      (<https://w3id.org/catenax/taxonomy#GearSet>) \n  }\n\n  SERVICE <{{oemProviderAgent5}}/sparql> {  \n        ?van rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?vin.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?van;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n  }\n\n  SERVICE <{{tierARemotingAgent}}/repositories/rul> {\n      SELECT ?timeHours ?distanceKm WHERE {\n        ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm.\n      }\n  } # SUPPLIER#CATALOG\n\n} \n"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Perform a Local Goal-Oriented Inference",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX schema: <http://schema.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx-sh: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX cx-reliability: <https://w3id.org/catenax/ontology/reliability#> \nPREFIX cx-schema: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/ontology/taxonomy#>\n\n#This query returns the required assets and arguments for the selected function result and the observed part types.\n\nselect ?functionConnector ?assetFunction ?function ?dataConnector ?assetData ?value where {  \n    \n    #VALUES ?result {cx-behaviour:RemainingUsefulLifeResult}\n    VALUES ?result {cx-behaviour:HealthIndicationResult}\n    \n\t#prognosis\n    ?output sh:path ?result.\n    ?output cx-sh:outputOf ?functionShape. \n  \t?assetFunction cx-sh:shapeObject ?functionShape.\n    ?functionConnector cx-common:offers ?assetFunction.\n    ?functionShape cx-sh:extensionOf* ?parentFunctionShape.\n    ?functionShape sh:targetClass ?function.\n    ?parentFunctionShape sh:property ?functionProperty.\n    ?functionProperty cx-sh:hasAsArgument ?argument.\n    \n    #data\n    ?assetData cx-sh:shapeObject ?nodeShape.\n    ?dataConnector cx-common:offers ?assetData.\n    ?nodeShape sh:property ?propertyShape.\n    ?propertyShape sh:path ?argument. \n\n    #matching\n    ?functionProperty sh:in ?parameters.\n    ?parameters rdf:rest*/rdf:first ?value.\n    ?propertyShape sh:in ?parameters_target.\n    ?parameters_target rdf:rest*/rdf:first ?value.\n}\n"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23cx-common:GraphAsset%3Foem%3ADiagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23GraphAsset%3Foem%3DDiagnosis2022",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Local Version Inference",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX schema: <http://schema.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\nPREFIX dct: <https://purl.org/dc/terms/>\n\n# This query filters the federated data catalogue for 'production' behavioural graphs \n# in versions between 1.11 (inclusive) and 2 (exclusive)\n\nselect ?connector ?asset ?version where {      \n    ?connector cx-common:offers ?asset.\n    ?asset dct:type cx-taxo:GraphAsset;\n           rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>;\n\t\t       cx-common:version ?version.\n\n\t\tFILTER (!strends(?version, 'SNAPSHOT')).\n\t\tFILTER (?version >= '1.11').\n\t\tFILTER (?version < '2.').\n} ORDER BY DESC(?version)"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23cx-common:GraphAsset%3Foem%3ADiagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23GraphAsset%3Foem%3DDiagnosis2022",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Goal-Oriented RUL Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX schema: <http://schema.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-sh: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX cx-core: <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-reliability: <https://w3id.org/catenax/ontology/reliability#> \nPREFIX cx-schema: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\n\n################################################################\n# Sample for a Provider-Deployed Goal-Oriented SparQL Skill which\n#  - Depending on the targetted result\n#  - Finds the right supplier prognosis asset and its preconditions\n#  - jumps into the OEM-owned reliability asset to obtain the required data\n#  - feeds the gathered data back into the respective supplier connector/agent \n#    to perform a health indication \n# Author: cgjung\n# (c) 2023-2024 Catena-X assocation\n################################################################\n\nSELECT ?van ?supplier ?vehicle ?assembly ?ls_type ?operatingTime ?dataConnector ?assetData ?functionConnector ?functionAsset ?function ?mileage ?prognosis WHERE {\n\n  VALUES (?van ?aggregate ?result_type) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string cx-behaviour:RemainingUsefulLifeResult) \n#      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string cx-behaviour:HealthIndicationResult) \n  }\n\n  # Determine the prognosis assets\n  ?output sh:path ?result_type.\n  ?output cx-sh:outputOf ?functionShape. \n  ?assetFunction cx-sh:shapeObject ?functionShape.\n  ?functionConnector cx-common:offers ?assetFunction.\n  ?functionShape cx-sh:extensionOf* ?parentFunctionShape.\n  ?functionShape sh:targetClass ?function.\n  ?parentFunctionShape sh:property ?functionProperty.\n  ?functionProperty cx-sh:hasAsArgument ?argument.\n  ?functionProperty sh:in ?parameters.\n  ?parameters rdf:rest*/rdf:first ?ls_type.\n\n  # Determine the target\n  ?assetData cx-sh:shapeObject ?nodeShape.\n  ?dataConnector cx-common:offers ?assetData.\n  ?nodeShape sh:property ?propertyShape.\n  ?propertyShape sh:path ?argument. \n  ?propertyShape sh:in ?parameters_target.\n  ?parameters_target rdf:rest*/rdf:first ?ls_type.\n\n  SERVICE ?dataConnector { \n    GRAPH ?assetData { \n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n         ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n         ?teleAnalysis rdf:type cx-reliability:Analysis;\n             cx-reliability:analysedObject ?assembly;\n             cx-reliability:operatingHoursOfVehicle ?operatingTime;\n             cx-reliability:mileageOfVehicle ?mileage;\n             cx-core:startDateTime ?recordDate;\n             cx-reliability:result [\n                 cx-core:id ?ls_type;\n                 cx-core:name ?ls_name;\n                 cx-reliability:countingValue ?ls_value;\n                 cx-reliability:countingUnit ?ls_unit;\n                 cx-reliability:countingMethod ?ls_method;\n                 cx-reliability:channels ?ls_channels;\n                 cx-reliability:classes ?ls_classes;\n                 cx-reliability:values ?ls_values\n             ].\n     }\n  }\n\n  SERVICE ?functionConnector {\n    GRAPH ?assetFunction { \n      SELECT ?prognosis WHERE {\n        ?invocation a ?function;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              ?result_type ?prognosis.\n      }\n    }\n  } # SUPPLIER#CATALOG\n\n} # SELECT\n"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23cx-common:GraphAsset%3Foem%3ADiagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23GraphAsset%3Foem%3DDiagnosis2022",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_06_BT_SKILL_RUL Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"van\",\n            \"resultType\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FNLQNRVCOFLHAQ\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#RemainingUsefulLifeResult\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FGPTXINYZAVJYK\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#RemainingUsefulLifeResult\"\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset=cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								}
							],
							"description": "A Collection of Calls against the EDC control and data planes sitting on top of a data provisioner.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "A Collection of API Calls Against the Data Provisioning Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TierA (Function Remoting Agent)",
					"item": [
						{
							"name": "Remoting Agent (Intern)",
							"item": [
								{
									"name": "Test the Public Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.agify.io?name=Christoph",
											"protocol": "https",
											"host": [
												"api",
												"agify",
												"io"
											],
											"query": [
												{
													"key": "name",
													"value": "Schorsch",
													"description": "Prognosis Input, here a primitve string",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Christoph"
												}
											]
										},
										"description": "An example of a public prognosis service."
									},
									"response": []
								},
								{
									"name": "Check the Backend Services",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{tierABackend}}/docs",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"docs"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Test the RUL Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "load_collective_file",
													"type": "file",
													"src": "/Users/A29078924/Meine Ablage/Projekte/catenax/ka/product-knowledge/dataspace/mock/prognosis/tests/data/Fzg1_LCollective.json"
												}
											]
										},
										"url": {
											"raw": "{{tierABackend}}/api/rul",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"rul"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Test the HI Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Provisioning Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"requestRefId\");",
													"    pm.expect(pm.response.json()).to.have.property(\"healthIndicatorOutputs\");",
													"    pm.expect(pm.response.json().healthIndicatorOutputs).to.have.length(2);",
													"    pm.response.json().healthIndicatorOutputs.map(function(output) {",
													"        pm.expect(output).to.have.property(\"version\");",
													"        pm.expect(output).to.have.property(\"componentId\");",
													"        pm.expect(output).to.have.property(\"healthIndicatorValues\");",
													"        pm.expect(output.healthIndicatorValues).to.have.length.gte(1);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "hi_input",
													"type": "file",
													"src": "/Users/A29078924/Meine Ablage/Projekte/catenax/ka/product-knowledge/dataspace/mock/prognosis/tests/data/sample-hi-input.json"
												}
											]
										},
										"url": {
											"raw": "{{tierABackend}}/api/hi",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"hi"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Test the New RUL Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "{{oemBackendAuthKey}}",
												"value": "{{oemBackendAuthCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"header\": {\n    \"notificationID\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"senderBPN\": \"BPN0000SUPPLIER\",\n    \"senderAddress\": \"edcs://supplier.com/edc\",\n    \"recipientAddress\": \"https://supplier.com/edc\",\n    \"recipientBPN\": \"BPN0000SUPPLIER\",\n    \"severity\": \"MINOR\",\n    \"status\": \"SENT\",\n    \"targetDate\": \"2022-11-24T22:07:02.611048800Z\",\n    \"timeStamp\": \"2022-11-24T11:24:36.744320Z\",\n    \"classification\": \"RemainingUsefulLifePredictor\",\n    \"respondAssetId\": \"https://webhook.site/3332d1f8-3fec-4223-8add-004583ba72d3\"\n  },\n  \"content\": {\n    \"requestRefId\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"endurancePredictorInputs\": [\n      {\n        \"componentId\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n        \"classifiedLoadSpectrumGearOil\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"GearOil\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        },\n        \"classifiedLoadSpectrumGearSet\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"GearSet\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        }\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tierABackend}}/api/rul2",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"rul2"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Test the New HI Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "{{oemBackendAuthKey}}",
												"value": "{{oemBackendAuthCode}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"notificationID\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n        \"senderBPN\": \"BPN0000SUPPLIER\",\n        \"senderAddress\": \"edcs://supplier.com/edc\",\n        \"recipientAddress\": \"https://supplier.com/edc\",\n        \"recipientBPN\": \"BPN0000SUPPLIER\",\n        \"severity\": \"MINOR\",\n        \"status\": \"SENT\",\n        \"targetDate\": \"2022-11-24T22:07:02.611048800Z\",\n        \"timeStamp\": \"2022-11-24T11:24:36.744320Z\",\n        \"classification\": \"HealthIndicatorPredictor\",\n        \"respondAssetId\": \"https://webhook.site/3332d1f8-3fec-4223-8add-004583ba72d3\"\n    },\n    \"content\": {\n        \"requestRefId\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n        \"endurancePredictorInputs\": [\n            {\n                \"componentId\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n                \"classifiedLoadSpectrumClutch\": {\n                    \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n                    \"metadata\": {\n                        \"projectDescription\": \"pnr_76543\",\n                        \"componentDescription\": \"GearOil\",\n                        \"routeDescription\": \"logged\",\n                        \"status\": {\n                            \"date\": \"2023-02-19T10:42:14.213+01:00\",\n                            \"operatingHours\": 32137.9,\n                            \"mileage\": 865432\n                        }\n                    },\n                    \"header\": {\n                        \"countingValue\": \"Time\",\n                        \"countingUnit\": \"unit:secondUnitOfTime\",\n                        \"countingMethod\": \"TimeAtLevel\",\n                        \"channels\": [\n                            {\n                                \"channelName\": \"TC_SU\",\n                                \"unit\": \"unit:degreeCelsius\",\n                                \"lowerLimit\": 0,\n                                \"upperLimit\": 640,\n                                \"numberOfBins\": 128\n                            }\n                        ]\n                    },\n                    \"body\": {\n                        \"classes\": [\n                            {\n                                \"className\": \"TC_SU-class\",\n                                \"classList\": [\n                                    14,\n                                    15,\n                                    16,\n                                    17,\n                                    18,\n                                    19,\n                                    20,\n                                    21,\n                                    22\n                                ]\n                            }\n                        ],\n                        \"counts\": {\n                            \"countsName\": \"Time\",\n                            \"countsList\": [\n                                34968.93,\n                                739782.51,\n                                4013185.15,\n                                46755055.56,\n                                25268958.35,\n                                8649735.95,\n                                9383635.35,\n                                19189260.77,\n                                1353867.54\n                            ]\n                        }\n                    },\n                    \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tierABackend}}/api/hi2",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"hi2"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Check the Remoting Agent",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{remotingAgent}}/protocol",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"protocol"
											]
										},
										"description": "This endpoint should return the number of supported protocols and can be used as a healthcheck."
									},
									"response": []
								},
								{
									"name": "Query Public/Simple Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://w3id.org/catenax/ontology/prognosis#>\n\nSELECT ?invocation ?prediction ?support\nWHERE { \n  ?invocation a prognosis:Prognosis;         \n              prognosis:name \"Schorsch\"^^xsd:string; \n              prognosis:prediction ?prediction; \n              prognosis:support ?support.\n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query against a simple invocation with only primitive inputs and outputs."
									},
									"response": []
								},
								{
									"name": "Query Public/Simple Binding Response",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://w3id.org/catenax/ontology/prognosis#>\n\nSELECT ?invocation ?result\nWHERE { \n  ?invocation a prognosis:Prognosis;         \n              prognosis:name \"Schorsch\"^^xsd:string; \n              prognosis:hasResult ?result.\n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query against a simple invocation with only primitive inputs and outputs."
									},
									"response": []
								},
								{
									"name": "Query Backend/Complex Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-lifetime: <https://w3id.org/catenax/ontology/lifetime#>\n\nSELECT ?invocation ?distance ?time\nWHERE { \n  ?invocation a cx-lifetime:LifetimePrognosis;\n              cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^json:Object; \n              cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^json:Object; \n              cx-lifetime:loadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^json:Object; \n              cx-lifetime:loadCollectiveComponent \"GearOil\"^^xsd:string; \n              cx-lifetime:loadCollectiveMileage \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^json:Object; \n              cx-lifetime:loadCollectiveRegistrationDate \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"%Y%M%d\\\" }\"^^json:Object; \n              cx-lifetime:remainingDistance ?distance; \n              cx-lifetime:remainingTime ?time.\n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Query Asynchronous RUL Backend",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-life: <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX uuid: <urn:uuid:>\n\nSELECT ?invocation ?component ?timeHours ?distanceKm\nWHERE { \n      VALUES (?component ?ls_type) { ( uuid:1 \"GearOil\"^^xsd:string) ( uuid:1 \"GearSet\"^^xsd:string) ( uuid:2 \"GearSet\"^^xsd:string)( uuid:2 \"GearOil\"^^xsd:string) }\n\n  ?invocation a cx-life:RemainingUsefulLife;\n              cx-life:sender <bpn:legal:BPNLOEM>;\n              cx-life:senderConnector <edc://sender>;\n              cx-life:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-life:recipientConnector <edc://recipient>;\n              cx-life:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-life:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-life:component ?component;\n              cx-life:observationType ?ls_type;\n              cx-life:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-life:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-life:statusMileage \"865432\"^^xsd:int;\n              cx-life:countingValue \"Time\"^^xsd:string;\n              cx-life:countingUnit <unit:secondUnitOfTime>;\n              cx-life:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-life:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-life:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-life:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-life:remainingOperatingHours ?timeHours;\n              cx-life:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Query Asynchronous HI Backend",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-life: <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX uuid: <urn:uuid:>\n\nSELECT ?invocation ?component ?result\nWHERE { \n      VALUES (?component ?ls_type) { ( uuid:1 \"Clutch\"^^xsd:string) ( uuid:2 \"Clutch\"^^xsd:string) }\n\n  ?invocation a cx-life:HealthIndication;\n              cx-life:sender <bpn:legal:BPNLOEM>;\n              cx-life:senderConnector <edc://sender>;\n              cx-life:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-life:recipientConnector <edc://recipient>;\n              cx-life:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-life:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-life:component ?component;\n              cx-life:observationType ?ls_type;\n              cx-life:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-life:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-life:statusMileage \"865432\"^^xsd:int;\n              cx-life:countingValue \"Time\"^^xsd:string;\n              cx-life:countingUnit <unit:secondUnitOfTime>;\n              cx-life:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-life:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-life:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-life:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-life:healthIndicatorValues ?result. \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/health",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"health"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Query FMEA Data",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX fx: <http://sparql.xyz/facade-x/ns/>\nPREFIX zag: <http://sparql.xyz/facade-x/data/>\n\nSELECT ?companyLabel ?companyName ?companyRole ?memberId ?memberSurname ?memberName ?memberCategory WHERE {\n  SERVICE <x-sparql-anything:fme.xml> {\n    fx:properties fx:use-rdfs-member \"true\"^^xsd:boolean.\n    ?companyNode rdf:type zag:COMPANY;\n             zag:ROLE ?companyRole;\n             rdfs:member [ rdf:type zag:LONG-NAME; rdfs:member [ rdf:type zag:L-4; rdfs:member ?companyName]];\n             rdfs:member [ rdf:type zag:SHORT-NAME; rdfs:member ?companyLabel].\n    ?companyNode rdfs:member [ \n       rdf:type zag:TEAM-MEMBERS;\n       rdfs:member [  \n          rdf:type zag:TEAM-MEMBER;\n          zag:ID ?memberId;\n          rdfs:member [ rdf:type zag:LONG-NAME; rdfs:member [ rdf:type zag:L-4; rdfs:member ?memberName]];\n          rdfs:member [ rdf:type zag:SHORT-NAME; rdfs:member ?memberSurname];\n          rdfs:member [ rdf:type zag:CATEGORY; rdfs:member ?memberCategory]\n        ]  \n    ].\n  }\n} "
										},
										"url": {
											"raw": "http://localhost:3000/sparql.anything",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"sparql.anything"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Callback Endpoint",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "SHITSHIT"
										},
										"url": {
											"raw": "{{remotingAgent}}/callback",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"callback"
											]
										}
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Function Remoting Agents Directly Which Sits upon some REST Service.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "EDC (Intern)",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n  },\n  \"@id\": \"Policy?supplier=Graph\",\n  \"policy\": {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"@type\": \"Set\",\n    \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?supplier=Graph\",\n    \"permission\": [\n      {\n        \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n        \"action\": \"USE\",\n        \"constraint\": {\n\t\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\t\"or\" : [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{oemBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{consumerBPNL}}\"\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"BPNL00000003AYRE\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t}\n      }\n    ]\n  }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/policydefinitions",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Create Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?supplier=Graph\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?supplier=Graph\",\n    \"contractPolicyId\": \"Policy?supplier=Graph\",\n    \"assetsSelector\" : [\n       {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?supplier=Graph\"\n       }\n    ]\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/contractdefinitions",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Create CONF Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n    \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n    \"sh\": \"http://www.w3.org/ns/shacl#\"\n  },\n  \"@id\": \"GraphAsset?supplier=Conforming\", \n  \"properties\": {\n        \"name\": \"Conforming Asset.\",\n        \"description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n        \"version\": \"1.9.3-SNAPSHOT\",\n        \"contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n        \"rdf:type\": \"cx-common:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix : <GraphAsset?supplier=Conforming#> .\\n\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n  },\n  \"privateProperties\": {\n        \"cx-common:isActive\": \"true^^xsd:boolean\"\n  },\n  \"dataAddress\": {\n        \"id\": \"GraphAsset?supplier=Conforming\", \n        \"baseUrl\": \"http://conforming-agent:8080/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\"\n  }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v3/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Function Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n\t\t\"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\t\t\"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n\t\t\"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n\t\t\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n\t\t\"sh\": \"http://www.w3.org/ns/shacl#\",\n\t\t\"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n\t\t\"dc\": \"https://purl.org/dc/terms/\"\n\t},\n\t\"@id\": \"cx-taxo:GraphAsset?supplier=Prognosis\",\n\t\"properties\": {\n\t\t\"name\": \"Simple Prognosis\",\n\t\t\"description\": \"A sample graph asset/offering referring to a specific prognosis resource.\",\n\t\t\"version\": \"1.9.3-SNAPSHOT\",\n\t\t\"contenttype\": \"application/json, application/xml\",\n\t\t\"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n\t\t\"rdf:type\": \"cx-common:GraphAsset\",\n\t\t\"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/function>,<https://w3id.org/catenax/ontology/prognosis>\",\n\t\t\"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n\t\t\"sh:shapesGraph\": \"@prefix cx-common: <https://w3id.org/catenax/ontology/common#>. \\n@prefix : <GraphAsset?supplier=LifetimeGearbox#> .\\n@prefix cx-prognosis: <https://w3id.org/catenax/ontology/prognosis#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\n:Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-prognosis:Function ;\\n  sh:property [\\n        sh:path cx-prognosis:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003CPIY> ].\",\n\t\t\"cx-common:isFederated\": \"true^^xsd:boolean\"\n\t},\n\t\"dataAddress\": {\n\t\t\"id\": \"cx-taxo:GraphAsset?supplier=BehaviourTwinRUL\",\n\t\t\"@type\": \"DataAddress\",\n\t\t\"baseUrl\": \"{{tierARemotingAgent}}/repositories/prognosis\",\n\t\t\"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n\t\t\"proxyPath\": \"false\",\n\t\t\"proxyMethod\": \"true\",\n\t\t\"proxyQueryParams\": \"true\",\n\t\t\"proxyBody\": \"true\",\n\t\t\"authKey\": \"{{supplierBackendAuthKey}}\",\n\t\t\"authCode\": \"{{supplierBackendAuthCode}}\"\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v3/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create 3rd Graph Asset Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:TraceabilityAsPlanned\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:tierA>\",\n      \"asset:prop:name\": \"Supplier portion of the Traceability As-Planned Testdataset.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Carena-X Testdata for Traceability.\",\n      \"asset:prop:version\": \"CX_Testdata_v1.4.1-AsPlanned\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/part_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:tierA:TraceabilityAsPlanned> .\\n@prefix cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemAssemblyGroup rdf:type sh:NodeShape ;\\n  sh:targetClass cx:AssemblyGroup ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class SupplierParts ;\\n    ] ;\\n\\nSupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:Part ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003B2OM> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": \"true\"\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:TraceabilityAsPlanned\",\n      \"baseUrl\": \"http://oem-provider-agent:8082/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create RUL Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n\t\t\"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n\t\t\"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\t\t\"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n\t\t\"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n\t\t\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n\t\t\"sh\": \"http://www.w3.org/ns/shacl#\",\n\t\t\"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n\t\t\"dc\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"cx-taxo:GraphAsset?supplier=BehaviourTwinRUL\", \n    \"properties\": {\n        \"cx-common:name\": \"Lifetime Prognosis Service for Gearboxes\",\n        \"cx-common:description\": \"A sample graph asset/offering referring to a specific prognosis resource.\",\n        \"cx-common:description@de\": \"Ein Beispielasset für eine Prognosefunktion.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n        \"dc:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/function>,<https://w3id.org/catenax/ontology/behaviour>,<https://w3id.org/catenax/ontology/behaviour>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix schema: <http://schema.org/> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix edc: <https://w3id.org/edc/v0.0.1/ns/> .\\n@prefix cx-common: <https://w3id.org/catenax/ontology/common#> .\\n@prefix cx-core: <https://w3id.org/catenax/ontology/core#> .\\n@prefix cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#> .\\n@prefix cx-reliability: <https://w3id.org/catenax/ontology/reliability#> .\\n@prefix cx-sh: <https://w3id.org/catenax/ontology/schema#> .\\n@prefix cx-taxo: <https://w3id.org/catenax/taxonomy#> .\\n@prefix : <https://w3id.org/catenax/taxonomy#GraphAsset?supplier=BehaviourTwinRUL&shapeObject=> .\\n\\n# Prognosis Function\\n:PrognosisFunctionShape rdf:type sh:NodeShape ;\\n    sh:targetClass cx-behaviour:PrognosisFunction;\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingMethod;\\n        sh:path cx-behaviour:countingMethod;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingValue;\\n        sh:path cx-behaviour:countingValue;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingUnit;\\n        sh:path cx-behaviour:countingUnit;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:channels;\\n        sh:path cx-behaviour:headerChannels;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:classes;\\n        sh:path cx-behaviour:bodyClasses;\\n    ].\\n\\n:RemainingUsefulLifeShape rdf:type sh:NodeShape ;\\n    cx-sh:extensionOf :PrognosisFunctionShape;\\n    sh:targetClass cx-behaviour:RemainingUsefulLife ;\\n      sh:property[\\n        cx-sh:hasAsArgument cx-reliability:observationOf;\\n        sh:path cx-behaviour:observationType;\\n        sh:in ( cx-taxo:GearSet cx-taxo:GearOil );\\n    ];\\n    sh:property :RemainingUsefulLifeResultShape.\\n\\n:RemainingUsefulLifeResult rdf:type sh:PropertyShape;\\n    cx-sh:outputOf :RemainingUsefulLifeShape;\\n    sh:path cx-behaviour:RemainingUsefulLifeResult .\\n\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"dataAddress\": {\n        \"id\": \"cx-taxo:GraphAsset?supplier=BehaviourTwinRUL\", \n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{tierARemotingAgent}}/repositories/rul\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{supplierBackendAuthKey}}\",\n        \"authCode\": \"{{supplierBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"{{tierARemotingAgent}}/repositories/rul\"\n    }\n  }\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v3/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create HI Function Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200, 204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n\t\t\"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n\t\t\"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\t\t\"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n\t\t\"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n\t\t\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n\t\t\"sh\": \"http://www.w3.org/ns/shacl#\",\n\t\t\"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n\t\t\"dc\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"cx-taxo:GraphAsset?supplier=HealthIndicatorGearbox\",\n    \"properties\": {\n        \"cx-common:name\": \"Health Prognosis Service for Gearboxes\",\n        \"cx-common:description\": \"A second sample graph asset/offering referring to a specific prognosis resource.\",\n        \"cx-common:description@de\": \"Ein weiteres Beispielasset für eine Prognosefunktion.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n        \"dc:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/function>,<https://w3id.org/catenax/ontology/behaviour>,<https://w3id.org/catenax/ontology/behaviour>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix schema: <http://schema.org/> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix edc: <https://w3id.org/edc/v0.0.1/ns/> .\\n@prefix cx-common: <https://w3id.org/catenax/ontology/common#> .\\n@prefix cx-core: <https://w3id.org/catenax/ontology/core#> .\\n@prefix cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#> .\\n@prefix cx-reliability: <https://w3id.org/catenax/ontology/reliability#> .\\n@prefix cx-sh: <https://w3id.org/catenax/ontology/schema#> .\\n@prefix cx-taxo: <https://w3id.org/catenax/taxonomy#> .\\n@prefix : <https://w3id.org/catenax/taxonomy#GraphAsset?supplier=BehaviourTwinHI&shapeObject=> .\\n\\n# Prognosis Function\\n:PrognosisFunctionShape rdf:type sh:NodeShape ;\\n    sh:targetClass cx-behaviour:PrognosisFunction;\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingMethod;\\n        sh:path cx-behaviour:countingMethod;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingValue;\\n        sh:path cx-behaviour:countingValue;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingUnit;\\n        sh:path cx-behaviour:countingUnit;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:channels;\\n        sh:path cx-behaviour:headerChannels;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:classes;\\n        sh:path cx-behaviour:bodyClasses;\\n    ].\\n    \\n:HealthIndicationShape a sh:NodeShape ;\\n    cx-sh:extensionOf :PrognosisFunctionShape;\\n    sh:targetClass cx-behaviour:HealthIndication;\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:observationOf;\\n        sh:path cx-behaviour:observationType;\\n        sh:in ( cx-taxo:Clutch );\\n    ];\\n    sh:property :HealthIndicationResultShape.\\n    \\n:HealthIndicationResultShape a sh:PropertyShape;\\n    cx-sh:outputOf :HealthIndicationShape;\\n    sh:path cx-behaviour:HealthIndicationResult .\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"dataAddress\": {\n        \"id\": \"cx-taxo:GraphAsset?supplier=HealthIndicatorGearbox\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{tierARemotingAgent}}/repositories/health\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{supplierBackendAuthKey}}\",\n        \"authCode\": \"{{supplierBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"{{tierARemotingAgent}}/repositories/health\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v3/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Skill Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n  },\n  \"@id\": \"Policy?supplier=Skill\",\n  \"policy\": {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"@type\": \"Set\",\n    \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?supplier=Skill\",\n    \"permission\": [\n      {\n        \"target\": \"https://w3id.org/catenax/ontology/common#SkillAsset?supplier=\",\n        \"action\": \"USE\",\n        \"constraint\": {\n\t\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\t\"or\" : [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{oemBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{consumerBPNL}}\"\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"BPNL00000002HCQ9\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t}\n      }\n    ]\n  }\n}\n\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/policydefinitions",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Create Skill Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?supplier=Skill\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?supplier=Skill\",\n    \"contractPolicyId\": \"Policy?supplier=Skill\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?supplier=Skill\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/contractdefinitions",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Create RUL Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a remaining useful life prognosis\n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT ?vin ?supplier ?vehicle ?assembly ?operatingTime ?mileage ?recordDate ?distanceKm ?timeHours WHERE {\n\n  VALUES (?vin ?aggregate ?ls_type) { \n      (\"@vin\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearOil\"^^xsd:string) \n  }\n\n  ?vin cx-vehicle:worldManufacturer ?oem.\n  ?oem cx-common:hasConnector ?oemEDC.\n  ?oemEDC cx-common:offers [ \n      rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; \n      cx-common:id ?reliabilityAssetId].\n  \n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n      } # OEM#GRAPH\n\n    ?supplier cx-common:hasConnector ?supplierEDC.\n    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n    SERVICE ?supplierEDC {\n        GRAPH ?prognosisAssetId {\n            ?invocation a cx-behaviour:RemainingUsefulLife;\n                    cx-behaviour:sender bpnl:BPNL00000003AYRE;\n                    cx-behaviour:senderConnector ?oemEDC;\n                    cx-behaviour:recipient ?supplier;\n                    cx-behaviour:recipientConnector ?supplierEDC;\n                    cx-behaviour:targetDate ?recordDate;\n                    cx-behaviour:timeStamp ?recordDate;\n                    cx-behaviour:component \"GearBox\";\n                    cx-behaviour:statusDate ?recordDate;\n                    cx-behaviour:statusOperatingHours ?operatingTime;\n                    cx-behaviour:statusMileage ?mileage;\n                    cx-behaviour:countingValue ?ls_value;\n                    cx-behaviour:countingUnit ?ls_unit;\n                    cx-behaviour:countingMethod ?ls_method;\n                    cx-behaviour:headerChannels ?ls_channels;\n                    cx-behaviour:bodyClasses ?ls_classes;\n                    cx-behaviour:bodyCountsList ?ls_values;\n                    cx-behaviour:remainingOperatingHours ?timeHours;\n                    cx-behaviour:remainingRunningDistance ?distanceKm.\n        } # SUPPLIER#GRAPH          \n    } # SUPPLIER#CATALOG\n\n  } # OEM#CATALOG\n\n} # SELECT\n"
												},
												"url": {
													"raw": "{{operatorAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fsupplier%3DRemainingUsefulLife&distributionMode=PROVIDER",
													"host": [
														"{{operatorAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fsupplier%3DRemainingUsefulLife"
														},
														{
															"key": "distributionMode",
															"value": "PROVIDER"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Register Trace Incident Site Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "# Copyright (c) 2023 SAP SE \n# Copyright (c) 2023 T-Systems International GmbH \n# Copyright (c) 2023 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License, Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nPREFIX cx-common: <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bpns: <urn:bpn:site:>\n\n######\n# Sample \"Site\" Trace Skill \n# The skill accepts\n# - an incident site as a bpns number\n# The skill produces\n# - affected assembly site bpns \n######\n\nSELECT DISTINCT ?incidentSite ?assemblySite\nWHERE {\n\n  VALUES (?incidentSite) { \n      (bpns:@incidentSite) \n  }\n\n  SERVICE <{{oemProviderAgent3}}/sparql> {\n    ?product cx-vehicle:manufacturer ?incidentSite.\n    ?product cx-vehicle:isSubpartOf [ cx-vehicle:manufacturer ?assemblySite ].\n  }\n}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{tieraAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fsupplier%3DTraceIncidentSite&distributionMode=PROVIDER",
													"host": [
														"{{tieraAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fsupplier%3DTraceIncidentSite"
														},
														{
															"key": "distributionMode",
															"value": "PROVIDER"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Trace Incident Site Skill Martin",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "# Copyright (c) 2023 SAP SE \n# Copyright (c) 2023 T-Systems International GmbH \n# Copyright (c) 2023 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License, Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nPREFIX cx-common: <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bpns: <urn:bpn:site:>\n\n######\n# Sample \"Site\" Trace Skill \n# The skill accepts\n# - an incident site as a bpns number\n# The skill produces\n# - affected assembly site bpns \n######\n\nSELECT DISTINCT ?incidentSite ?assemblySite\nWHERE {\n\n  VALUES (?incidentSite) { \n      (bpns:@incidentSite) \n  }\n\n  SERVICE <{{provisioningAgent3}}/sparql> {\n    ?product cx-vehicle:manufacturer ?incidentSite.\n    ?product cx-vehicle:isSubpartOf [ cx-vehicle:manufacturer ?assemblySite ].\n  }\n}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{tieraAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fsupplier%3DTraceIncidentSite&distributionMode=PROVIDER",
													"host": [
														"{{tieraAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fsupplier%3DTraceIncidentSite"
														},
														{
															"key": "distributionMode",
															"value": "PROVIDER"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										}
									]
								},
								{
									"name": "Debug State and Transfer",
									"item": [
										{
											"name": "Show (Remote) Catalogue Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Catalogue listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.property(\"@id\");",
															"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
															"    var dataset = pm.response.json()[\"dcat:dataset\"];",
															"    if(!Array.isArray(dataset)) {",
															"        dataset=[dataset];",
															"    }",
															"    dataset.map(function(contractOffer) {",
															"        pm.expect(contractOffer).to.have.property(\"@id\");",
															"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
															"        pm.expect(contractOffer).to.have.property(\"id\");",
															"        pm.expect(contractOffer).to.have.property(\"name\");",
															"        pm.expect(contractOffer).to.have.property(\"contenttype\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"counterPartyAddress\": \"{{oemEdcIds}}/api/v1/dsp\",\n    \"counterPartyId\": \"{{oemBPNL}}\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]         \n    }\n}\n"
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/catalog/request",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"catalog",
														"request"
													]
												},
												"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
											},
											"response": []
										},
										{
											"name": "Show (Local) Catalogue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Catalogue listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.property(\"@id\");",
															"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
															"    var dataset = pm.response.json()[\"dcat:dataset\"];",
															"    if(!Array.isArray(dataset)) {",
															"        dataset=[dataset];",
															"    }",
															"    dataset.map(function(contractOffer) {",
															"        pm.expect(contractOffer).to.have.property(\"@id\");",
															"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
															"        pm.expect(contractOffer).to.have.property(\"id\");",
															"        pm.expect(contractOffer).to.have.property(\"name\");",
															"        pm.expect(contractOffer).to.have.property(\"contenttype\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"counterPartyAddress\": \"{{tieraEdcIds}}/api/v1/dsp\",\n    \"counterPartyId\": \"{{supplierBPNL}}\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]         \n    }\n}\n"
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/catalog/request",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"catalog",
														"request"
													]
												},
												"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
											},
											"response": []
										},
										{
											"name": "Show (Remote INT) Catalogue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Catalogue listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.property(\"id\");",
															"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
															"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
															"    pm.response.json().contractOffers.map(function(contractOffer) {",
															"        pm.expect(contractOffer).to.have.property(\"id\");",
															"        pm.expect(contractOffer).to.have.property(\"policy\");",
															"        pm.expect(contractOffer).to.have.property(\"asset\");",
															"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"https://connector-release.edc.aws.bmw.cloud/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]         \n    }\n}\n"
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/catalog/request",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"catalog",
														"request"
													]
												},
												"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
											},
											"response": []
										},
										{
											"name": "List Assets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gt(0);",
															"    pm.response.json().map(function(asset) {",
															"        pm.expect(asset).to.have.property(\"properties\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
															"        contenttypes.map(function(contenttype) {",
															"            var contenttypespec=contenttype.split(\";\");",
															"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {},\n    \"offset\": 0,\n    \"limit\": 10,    \n    \"sort\": \"DESC\",\n    \"filterExpression\": [\n        {\n            \"operandLeft\": \"https://purl.org/dc/terms/type\",\n            \"operator\": \"=\",\n            \"operandRight\": \"cx-taxo:GraphAsset\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v3/assets/request",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the assets."
											},
											"response": []
										},
										{
											"name": "Change Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@type\": \"PolicyDefinitionRequestDto\",\n    \"@id\": \"Policy?supplier=Graph\",\n    \"policy\": {\n\t\t\"@type\": \"Policy\",\n\t\t\"odrl:permission\" : [{\n\t\t\t\"odrl:action\" : \"USE\",\n\t\t\t\"odrl:constraint\" : {\n\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\"odrl:or\" : [{\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003CPIY\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003COJN\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003CQI9\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003AYRE\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}]\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/policydefinitions/:param",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions",
														":param"
													],
													"variable": [
														{
															"key": "param",
															"value": "Policy%3Fsupplier%3DGraph"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Change CONF Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"@id\": \"GraphAsset?supplier=Conforming\", \n    \"properties\": {\n        \"name\": \"Conforming Asset.\",\n        \"description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n        \"version\": \"1.9.3-SNAPSHOT\",\n        \"contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n        \"rdf:type\": \"cx-common:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix : <GraphAsset?supplier=Conforming#> .\\n\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\": {\n        \"cx-common:enabled\": \"true\"\n    },\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?supplier=Conforming\", \n        \"baseUrl\": \"http://conforming-agent:8080/bind2\",\n        \"type\": \"HttpData\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v3/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Change Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?supplier=Graph\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?supplier=Graph\",\n    \"contractPolicyId\": \"Policy?supplier=Graph\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#enabled\",\n        \"operator\": \"=\",\n        \"operandRight\": \"true\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/management/v2/contractdefinitions",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										}
									]
								},
								{
									"name": "Initiate Negotiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body matches string\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"NEGOTIATION_ID\", jsonData.id);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@type\": \"NegotiationInitiateRequestDto\",\n    \"connectorAddress\": \"http://oem-control-plane:8282/api/v1/dsp\",\n    \"protocol\": \"dataspace-protocol-http\",\n    \"connectorId\": \"BPNL00000003COJN\",\n    \"providerId\": \"BPNL00000003CPIY\",\n    \"offer\": {\n        \"offerId\": \"Contract?oem=GraphContract:GraphAsset?oem=BehaviourTwin:23398a16-1657-49cf-9885-266104a2fbe8\",\n        \"assetId\": \"GraphAsset?oem=BehaviourTwin\",\n        \"policy\": {\n            \"@type\": \"odrl:Set\",\n            \"odrl:permission\": {\n                \"odrl:target\": \"GraphAsset?oem=BehaviourTwin\",\n                \"odrl:action\": {\n                    \"odrl:type\": \"USE\"\n                },\n                \"odrl:constraint\": {\n                    \"odrl:or\": [\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003CPIY\"\n                        },\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003CQI9\"\n                        },\n                        {\n                            \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                            \"odrl:operator\": \"EQ\",\n                            \"odrl:rightOperand\": \"BPNL00000003COJN\"\n                        }\n                    ]\n                }\n            },\n            \"odrl:prohibition\": [],\n            \"odrl:obligation\": [],\n            \"odrl:target\": \"GraphAsset?oem=BehaviourTwin\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/contractnegotiations",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractnegotiations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcObserve}}/observe/check/:stage",
											"host": [
												"{{tieraEdcObserve}}"
											],
											"path": [
												"observe",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										},
										"description": "Health Check Interface of EDC planes"
									},
									"response": []
								},
								{
									"name": "Delete Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/assets/:asset",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets",
												":asset"
											],
											"variable": [
												{
													"key": "asset",
													"value": "GraphAsset%3Fsupplier%3DBehaviourTwinRUL"
												}
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "Delete ContractDefinition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/contractdefinitions/:asset",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions",
												":asset"
											],
											"variable": [
												{
													"key": "asset",
													"value": "Contract%3Fsupplier%3DGraph"
												}
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "Delete Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/policydefinitions/:asset",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions",
												":asset"
											],
											"variable": [
												{
													"key": "asset",
													"value": "Policy%3Fsupplier%3DGraph"
												}
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/policydefinitions/request",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions",
												"request"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/assets/request",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets",
												"request"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "List Contract Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/contractdefinitions/request",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions",
												"request"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Perform a Self-SparQL Copy",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?query=SELECT%20%3Fs%20%3Fp%20%3Fo%20WHERE%20%7B%20%3Fs%20%3Fp%20%3Fo.%7D%20LIMIT%2010",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23cx-common:GraphAsset%3Foem%3ADiagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{tieraEdcIds}}%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http%3A%2F%2Foem-control-plane%3A8282%23GraphAsset%3Foem%3DDiagnosis2022",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT%20%3Fs%20%3Fp%20%3Fo%20WHERE%20%7B%20%3Fs%20%3Fp%20%3Fo.%7D%20LIMIT%2010"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a  (Remote) SparQL/Skill",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?runMode=consumer&asset={{consumerEdcIds}}%23SkillAsset%3Fconsumer%3DBeerSearch",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} ",
													"disabled": true
												},
												{
													"key": "runMode",
													"value": "consumer"
												},
												{
													"key": "asset",
													"value": "{{consumerEdcIds}}%23SkillAsset%3Fconsumer%3DBeerSearch"
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23urn:cx:Graph:oem:Conforming",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { GRAPH <urn:cx:Graph:oem:Conforming> { ?subject ?predicate ?object.} } LIMIT 100",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Query Conforming Agent Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect * where { \n    SERVICE <edc://oem-control-plane:8282> {\n        GRAPH <urn:cx:Graph:oem:Conforming> {\n        \tSELECT * WHERE {\n  \t\t\t\t?subject rdf:type ?object\n\t\t\t} \n    \t}\n    }\n} limit 100 \n"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "RUL Adaption",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\nSELECT ?vehicle ?van ?oemEDC ?reliabilityAssetId ?aggregate ?assembly ?supplier ?lc ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate ?ls_type) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearOil\"^^xsd:string) \n  }\n\n  bpnl:BPNL00000003AYRE cx-common:hasConnector ?oemEDC.\n  ?oemEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; cx-common:id ?reliabilityAssetId].\n  \n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n#        ?vehicle rdf:type cx-vehicle:Vehicle;\n#            cx-vehicle:vehicleIdentificationNumber ?van.\n\n#        ?assembly rdf:type cx-vehicle:Part;\n#            cx-vehicle:name ?aggregate;\n#            cx-vehicle:isPartOf ?vehicle;\n#            cx-vehicle:supplier ?supplier.\n            \n#        ?teleAnalysis rdf:type cx-reliability:Analysis;\n#            cx-reliability:analysedObject ?assembly;\n#            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n#            cx-reliability:mileageOfVehicle ?mileage;\n#            cx-core:startDateTime ?recordDate;\n#            cx-reliability:result [\n#                cx-core:id ?ls_type;\n#                cx-core:name ?ls_name;\n#                cx-reliability:countingValue ?ls_value;\n#                cx-reliability:countingUnit ?ls_unit;\n#                cx-reliability:countingMethod ?ls_method;\n#                cx-reliability:channels ?ls_channels;\n#                cx-reliability:classes ?ls_classes;\n#                cx-reliability:values ?ls_values\n#            ].\n    } # OEM#GRAPH\n\n#    ?supplier cx-common:hasConnector ?supplierEDC.\n#    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n#    SERVICE ?supplierEDC {\n#        GRAPH ?prognosisAssetId {\n#            ?invocation a cx-behaviour:RemainingUsefulLife;\n#                    cx-behaviour:sender bpnl:BPNL00000003AYRE;\n#                    cx-behaviour:senderConnector ?oemEDC;\n#                    cx-behaviour:recipient ?supplier;\n#                    cx-behaviour:recipientConnector ?supplierEDC;\n#                    cx-behaviour:targetDate ?recordDate;\n#                    cx-behaviour:timeStamp ?recordDate;\n#                    cx-behaviour:component \"GearBox\";\n#                    cx-behaviour:statusDate ?recordDate;\n#                    cx-behaviour:statusOperatingHours ?operatingTime;\n#                    cx-behaviour:statusMileage ?mileage;\n#                    cx-behaviour:countingValue ?ls_value;\n#                    cx-behaviour:countingUnit ?ls_unit;\n#                    cx-behaviour:countingMethod ?ls_method;\n#                    cx-behaviour:headerChannels ?ls_channels;\n#                    cx-behaviour:bodyClasses ?ls_classes;\n#                    cx-behaviour:bodyCountsList ?ls_values;\n#                    cx-behaviour:remainingOperatingHours ?timeHours;\n#                    cx-behaviour:remainingRunningDistance ?distanceKm.\n#        } # SUPPLIER#GRAPH          \n#    } # SUPPLIER#CATALOG\n\n } # OEM#CATALOG\n\n} # SELECT\n"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute RUL Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"van\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FNLQNRVCOFLHAQ\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FGPTXINYZAVJYK\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"DVAJDTLJMKKZGY\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FKUBNDMDXQNFHI\"\n                }\n            },\n           {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"HHXDGSMSUTWFUO\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FVARQFZDICATNV\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"VKKTXVZTRKRNSB\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"HGWQDJCIGBSKXH\"\n                }\n            }   \n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?asset=SkillAsset%3Fsupplier%3DRemainingUsefulLife",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Fsupplier%3DRemainingUsefulLife"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute Remote Skill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FGPTXINYZAVJYK\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HHXDGSMSUTWFUO\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RGZCDKEJHDSNCB\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?asset={{cabEdcIdsUrlEncode}}%23SkillAsset%3Fconsumer%3DConforming",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{cabEdcIdsUrlEncode}}%23SkillAsset%3Fconsumer%3DConforming"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Trace Incident Site Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?asset=SkillAsset%3Fsupplier%3DTraceIncidentSite&incidentSite=BPNS000000000001",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Fsupplier%3DTraceIncidentSite"
												},
												{
													"key": "incidentSite",
													"value": "BPNS000000000001"
												},
												{
													"key": "material",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Perform a SparQL Against Consumer-Local Graph",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/sparql-results+json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/sparql-results+xml"
											},
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object \nWHERE { \n    SERVICE <edc://consumer-control-plane:8282> {\n        GRAPH <GraphAsset?consumer=Upload> {\n            ?subject ?predicate ?object.\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "BMW RUL Adaption",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl:             <http://www.w3.org/2002/07/owl#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n  }\n\n  SERVICE <edcs://connector-release.edc.aws.bmw.cloud> {  \n      GRAPH <GraphAsset?oem=BehaviourTwinReliability> {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n     } # OEM#GRAPH\n\n  } # OEM#CATALOG\n\n} # SELECT\n"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "BMW RUL Adaption Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl:             <http://www.w3.org/2002/07/owl#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  SERVICE <edcs://connector-release.edc.aws.bmw.cloud> {  \n      GRAPH <GraphAsset?oem=BehaviourTwinReliability> {\n     } # OEM#GRAPH\n  } # OEM#CATALOG\n\n} # SELECT\n"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								}
							],
							"description": "A Collection of Calls Against the EDC control and dataplane sitting on top of the remoting backend.",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{portalToken}}",
										"type": "string"
									}
								]
							}
						}
					],
					"description": "A Collection of API Calls Against the Function Remoting Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Consumer (Federating Agent)",
					"item": [
						{
							"name": "EDC (intern)",
							"item": [
								{
									"name": "Setup Assets, Policies, Contracts and Skills",
									"item": [
										{
											"name": "Create Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n  },\n  \"@id\": \"Policy?consumer=Graph\",\n  \"policy\": {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"@type\": \"Set\",\n    \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?consumer=Graph\",\n    \"permission\": [\n      {\n        \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?consumer=\",\n        \"action\": \"USE\",\n        \"constraint\": {\n\t\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\t\"or\" : [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{oemBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{consumerBPNL}}\"\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"BPNL00000002HCQ9\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t}\n      }\n    ]\n  }\n}\n\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/policydefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill policy."
											},
											"response": []
										},
										{
											"name": "Create Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?consumer=Graph\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?consumer=Graph\",\n    \"contractPolicyId\": \"Policy?consumer=Graph\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?consumer=Graph\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/contractdefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill contract."
											},
											"response": []
										},
										{
											"name": "Create CONF Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?consumer=Conforming\", \n        \"properties\": {\n            \"name\": \"Conforming Asset.\",\n            \"description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n            \"version\": \"1.9.3-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?consumer=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?consumer=Conforming#> .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?consumer=Conforming\", \n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"http://conforming-agent:8080/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Remaining Useful Life Skill Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"asset\": {\n        \"properties\": {\n            \"asset:prop:id\": \"urn:cx:Skill:consumer:Lifetime\",\n            \"asset:prop:contract\": \"<urn:cx:Skill:consumer>\",\n            \"asset:prop:name\": \"Remaining Useful Lifetime Skill for Vehicles\",\n            \"asset:prop:description\": \"A sample skill asset/offering implemented via SparQL.\",\n            \"asset:prop:version\": \"0.7.4-SNAPSHOT\",\n            \"asset:prop:contenttype\": \"application/json, application/xml\",\n            \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n            \"rdf:type\": \"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n            \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/diagnosis_ontology.ttl>,<{{cxOntologyRoot}}/part_ontology.ttl>,<{{cxOntologyRoot}}/prognosis_ontology.ttl>\",\n            \"cx:isFederated\": \"true\",\n            \"cx:shape\": \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\\n\\n##############################################################################################\\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\\n#                         Realizes a 5-Step Business Process                                 #\\n#            \\\"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\\\"               #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\\n#   - Serial Part & SUPPLIER Lookup                                                          #\\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\\n##############################################################################################\\n\\n####\\n# 5. Project the actual output of the Skill on CONSUMER side\\n####\\nSELECT  ?van ?description ?serializedPartName ?distance ?time ?vin ?troubleCode WHERE {\\n\\n    ####\\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\\n    ####\\n    VALUES (?vin ?troubleCode) { (\\\"@vin\\\"^^xsd:string \\\"@troubleCode\\\"^^xsd:string) }.\\n    \\n    ####\\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \\n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\\n    ####\\n    SERVICE ?oemConnector { \\n\\n        ####\\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\\n        #.    and gets some master data with it \\n        ####\\n        ?van cx:isAnonymousVehicle ?vin;\\n             cx:hasRegistration ?registration.\\n\\n        ####\\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\\n        ####\\n        GRAPH ?diagnoseAsset {\\n\\n           ?Dtc rdf:type cx-diag:DTC; \\n                cx-diag:Code ?troubleCode;\\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \\n                cx-diag:Description ?description.\\n        \\n        } # OEM#Diagnosis context\\n\\n        ####\\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\\n        #     focussed to the problematic partType (Telematics Graph) \\n        ####\\n        ?van cx-telematics:latestMileageReceived ?mileage;\\n             cx-telematics:latestDetailReceived ?telematicsDetail.\\n        ?telematicsDetail cx-diag:hasPartType ?partType;\\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\\n\\n        ####\\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\\n        #     and the supplier address in the dataspace\\n        ####\\n        ?serializedPart cx:isComponentOf+ ?van;\\n                        cx:hasPartType ?partType;\\n                        cx:hasName ?serializedPartName;\\n                        cx:hasSupplier [\\n                            cx:hasConnector ?tieraConnector\\n                        ].           \\n\\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\\n        ?prognosisAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#\\\"^^xsd:string.\\n\\n        ####\\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\\n        #    which means that load spectrum data etc is only exchanged using their\\n        #    contract and between their connectors.\\n        ####\\n        SERVICE ?tieraConnector { \\n\\n            ####\\n            # 4.1 The SUPPLIER adds additional measurement information\\n            ####\\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\\n\\n            ####\\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\\n            ####\\n            GRAPH ?prognosisAsset {\\n\\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\\n                    \\n                    # <--General vehicle info\\n                    cx-lifetime:loadCollectiveMileage ?mileage;\\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\\n\\n                    # <--Part Info from the OEM\\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\\n                    \\n                    # <--Additional info from the SUPPLIER\\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \\n                    \\n                    # -->the actual prognosis output\\n                    cx-lifetime:remainingDistance ?distance; \\n                    cx-lifetime:remainingTime ?time.\\n            \\n            } # SUPPLIER#Prognosis context\\n        \\n        } # SUPPLIER context\\n\\n    } # OEM context\\n\\n   # now we do reporting/operationalising on the CONSUMER side\\n} ORDER BY ?remainingDistance LIMIT 5\"\n        }\n    },\n    \"dataAddress\": {\n        \"properties\": {\n            \"asset:prop:id\": \"urn:cx:Skill:consumer:Lifetime\",\n            \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n            \"query\": \"PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\\n\\n##############################################################################################\\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\\n#                         Realizes a 5-Step Business Process                                 #\\n#            \\\"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\\\"               #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\\n#   - Serial Part & SUPPLIER Lookup                                                          #\\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\\n##############################################################################################\\n\\n####\\n# 5. Project the actual output of the Skill on CONSUMER side\\n####\\nSELECT  ?van ?description ?serializedPartName ?distance ?time ?vin ?troubleCode WHERE {\\n\\n    ####\\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\\n    ####\\n    VALUES (?vin ?troubleCode) { (\\\"@vin\\\"^^xsd:string \\\"@troubleCode\\\"^^xsd:string) }.\\n    \\n    ####\\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \\n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\\n    ####\\n    SERVICE ?oemConnector { \\n\\n        ####\\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\\n        #.    and gets some master data with it \\n        ####\\n        ?van cx:isAnonymousVehicle ?vin;\\n             cx:hasRegistration ?registration.\\n\\n        ####\\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\\n        ####\\n        GRAPH ?diagnoseAsset {\\n\\n           ?Dtc rdf:type cx-diag:DTC; \\n                cx-diag:Code ?troubleCode;\\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \\n                cx-diag:Description ?description.\\n        \\n        } # OEM#Diagnosis context\\n\\n        ####\\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\\n        #     focussed to the problematic partType (Telematics Graph) \\n        ####\\n        ?van cx-telematics:latestMileageReceived ?mileage;\\n             cx-telematics:latestDetailReceived ?telematicsDetail.\\n        ?telematicsDetail cx-diag:hasPartType ?partType;\\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\\n\\n        ####\\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\\n        #     and the supplier address in the dataspace\\n        ####\\n        ?serializedPart cx:isComponentOf+ ?van;\\n                        cx:hasPartType ?partType;\\n                        cx:hasName ?serializedPartName;\\n                        cx:hasSupplier [\\n                            cx:hasConnector ?tieraConnector\\n                        ].           \\n\\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\\n        ?prognosisAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#\\\"^^xsd:string.\\n\\n        ####\\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\\n        #    which means that load spectrum data etc is only exchanged using their\\n        #    contract and between their connectors.\\n        ####\\n        SERVICE ?tieraConnector { \\n\\n            ####\\n            # 4.1 The SUPPLIER adds additional measurement information\\n            ####\\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\\n\\n            ####\\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\\n            ####\\n            GRAPH ?prognosisAsset {\\n\\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\\n                    \\n                    # <--General vehicle info\\n                    cx-lifetime:loadCollectiveMileage ?mileage;\\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\\n\\n                    # <--Part Info from the OEM\\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\\n                    \\n                    # <--Additional info from the SUPPLIER\\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \\n                    \\n                    # -->the actual prognosis output\\n                    cx-lifetime:remainingDistance ?distance; \\n                    cx-lifetime:remainingTime ?time.\\n            \\n            } # SUPPLIER#Prognosis context\\n        \\n        } # SUPPLIER context\\n\\n    } # OEM context\\n\\n   # now we do reporting/operationalising on the CONSUMER side\\n} ORDER BY ?remainingDistance LIMIT 5\",\n            \"proxyPath\": \"false\",\n            \"proxyMethod\": \"false\",\n            \"proxyQueryParams\": \"true\",\n            \"proxyBody\": \"false\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Trouble Code Search Skill Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:TroubleCodeSearch\",\n      \"asset:prop:contract\": \"<urn:cx:Skill:consumer>\",\n      \"asset:prop:name\": \"Investigate Possible Trouble Codes per Vehicle and AssemblyGroupy\",\n      \"asset:prop:description\": \"Another sample skill asset/offering implemented via SparQL.\",\n      \"asset:prop:version\": \"0.7.4-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/diagnosis_ontology.ttl>,<{{cxOntologyRoot}}/vehicle_ontology.ttl>,<{{cxOntologyRoot}}/common_ontology.ttl>\",\n      \"cx:isFederated\": \"true\",\n      \"cx:shape\":\"PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\n\\n##############################################################################################\\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\\n#                     Implements Trouble-Code Search based on VINs                           #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\\n##############################################################################################\\n\\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\\n\\n    ####\\n    # Three parameters to the custom search\\n    ####\\n    VALUES (?vin ?problemArea ?minVersion) {(\\\"@vin\\\"^^xsd:string \\\"@problemArea\\\"^^xsd:string \\\"@minVersion\\\"^^xsd:long)}\\n\\n    ####\\n    # Lookup the responsible OEM(s)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # Delegate to the revelant connector(s) and asset(s)\\n    ####\\n    SERVICE ?oemConnector {\\n        GRAPH ?diagnoseAsset {\\n\\n            ?Dtc rdf:type cx-diag:DTC;\\n                 cx-diag:Code ?codeNumber;\\n                 cx-diag:Description ?description;\\n                 cx-diag:Version ?version.\\n\\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\\n       \\n        } # Graph Asset\\n    } # Remote Connector\\n} # Search\"\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:TroubleCodeSearch\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\n\\n##############################################################################################\\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\\n#                     Implements Trouble-Code Search based on VINs                           #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\\n##############################################################################################\\n\\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\\n\\n    ####\\n    # Three parameters to the custom search\\n    ####\\n    VALUES (?vin ?problemArea ?minVersion) {(\\\"@vin\\\"^^xsd:string \\\"@problemArea\\\"^^xsd:string \\\"@minVersion\\\"^^xsd:long)}\\n\\n    ####\\n    # Lookup the responsible OEM(s)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # Delegate to the revelant connector(s) and asset(s)\\n    ####\\n    SERVICE ?oemConnector {\\n        GRAPH ?diagnoseAsset {\\n\\n            ?Dtc rdf:type cx-diag:DTC;\\n                 cx-diag:Code ?codeNumber;\\n                 cx-diag:Description ?description;\\n                 cx-diag:Version ?version.\\n\\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\\n       \\n        } # Graph Asset\\n    } # Remote Connector\\n} # Search\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Material Incident Search Skill Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:MaterialIncident\",\n      \"asset:prop:contract\": \"<urn:cx:Skill:consumer>\",\n      \"asset:prop:name\": \"Analyse Sources and Impact of Geographically Fenced Material Incidents\",\n      \"asset:prop:description\": \"Another sample skill asset/offering implemented via SparQL.\",\n      \"asset:prop:version\": \"0.7.5-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/material_ontology.ttl>,<{{cxOntologyRoot}}/part_ontology.ttl>,<{{cxOntologyRoot}}/common_ontology.ttl>\",\n      \"cx:isFederated\": \"true\",\n      \"cx:shape\":\"PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\n######\\n# Sample \\\"Material Incident\\\" Search Skill \\n# An incident has\\n# - a description of the target material\\n# - a geographical region (as a spatial segment)\\n# The skill produces\\n# - incident site(s) and source part(s)\\n# - affected product(s) and organization(s)\\n# - (m)bom trace(s) from source to product \\n######\\n\\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\\n\\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \\n      (\\\"@material\\\"^^xsd:string \\\"@latmin\\\"^^xsd:double \\\"@latmax\\\"^^xsd:double \\\"@lonmin\\\"^^xsd:double \\\"@lonmax\\\"^^xsd:double) \\n  }\\n\\n  ## Look for production sites in the region\\n  ## using the BPNM/Golden Record Catalogue\\n  ?site cx:hasGeoInformation [\\n      cx:hasLatitude ?lat;\\n      cx:hasLongitude ?lon\\n  ].\\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\\n  \\n  ## Find the connector address of the responsible\\n  ## businesspartner/orga from the federated data catalogue \\n  ?incidentOrga cx:hasSite ?site;\\n        cx:hasConnector ?connectorUrl.\\n        \\n  SERVICE ?connectorUrl {\\n\\n      ## Is there a product which has the incident \\\"material\\\"\\n      ## workaround: use the part name\\n       ?part rdf:type cx:Part;\\n         cx:partName ?partName;\\n         cx:isProducedBy ?site.\\n       FILTER( CONTAINS(?partName, ?material)).\\n\\n      ?part cx:isPartOf ?part2.\\n      ?part2 cx:partName ?part2Name;\\n             cx:isProducedBy ?site2.\\n  \\n      OPTIONAL {\\n          ?part2 cx:isPartOf ?part3.\\n          ?part3 cx:partName ?part3Name;\\n                 cx:isProducedBy ?site3.\\n      }\\n\\n     OPTIONAL {\\n          ?part3 cx:isPartOf ?part4.\\n          ?part4 cx:partName ?part4Name;\\n                 cx:isProducedBy ?site4.\\n     }\\n\\n      OPTIONAL {\\n          ?part4 cx:isPartOf ?product.\\n          ?product cx:partName ?productName;\\n                   cx:isProducedBy ?site5.\\n     }\\n  }\\n\\n  ?vendor cx:hasSite ?site5.\\n  ?site2 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat2;\\n      cx:hasLongitude ?lon2\\n  ].\\n  ?site3 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat3;\\n      cx:hasLongitude ?lon3\\n  ].\\n  ?site4 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat4;\\n      cx:hasLongitude ?lon4\\n  ].\\n  ?site5 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat5;\\n      cx:hasLongitude ?lon5\\n  ].\\n} \\n\"\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:MaterialIncident\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\n######\\n# Sample \\\"Material Incident\\\" Search Skill \\n# An incident has\\n# - a description of the target material\\n# - a geographical region (as a spatial segment)\\n# The skill produces\\n# - incident site(s) and source part(s)\\n# - affected product(s) and organization(s)\\n# - (m)bom trace(s) from source to product \\n######\\n\\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\\n\\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \\n      (\\\"@material\\\"^^xsd:string \\\"@latmin\\\"^^xsd:double \\\"@latmax\\\"^^xsd:double \\\"@lonmin\\\"^^xsd:double \\\"@lonmax\\\"^^xsd:double) \\n  }\\n\\n  ## Look for production sites in the region\\n  ## using the BPNM/Golden Record Catalogue\\n  ?site cx:hasGeoInformation [\\n      cx:hasLatitude ?lat;\\n      cx:hasLongitude ?lon\\n  ].\\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\\n  \\n  ## Find the connector address of the responsible\\n  ## businesspartner/orga from the federated data catalogue \\n  ?incidentOrga cx:hasSite ?site;\\n        cx:hasConnector ?connectorUrl.\\n        \\n  SERVICE ?connectorUrl {\\n\\n      ## Is there a product which has the incident \\\"material\\\"\\n      ## workaround: use the part name\\n       ?part rdf:type cx:Part;\\n         cx:partName ?partName;\\n         cx:isProducedBy ?site.\\n       FILTER( CONTAINS(?partName, ?material)).\\n\\n      ?part cx:isPartOf ?part2.\\n      ?part2 cx:partName ?part2Name;\\n             cx:isProducedBy ?site2.\\n  \\n      OPTIONAL {\\n          ?part2 cx:isPartOf ?part3.\\n          ?part3 cx:partName ?part3Name;\\n                 cx:isProducedBy ?site3.\\n      }\\n\\n     OPTIONAL {\\n          ?part3 cx:isPartOf ?part4.\\n          ?part4 cx:partName ?part4Name;\\n                 cx:isProducedBy ?site4.\\n     }\\n\\n      OPTIONAL {\\n          ?part4 cx:isPartOf ?product.\\n          ?product cx:partName ?productName;\\n                   cx:isProducedBy ?site5.\\n     }\\n  }\\n\\n  ?vendor cx:hasSite ?site5.\\n  ?site2 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat2;\\n      cx:hasLongitude ?lon2\\n  ].\\n  ?site3 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat3;\\n      cx:hasLongitude ?lon3\\n  ].\\n  ?site4 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat4;\\n      cx:hasLongitude ?lon4\\n  ].\\n  ?site5 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat5;\\n      cx:hasLongitude ?lon5\\n  ].\\n} \\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Product Trace Skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:ProductTrace\",\n      \"asset:prop:contract\": \"<urn:cx:Skill:consumer>\",\n      \"asset:prop:name\": \"Product Indicent Trace Skill\",\n      \"asset:prop:description\": \"A recursive helper skill to trace a distributed/federated BOM as planned structure.\",\n      \"asset:prop:version\": \"0.8.6-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/material_ontology.ttl>,<{{cxOntologyRoot}}/part_ontology.ttl>,<{{cxOntologyRoot}}/common_ontology.ttl>\",\n      \"cx:isFederated\": \"true\",\n      \"cx:shape\":\"PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\n######\\n# Sample \\\"Material Incident\\\" Search Skill \\n# An incident has\\n# - a description of the target material\\n# - a geographical region (as a spatial segment)\\n# The skill produces\\n# - incident site(s) and source part(s)\\n# - affected product(s) and organization(s)\\n# - (m)bom trace(s) from source to product \\n######\\n\\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\\n\\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \\n      (\\\"@material\\\"^^xsd:string \\\"@latmin\\\"^^xsd:double \\\"@latmax\\\"^^xsd:double \\\"@lonmin\\\"^^xsd:double \\\"@lonmax\\\"^^xsd:double) \\n  }\\n\\n  ## Look for production sites in the region\\n  ## using the BPNM/Golden Record Catalogue\\n  ?site cx:hasGeoInformation [\\n      cx:hasLatitude ?lat;\\n      cx:hasLongitude ?lon\\n  ].\\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\\n  \\n  ## Find the connector address of the responsible\\n  ## businesspartner/orga from the federated data catalogue \\n  ?incidentOrga cx:hasSite ?site;\\n        cx:hasConnector ?connectorUrl.\\n        \\n  SERVICE ?connectorUrl {\\n\\n      ## Is there a product which has the incident \\\"material\\\"\\n      ## workaround: use the part name\\n       ?part rdf:type cx:Part;\\n         cx:partName ?partName;\\n         cx:isProducedBy ?site.\\n       FILTER( CONTAINS(?partName, ?material)).\\n\\n      ?part cx:isPartOf ?part2.\\n      ?part2 cx:partName ?part2Name;\\n             cx:isProducedBy ?site2.\\n  \\n      OPTIONAL {\\n          ?part2 cx:isPartOf ?part3.\\n          ?part3 cx:partName ?part3Name;\\n                 cx:isProducedBy ?site3.\\n      }\\n\\n     OPTIONAL {\\n          ?part3 cx:isPartOf ?part4.\\n          ?part4 cx:partName ?part4Name;\\n                 cx:isProducedBy ?site4.\\n     }\\n\\n      OPTIONAL {\\n          ?part4 cx:isPartOf ?product.\\n          ?product cx:partName ?productName;\\n                   cx:isProducedBy ?site5.\\n     }\\n  }\\n\\n  ?vendor cx:hasSite ?site5.\\n  ?site2 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat2;\\n      cx:hasLongitude ?lon2\\n  ].\\n  ?site3 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat3;\\n      cx:hasLongitude ?lon3\\n  ].\\n  ?site4 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat4;\\n      cx:hasLongitude ?lon4\\n  ].\\n  ?site5 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat5;\\n      cx:hasLongitude ?lon5\\n  ].\\n} \\n\"\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:ProductTrace\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"baseUrl\": \"file://\",\n      \"query\": \"PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\n######\\n# Sample \\\"Material Incident\\\" Search Skill \\n# An incident has\\n# - a description of the target material\\n# - a geographical region (as a spatial segment)\\n# The skill produces\\n# - incident site(s) and source part(s)\\n# - affected product(s) and organization(s)\\n# - (m)bom trace(s) from source to product \\n######\\n\\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\\n\\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \\n      (\\\"@material\\\"^^xsd:string \\\"@latmin\\\"^^xsd:double \\\"@latmax\\\"^^xsd:double \\\"@lonmin\\\"^^xsd:double \\\"@lonmax\\\"^^xsd:double) \\n  }\\n\\n  ## Look for production sites in the region\\n  ## using the BPNM/Golden Record Catalogue\\n  ?site cx:hasGeoInformation [\\n      cx:hasLatitude ?lat;\\n      cx:hasLongitude ?lon\\n  ].\\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\\n  \\n  ## Find the connector address of the responsible\\n  ## businesspartner/orga from the federated data catalogue \\n  ?incidentOrga cx:hasSite ?site;\\n        cx:hasConnector ?connectorUrl.\\n        \\n  SERVICE ?connectorUrl {\\n\\n      ## Is there a product which has the incident \\\"material\\\"\\n      ## workaround: use the part name\\n       ?part rdf:type cx:Part;\\n         cx:partName ?partName;\\n         cx:isProducedBy ?site.\\n       FILTER( CONTAINS(?partName, ?material)).\\n\\n      ?part cx:isPartOf ?part2.\\n      ?part2 cx:partName ?part2Name;\\n             cx:isProducedBy ?site2.\\n  \\n      OPTIONAL {\\n          ?part2 cx:isPartOf ?part3.\\n          ?part3 cx:partName ?part3Name;\\n                 cx:isProducedBy ?site3.\\n      }\\n\\n     OPTIONAL {\\n          ?part3 cx:isPartOf ?part4.\\n          ?part4 cx:partName ?part4Name;\\n                 cx:isProducedBy ?site4.\\n     }\\n\\n      OPTIONAL {\\n          ?part4 cx:isPartOf ?product.\\n          ?product cx:partName ?productName;\\n                   cx:isProducedBy ?site5.\\n     }\\n  }\\n\\n  ?vendor cx:hasSite ?site5.\\n  ?site2 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat2;\\n      cx:hasLongitude ?lon2\\n  ].\\n  ?site3 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat3;\\n      cx:hasLongitude ?lon3\\n  ].\\n  ?site4 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat4;\\n      cx:hasLongitude ?lon4\\n  ].\\n  ?site5 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat5;\\n      cx:hasLongitude ?lon5\\n  ].\\n} \\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/management/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"management",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Skill Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n  },\n  \"@id\": \"Policy?consumer=Skill\",\n  \"policy\": {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"@type\": \"Set\",\n    \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?consumer=Skill\",\n    \"permission\": [\n      {\n        \"target\": \"https://w3id.org/catenax/ontology/common#SkillAsset?consumer=\",\n        \"action\": \"USE\",\n        \"constraint\": {\n\t\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\t\"or\" : [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{oemBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{supplierBPNL}}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"{{consumerBPNL}}\"\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\t\t\t\t\t\t\"leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\t\t\t\t\"operator\" :\"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"rightOperand\" : \"BPNL00000002HCQ9\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t}\n      }\n    ]\n  }\n}\n\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/policydefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill policy."
											},
											"response": []
										},
										{
											"name": "Create Skill Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?consumer=Skill\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?consumer=Skill\",\n    \"contractPolicyId\": \"Policy?consumer=Skill\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?consumer=Skill\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/contractdefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill contract."
											},
											"response": []
										},
										{
											"name": "Create OEM CONF Skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Vehicle Health Skill Registered\", function () {",
															"    pm.expect(pm.response.code).oneOf([201,200]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{oemEdcIdsSparql}}> {\n        GRAPH <GraphAsset?oem=Conforming> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?distributionMode=ALL&contract=Contract%3Fconsumer%3DSkillAsset&asset=SkillAsset%3Fconsumer%3DConforming&isFederated=true",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "distributionMode",
															"value": "ALL",
															"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
														},
														{
															"key": "contract",
															"value": "Contract%3Fconsumer%3DSkillAsset",
															"description": "Name of the contract to publish the skill under"
														},
														{
															"key": "asset",
															"value": "SkillAsset%3Fconsumer%3DConforming",
															"description": "Id of the skill"
														},
														{
															"key": "isFederated",
															"value": "true"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
											},
											"response": []
										},
										{
											"name": "Create TRAC Graph Asset",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:ntier:TraceabilityAsPlanned\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:ntier>\",\n      \"asset:prop:name\": \"TierN portion of the Traceability As-Planned Testdataset.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Carena-X Testdata for Traceability.\",\n      \"asset:prop:version\": \"CX_Testdata_v1.4.1-AsPlanned\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/part_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:ntier:TraceabilityAsPlanned> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemAssemblyGroup rdf:type sh:NodeShape ;\\n  sh:targetClass cx:AssemblyGroup ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class SupplierParts ;\\n    ] ;\\n\\nSupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:Part ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003B2OM> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": \"true\"\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:ntier:TraceabilityAsPlanned\",\n      \"baseUrl\": \"http://oem-provider-agent:8082/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"assets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register Dataspace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \nPREFIX sh: <http://www.w3.org/ns/shacl#> \nPREFIX dc: <https://purl.org/dc/terms/>\n\nSELECT ?connector ?asset \n       ?name\n       (MIN(?adescription) AS ?description) \n       ?type\n       (MAX(?aversion) AS ?version) \n       (GROUP_CONCAT(DISTINCT ?acontentType;SEPARATOR=\",\") AS ?contentType) \n       ?protocol\n       (CONCAT(\"<\",GROUP_CONCAT(?aontology;SEPARATOR=\">,<\"),\">\") AS ?isDefinedBy) \n       (MIN(?ashape) AS ?shape)\n WHERE { \n     ?connector cx-common:offers ?asset. \n     ?asset cx-common:contenttype ?acontentType; \n            cx-common:name ?name; \n            dc:type ?type; \n            rdfs:isDefinedBy ?aontology; \n            cx-common:version ?aversion; \n            cx-common:description ?adescription;\n            cx-common:implementsProtocol ?protocol. \n\n    OPTIONAL {\n        ?asset sh:shapesGraph ?ashape\n    }\n} GROUP BY ?connector ?asset ?name ?type ?protocol",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=SkillAsset%3Foem%3DDataspace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Foem%3DDataspace"
														},
														{
															"key": "distributionMode",
															"value": "ALL",
															"disabled": true
														},
														{
															"key": "isFederated",
															"value": "false",
															"disabled": true
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Lifetime Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?van ?troubleCode ?description ?affectedPart ?distanceKm ?timeDays ?vin WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n    \n     ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        GRAPH ?diagnoseAsset {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?description.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?affectedPart;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\n        ?prognosisAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/prognosis_ontology.ttl>.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?prognosisAsset {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?affectedPart;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?distanceKm; \n                    cx-lifetime:remainingTime ?timeDays.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Lifetime",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:Lifetime"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Create RUL Skill (Direct Access)",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vin ?vehicle ?assembly ?recordDate ?operatingTime ?mileage  ?distanceKm ?timeHours WHERE {\n\n  VALUES (?vin ?aggregate) { \n      (\"@vin\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n  }\n\n  SERVICE <{{oemProviderAgent5}}/sparql> {  \n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?vin.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n  }\n\n  SERVICE <{{tierARemotingAgent}}/repositories/rul> {\n      SELECT ?timeHours ?distanceKm WHERE {\n        ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm.\n      }\n  } # SUPPLIER#CATALOG\n\n} # SELECT"
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fconsumer%3DRemainingUsefulLifeDirect&distributionMode=PROVIDER&contract=Contract%3Fconsumer%3DSkillAsset",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLifeDirect"
														},
														{
															"key": "distributionMode",
															"value": "PROVIDER"
														},
														{
															"key": "contract",
															"value": "Contract%3Fconsumer%3DSkillAsset"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create RUL Skill (EDC)",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl:             <http://www.w3.org/2002/07/owl#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"@van\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n  }\n\n  ?oem cx-common:id \"{{oemBPNL}}\";\n       cx-common:hasConnector ?oemEDC.\n       \n  ?oemEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; cx-common:id ?reliabilityAssetId].\n\n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n    } # OEM#GRAPH\n\n    ?supplierPartner owl:sameAs ?supplier.\n    ?supplierPartner cx-common:hasConnector ?supplierEDC.\n    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n    SERVICE ?supplierEDC {\n        GRAPH ?prognosisAssetId {\n            SELECT ?distanceKm ?timeHours WHERE {\n                ?invocation a cx-behaviour:RemainingUsefulLife;\n                        cx-behaviour:sender ?oem;\n                        cx-behaviour:senderConnector ?oemEDC;\n                        cx-behaviour:recipient ?supplier;\n                        cx-behaviour:recipientConnector ?supplierEDC;\n                        cx-behaviour:targetDate ?recordDate;\n                        cx-behaviour:timeStamp ?recordDate;\n                        cx-behaviour:component ?assembly;\n                        cx-behaviour:observationType ?ls_type;\n                        cx-behaviour:statusDate ?recordDate;\n                        cx-behaviour:statusOperatingHours ?operatingTime;\n                        cx-behaviour:statusMileage ?mileage;\n                        cx-behaviour:countingValue ?ls_value;\n                        cx-behaviour:countingUnit ?ls_unit;\n                        cx-behaviour:countingMethod ?ls_method;\n                        cx-behaviour:headerChannels ?ls_channels;\n                        cx-behaviour:bodyClasses ?ls_classes;\n                        cx-behaviour:bodyCountsList ?ls_values;\n                        cx-behaviour:remainingOperatingHours ?timeHours;\n                        cx-behaviour:remainingRunningDistance ?distanceKm.\n            }\n        } # SUPPLIER#GRAPH          \n    } # SUPPLIER#CATALOG\n\n  } # OEM#CATALOG\n\n} # SELECT"
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fconsumer%3DRemainingUsefulLife&distributionMode=PROVIDER",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLife"
														},
														{
															"key": "distributionMode",
															"value": "PROVIDER"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Register Non-DS Lifetime Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?van ?troubleCode ?affectedAssembly ?problem ?kmLeft ?daysLeft ?vin WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n    \n     ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    #?oemConnector cx:offersAsset ?diagnoseAsset.\n    #?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n    #               rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    #SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        SERVICE <{{oemProviderAgent}}/sparql> {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?problem.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?affectedAssembly;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        #?tieraConnector cx:offersAsset ?prognosisAsset.\n        #?prognosisAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/prognosis_ontology.ttl>.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        #SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            SERVICE <{{tierARemotingAgent}}/repositories/prognosis> {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?affectedAssembly;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?kmLeft; \n                    cx-lifetime:remainingTime ?daysLeft.\n            \n            } # SUPPLIER#Prognosis context\n        \n        #} # SUPPLIER context\n\n    #} # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Lifetime",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:Lifetime"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Beer Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Skill.                                   #\n##############################################################################################\n\nSELECT ?neg ?preposition ?pronoun ?adj ?object WHERE {\n\n    BIND(\"Not\"^^xsd:string as ?neg).\n    BIND(\"in\"^^xsd:string as ?preposition).\n    BIND(\"your\"^^xsd:string as ?pronoun).\n    BIND(\"wildest\"^^xsd:string as ?adj).\n    BIND(\"dreams!\"^^xsd:string as ?object).\n    \n} ",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fconsumer%3DBeerSearch&distributionMode=CONSUMER&isFederated=true",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fconsumer%3DBeerSearch"
														},
														{
															"key": "distributionMode",
															"value": "CONSUMER"
														},
														{
															"key": "isFederated",
															"value": "true"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Troublecode Search Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"@vin\"^^xsd:string \"@problemArea\"^^xsd:string \"@minVersion\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    #SERVICE <{{oemProviderAgent}}/sparql> {\n    SERVICE ?oemConnector {\n        GRAPH ?diagnoseAsset {\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:TroubleCodeSearch",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:TroubleCodeSearch"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Material Incident Search Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n######\n# Sample \"Material Incident\" Search Skill \n# An incident has\n# - a description of the target material\n# - a geographical region (as a spatial segment)\n# The skill produces\n# - incident site(s) and source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?incidentSite ?problemPart ?problemPartName ?product ?productName ?vendor ?lat ?lon  ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 ?partName ?part WHERE {\n\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \n      (\"@material\"^^xsd:string \"@latmin\"^^xsd:double \"@latmax\"^^xsd:double \"@lonmin\"^^xsd:double \"@lonmax\"^^xsd:double) \n  }\n\n  ## Look for production sites in the region\n  ## using the BPNM/Golden Record Catalogue\n  ?incidentSite cx:hasGeoInformation [\n      cx:hasLatitude ?lat;\n      cx:hasLongitude ?lon\n  ].\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?incidentSite;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?incidentSite.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?problemPart.\n      ?problemPart cx:partName ?problemPartName;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?problemPart cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?part5.\n          ?part5 cx:partName ?part5Name;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  BIND(COALESCE(?part5,?part4,?part3,?problemPart) as ?product)\n  BIND(COALESCE(?part5Name,?part4Name,?part3Name,?problemPartName) as ?productName)\n  BIND(COALESCE(?site5,?site4,?site3,?site2) as ?productSite)\n\n  ?vendor cx:hasSite ?productSite.\n\n  OPTIONAL {\n      ?site2 cx:hasGeoInformation [\n      cx:hasLatitude ?lat2;\n      cx:hasLongitude ?lon2\n    ].\n  }\n  \n  OPTIONAL {\n   ?site3 cx:hasGeoInformation [\n      cx:hasLatitude ?lat3;\n      cx:hasLongitude ?lon3\n   ].\n  }\n\n  OPTIONAL {\n    ?site4 cx:hasGeoInformation [\n      cx:hasLatitude ?lat4;\n      cx:hasLongitude ?lon4\n    ].\n  }\n  \n  OPTIONAL {\n    ?productSite cx:hasGeoInformation [\n      cx:hasLatitude ?lat5;\n      cx:hasLongitude ?lon5\n    ].\n  }\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:MaterialIncidentSearch",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:MaterialIncidentSearch"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Material Site Trace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX bpns: <bpn:site:>\n\n######\n# Sample \"Material Site\" Trace Skill \n# An trace incident has\n# - a description of the target material\n# - a bpns number\n# The skill produces\n# - source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 WHERE {\n\n  VALUES (?material ?site) { \n      (\"@material\"^^xsd:string bpns:@site) \n  }\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?product.\n          ?product cx:partName ?productName;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  ?vendor cx:hasSite ?site5.\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:MaterialSiteTrace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:MaterialSiteTrace"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Site Trace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX bpns: <bpn:site:>\n\n######\n# Sample \"Site\" Trace Skill \n# An trace incident has\n# - a bpns number\n# The skill produces\n# - source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 WHERE {\n\n  VALUES (?site) { \n      (bpns:@site) \n  }\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       \n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?product.\n          ?product cx:partName ?productName;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  ?vendor cx:hasSite ?site5.\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:SiteTrace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:SiteTrace"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Product Trace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n###############################\n# Recursive Product Trace Skill\n# Input: \n#  currentSite    - IRI to a business site\n#  currentProduct - IRI to an affected product (produced by site currentSite)  \n#  currentDepth   - integer indicating the start depth \n#  maxDepth       - integer indicating the max depth to search for (counted from startDepth on)\n#  binding        - technical variable can always be set to 0\n# Output:\n#  affectedDepth. - The depth at which an affected end product has been detected\n#  affectedSite.  - The site which produces the affected end product \n#  binding        - technical output is equal to input @binding\n###############################\n\nSELECT DISTINCT ?binding ?affectedDepth ?affectedSite WHERE {\n\n  # Input parameter binding\n  VALUES (?currentSite ?currentProduct ?currentDepth ?maxDepth ?binding) { \n      (<@currentSite> <@currentProduct> \"@currentDepth\"^^xsd:integer \"@maxDepth\"^^xsd:integer \"@binding\")\n  }.\n\n  # End recursion below watermark  \n  FILTER(?maxDepth >= 0).\n\n  # Lookup the Traceability-As-Planned Graph/Asset of the relevant business partner\n  ?incidentOrga cx:hasSite ?currentSite;\n                cx:hasConnector ?connectorUrl.\n\n  # Call the TAP GrapH\n  SERVICE ?connectorUrl {\n      ?currentProduct rdf:type cx:Part.\n\n      # If this is not end product, we find a consuming site/assembly\n      OPTIONAL {\n          ?currentProduct cx:isPartOf ?assembly.\n          ?assembly cx:isProducedBy ?site2.\n      }\n  }\n\n  # Case disctinction\n  {\n     # The actual recursive call invokes this skill for all parent assemblies and moves the depth bounds\n     FILTER(?maxDepth >= 1).\n     FILTER(BOUND(?site2)).\n     BIND(?maxDepth-1 AS ?nextDepth).\n     BIND(?currentDepth+1 AS ?nextCurrentDepth).\n\n     # Doe the actual recusion binding\n     SERVICE <{{consumerAgentPlaneInternal}}/api/agent?asset=urn:cx:Skill:consumer:ProductTrace> {\n        BIND(?site2 AS ?currentSite).\n        BIND(?nextDepth AS ?maxDepth).\n        BIND(?nextCurrentDepth AS ?currentDepth).\n        BIND(?assembly AS ?currentProduct).\n     }.\n   } UNION {\n       # The recursion ends at final products with no B2B consumers\n       FILTER(!BOUND(?site2)).\n       BIND(?currentDepth AS ?affectedDepth).\n       BIND(?currentSite AS ?affectedSite).\n   }\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:ProductTrace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:ProductTrace"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Material Trace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n###############################\n# Material Trace Skill Backed by the Product Trace Skill\n# Input: \n#  incidentSite    - IRI to an incident business site\n#  incidentMaterial- name of an affected material\n#. maxDepth        - maximal search depth   \n# Output:\n#  affectedDepth. - The depth at which an affected end product has been detected\n#  affectedSite.  - The site which produces the affected end product \n###############################\n\nSELECT DISTINCT ?affectedDepth ?affectedSite WHERE {\n\n  # Input parameter binding\n  VALUES (?incidentSite ?incidentMaterial ?maxDepth) { \n      (<@incidentSite> \"@incidentMaterial\"^^xsd:string \"@maxDepth\"^^xsd:integer)\n  }.\n\n  # Exclude unplausible input  \n  FILTER(?maxDepth >= 0).\n\n  # Lookup the Traceability-As-Planned Graph/Asset of the relevant business partner\n  ?incidentOrga cx:hasSite ?incidentSite;\n                cx:hasConnector ?connectorUrl.\n\n  # Call the TAP GrapH\n  SERVICE ?connectorUrl {\n      ?incidentProduct rdf:type cx:Part;\n                    cx:partName ?partName;\n                cx:isProducedBy ?incidentSite.\n\n      FILTER( CONTAINS(?partName, ?incidentMaterial)).\n\n      # If this is not end product, we find a consuming site/assembly\n      OPTIONAL {\n          ?incidentProduct cx:isPartOf ?assembly.\n          ?assembly cx:isProducedBy ?site2.\n      }\n  }\n\n  # Case disctinction\n  {\n     # The actual recursive call invokes this skill for all parent assemblies and moves the depth bounds\n     FILTER(BOUND(?site2)).\n     FILTER(?maxDepth >= 1).\n\n     # Invoke the (recursive) product trace skill\n     SERVICE <{{consumerAgentPlaneInternal}}/api/agent?asset=urn:cx:Skill:consumer:ProductTrace> {\n        BIND(?maxDepth AS ?maxDepth).\n        BIND(?site2 AS ?currentSite).\n        BIND(?assembly AS ?currentProduct).\n        BIND(\"1\"^^xsd:integer AS ?currentDepth).\n     }.\n   } UNION {\n       # The recursion ends at final products with no B2B consumers\n       FILTER(!BOUND(?site2)).\n       BIND(\"0\"^^xsd:integer AS ?affectedDepth).\n       BIND(?incidentSite AS ?affectedSite).\n   }\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:MaterialTrace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:MaterialTrace"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Material Taxonomy Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX skos: <http://www.w3.org/2004/02/skos/core#> \n\nSELECT ?material ?materialName ?isLeaf WHERE {\n    VALUES (?parentMaterial ?lang) { \n        (<@parentMaterial> \"@lang\"^^xsd:string) \n    }\n    OPTIONAL {\n        ?material rdfs:subClassOf ?parentMaterial.\n        BIND(\"false\"^^xsd:boolean AS ?isLeaf).\n    }\n    OPTIONAL {\n        ?material rdf:type ?parentMaterial.         \n        BIND(\"true\"^^xsd:boolean AS ?isLeaf).\n    }\n\n    ?material skos:prefLabel ?materialName.\n    FILTER langMatches( lang(?materialName), ?lang )\n}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:MaterialTaxonomy",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:MaterialTaxonomy"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Upload Local Asset (TTL)",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "text/turtle"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#################################################################\n# Graph Asset in TTL/RDF/OWL FORMAT\n# See copyright notice in the top folder\n# See authors file in the top folder\n# See license file in the top folder\n#################################################################\n\n@prefix : <GraphAsset?consumer=Upload> .\n@prefix cx-core: <https://w3id.org/catenax/ontology/core#> .\n@prefix cx-common: <https://w3id.org/catenax/ontology/common#> .\n@prefix cx-supply: <https://w3id.org/catenax/ontology/supply-chain#> .\n@prefix cx-mat: <https://w3id.org/catenax/taxonomy/material#> .\n@prefix bpnl: <urn:bpn:legal:> .\n@prefix bpns: <urn:bpn:site:> .\n@prefix bpna: <urn:bpn:address:> .\n@prefix bpnl: <urn:bpn:legal:> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n@prefix skos: <http://www.w3.org/2004/02/skos/core#> .\n@prefix dc: <http://purl.org/dc/elements/1.1/> .\n\n:Chain1 rdf:type cx-supply:SupplyRelationship;\n        cx-supply:material cx-mat:Rubber;\n        cx-supply:consumer bpna:BPNL00000003COJN;\n        cx-supply:supplier bpns:BPNL00000003CPIY.\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/graph?asset=GraphAsset%3Fconsumer%3DUpload&contract=Contract%3Fconsumer%3DGraph&description=An uploaded graph asset&version=1.10.3-SNAPSHOT&isDefinedBy=%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fsupply-chain%3E%2C%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Ftaxonomy%2Fmaterial%3E&isFederated=true&shapesGraph=%40prefix%20%3A%20%3CGraphAsset%3Fconsumer%3DUpload%23%3E%20.",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"graph"
													],
													"query": [
														{
															"key": "asset",
															"value": "GraphAsset%3Fconsumer%3DUpload"
														},
														{
															"key": "contract",
															"value": "Contract%3Fconsumer%3DGraph"
														},
														{
															"key": "description",
															"value": "An uploaded graph asset"
														},
														{
															"key": "version",
															"value": "1.10.3-SNAPSHOT"
														},
														{
															"key": "isDefinedBy",
															"value": "%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fsupply-chain%3E%2C%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Ftaxonomy%2Fmaterial%3E"
														},
														{
															"key": "isFederated",
															"value": "true"
														},
														{
															"key": "shapesGraph",
															"value": "%40prefix%20%3A%20%3CGraphAsset%3Fconsumer%3DUpload%23%3E%20."
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Upload Local Asset (CSV)",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "text/csv"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "IRI,http://www.w3.org/1999/02/22-rdf-syntax-ns#type,https://w3id.org/catenax/ontology/supply-chain#material,https://w3id.org/catenax/ontology/supply-chain#consumer,https://w3id.org/catenax/ontology/supply-chain#supplier\n:Chain1,<https://w3id.org/catenax/ontology/supply-chain#SupplyRelationship>,<https://w3id.org/catenax/taxonomy/material#Rubber>,<urn:bpn:address:BPNL00000003COJN>,<urn:bpn:site:BPNL00000003CPIY>\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/graph?asset=GraphAsset%3Fconsumer%3DUpload&contract=Contract%3Fconsumer%3DGraph&description=An uploaded graph asset&version=1.10.3-SNAPSHOT&isDefinedBy=%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fsupply-chain%3E%2C%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Ftaxonomy%2Fmaterial%3E&isFederated=true&shapesGraph=%40prefix%20%3A%20%3CGraphAsset%3Fconsumer%3DConforming%23%3E%20.&separator=,",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"graph"
													],
													"query": [
														{
															"key": "asset",
															"value": "GraphAsset%3Fconsumer%3DUpload"
														},
														{
															"key": "contract",
															"value": "Contract%3Fconsumer%3DGraph"
														},
														{
															"key": "description",
															"value": "An uploaded graph asset"
														},
														{
															"key": "version",
															"value": "1.10.3-SNAPSHOT"
														},
														{
															"key": "isDefinedBy",
															"value": "%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fsupply-chain%3E%2C%3Chttps%3A%2F%2Fw3id.org%2Fcatenax%2Ftaxonomy%2Fmaterial%3E"
														},
														{
															"key": "isFederated",
															"value": "true"
														},
														{
															"key": "shapesGraph",
															"value": "%40prefix%20%3A%20%3CGraphAsset%3Fconsumer%3DConforming%23%3E%20."
														},
														{
															"key": "separator",
															"value": ","
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Create Business Partner Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\"\n  },\n  \"@id\": \"tx:BPN000001234\",\n  \"tx:groups\": [\n    \"greek\",\n    \"supplier\",\n    \"philosopher\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/business-partner-groups",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"business-partner-groups"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Update Business Partner Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"@context\": {\n    \"tx\": \"https://w3id.org/tractusx/v0.0.1/ns/\"\n  },\n  \"@id\": \"tx:BPN000001234\",\n  \"tx:groups\": [\n    \"greek\",\n    \"supplier\",\n    \"philosopher\",\n    \"villain\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/business-partner-groups",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"business-partner-groups"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Show Business Partner Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{consumerEdcControl}}/management/business-partner-groups/:bpn",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"business-partner-groups",
														":bpn"
													],
													"variable": [
														{
															"key": "bpn",
															"value": "https%3A%2F%2Fw3id.org%2Ftractusx%2Fv0.0.1%2Fns%2FBPN000001234"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Delete Business Partner Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200,204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{consumerEdcControl}}/management/business-partner-groups/:bpn",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"business-partner-groups",
														":bpn"
													],
													"variable": [
														{
															"key": "bpn",
															"value": "https%3A%2F%2Fw3id.org%2Ftractusx%2Fv0.0.1%2Fns%2FBPN000001234"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Create RUL Skill KA DEV + ZF",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\n################################################################\n# E2E Test Skill to be registered an called from the consumer\n# Uses KA DEV OEM as the prime target which then delegates to\n# ZF as a supplier\n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly \n                ?supplier ?operatingTime ?mileage \n                ?recordDate ?distanceKm ?timeHours \nWHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"@van\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES ( ?ls_type) { \n      (\"GearOil\"^^xsd:string) \n  }\n\n  SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {  \n    GRAPH <GraphAsset?oem=BehaviourTwinReliability> {  \n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n    } # OEM#PROVISIONING\n\n    SERVICE <edcs://bt-edc-ka-ocp0900009.apps.c7von4sy.westeurope.aroapp.io> {\n      GRAPH <GraphAsset?supplier=BehaviourTwinRUL3> {\n\n        ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm.\n      } #SUPPLIER#REMOTING\n    } # SUPPLIER#CATALOG\n  } # OEM#CATALOG\n\n} \n"
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fconsumer%3DRemainingUsefulLifeE2E&distributionMode=CONSUMER",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLifeE2E"
														},
														{
															"key": "distributionMode",
															"value": "CONSUMER"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Debug State and Transfer",
									"item": [
										{
											"name": "Check Control Probe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check was successful\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
															"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
															"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
															"    pm.response.json().componentResults.map( function(component) {",
															"        pm.expect(component).to.have.property(\"isHealthy\",true);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{consumerEdcApi}}/api/check/:stage",
													"host": [
														"{{consumerEdcApi}}"
													],
													"path": [
														"api",
														"check",
														":stage"
													],
													"variable": [
														{
															"key": "stage",
															"value": "startup",
															"description": "You may choose startup, readiness or liveness"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Data Probe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check was successful\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
															"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
															"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
															"    pm.response.json().componentResults.map( function(component) {",
															"        pm.expect(component).to.have.property(\"isHealthy\",true);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{consumerAgentPlane}}/api/check/:stage",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"check",
														":stage"
													],
													"variable": [
														{
															"key": "stage",
															"value": "startup",
															"description": "You may choose startup, readiness or liveness"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Skill Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{consumerEdcControl}}/management/v3/assets/:asset",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets",
														":asset"
													],
													"variable": [
														{
															"key": "asset",
															"value": "SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote"
														}
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "List Assets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gte(0);",
															"    pm.response.json().map(function(asset) {",
															"        pm.expect(asset).to.have.property(\"properties\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
															"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
															"        contenttypes.map(function(contenttype) {",
															"            var contenttypespec=contenttype.split(\";\");",
															"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {\n        \"@vocab \": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"offset\": 0,\n    \"limit\": 10,\n    \"sort\": \"DESC\",\n    \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"filterExpression\": [\n     {\n                \"operandLeft\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\n                \"operator\":\"=\",\n                \"operandRight\":\"cx-common:SkillAsset\"\n     }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v3/assets/request",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v3",
														"assets",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the assets."
											},
											"response": []
										},
										{
											"name": "List Policies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Asset listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.length.gte(0);",
															"    pm.response.json().map(function(policy) {",
															"        pm.expect(policy).to.have.property(\"uid\");",
															"        pm.expect(policy).to.have.property(\"permissions\");",
															"        pm.expect(policy.permissions).to.have.length.gte(0);",
															"        policy.permissions.map(function(permission) {",
															"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
															"            pm.expect(permission).to.have.property(\"target\");",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/policydefinitions/request",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"policydefinitions",
														"request"
													]
												},
												"description": "Uses the datamanagement API to get an (internal) list of the policies."
											},
											"response": []
										},
										{
											"name": "Show (Own) Catalogue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Catalogue listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.property(\"id\");",
															"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
															"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
															"    pm.response.json().contractOffers.map(function(contractOffer) {",
															"        pm.expect(contractOffer).to.have.property(\"id\");",
															"        pm.expect(contractOffer).to.have.property(\"policy\");",
															"        pm.expect(contractOffer).to.have.property(\"asset\");",
															"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
															"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {},\n    \"protocol\": \"dataspace-protocol-http\",\n    \"counterPartyAddress\": \"{{consumerEdcIds}}/api/v1/dsp\",\n    \"counterPartyId\": \"{{consumerBPNL}}\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}"
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/catalog/request",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"catalog",
														"request"
													]
												},
												"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
											},
											"response": []
										},
										{
											"name": "Show (Remote) Catalogue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Catalogue listing was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([200]);",
															"    pm.expect(pm.response.json()).to.have.property(\"id\");",
															"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
															"    var contractOffer  = pm.response.json().contractOffers;",
															"    if(Array.isArray(contractOffer)) {",
															"        contractOffer=contractOffer[0];",
															"    }",
															"    pm.expect(contractOffer).to.have.property(\"id\");",
															"    pm.expect(contractOffer).to.have.property(\"policy\");",
															"    pm.expect(contractOffer).to.have.property(\"asset\");",
															"    pm.expect(contractOffer.asset).to.have.property(\"properties\");",
															"    pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
															"    pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
															"    pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"@context\": {},\n    \"protocol\": \"dataspace-protocol-http\",\n    \"counterPartyAddress\": \"{{oemEdcIds}}/api/v1/dsp\",\n    \"counterPartyId\": \"{{oemBPNL}}\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             },\n             {\n                \"operandLeft\": \"https://purl.org/dc/terms/type\",\n                \"operator\":\"=\",\n                \"operandRight\":\"cx-taxo:GraphAsset\"\n             }\n         ]\n    }\n}"
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/catalog/request",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"catalog",
														"request"
													]
												},
												"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
											},
											"response": []
										},
										{
											"name": "Delete Local Asset",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "text/turtle"
													}
												],
												"url": {
													"raw": "{{consumerAgentPlane}}/api/graph?asset=GraphAsset%3Fconsumer%3DUpload",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"graph"
													],
													"query": [
														{
															"key": "asset",
															"value": "GraphAsset%3Fconsumer%3DUpload"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Check EDRs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{consumerEdcControl}}/management/edrs?assetId=GraphAsset%3Foem%3DConforming",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "GraphAsset%3Foem%3DConforming"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Lookup EDR",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Body matches string\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"NEGOTIATION_ID\", jsonData.id);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"url": {
													"raw": "{{consumerEdcControl}}/management/edrs/:transferprocess",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"edrs",
														":transferprocess"
													],
													"variable": [
														{
															"key": "transferprocess",
															"value": "71fb0163-027f-4357-9ab2-56564e1e4880"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiate Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Body matches string\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"NEGOTIATION_ID\", jsonData.id);",
															"",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"@type\": \"https://w3id.org/edc/v0.0.1/ns/ContractRequest\",\n    \"counterPartyAddress\": \"{{oemEdcIds}}/api/v1/dsp\",\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerId\": \"{{oemBNL}}\",\n    \"policy\": {\n            \"@id\": \"Q29udHJhY3Q/b2VtPUdyYXBo:Y3gtdGF4bzpHcmFwaEFzc2V0P29lbT1CZWhhdmlvdXJUd2luUmVsaWFiaWxpdHk=:MGU3OWFjZTEtNzlkMC00ZTc4LTgzNGQtYTFmZDMyOGM3YmY5\",\n            \"@type\": \"odrl:Offer\",\n            \"odrl:permission\": {\n                \"odrl:action\": {\n                    \"@id\": \"edc:USE\"\n                },\n                \"odrl:constraint\": {\n                    \"odrl:or\": [\n                        {\n                            \"odrl:leftOperand\": {\n                                \"@id\": \"edc:BusinessPartnerNumber\"\n                            },\n                            \"odrl:operator\": {\n                                \"@id\": \"odrl:eq\"\n                            },\n                            \"odrl:rightOperand\": \"BPNL000000000SM0\"\n                        },\n                        {\n                            \"odrl:leftOperand\": {\n                                \"@id\": \"edc:BusinessPartnerNumber\"\n                            },\n                            \"odrl:operator\": {\n                                \"@id\": \"odrl:eq\"\n                            },\n                            \"odrl:rightOperand\": \"BPNL000000000TLB\"\n                        },\n                        {\n                            \"odrl:leftOperand\": {\n                                \"@id\": \"edc:BusinessPartnerNumber\"\n                            },\n                            \"odrl:operator\": {\n                                \"@id\": \"odrl:eq\"\n                            },\n                            \"odrl:rightOperand\": \"BPNL000000000VJX\"\n                        },\n                        {\n                            \"odrl:leftOperand\": {\n                                \"@id\": \"edc:BusinessPartnerNumber\"\n                            },\n                            \"odrl:operator\": {\n                                \"@id\": \"odrl:eq\"\n                            },\n                            \"odrl:rightOperand\": \"BPNL00000002HCQ9\"\n                        }\n                    ]\n                }\n            },\n            \"odrl:prohibition\": [],\n            \"odrl:obligation\": []\n        }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/management/v2/contractnegotiations",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"management",
														"v2",
														"contractnegotiations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Dataplane availability",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8603/api/signaling/v1/dataflows/check",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8603",
													"path": [
														"api",
														"signaling",
														"v1",
														"dataflows",
														"check"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Perform a Consumer-Local SparQL",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/sparql-results+json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/sparql-results+xml"
											}
										],
										"url": {
											"raw": "{{consumerMatchmakingAgent}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{consumerMatchmakingAgent}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Consumer-Local SparQL Against Local Graph",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/sparql-results+json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/sparql-results+xml"
											},
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object \nWHERE { \n    GRAPH <GraphAsset?consumer=Upload> {\n            ?subject ?predicate ?object.\n    }\n}"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Remote SparQL over the Dataspace",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100"
										},
										"url": {
											"raw": "{{consumerMatchmakingAgent}}/api/agent?asset={{oemEdcIds}}%23GraphAsset?oem=Conforming",
											"host": [
												"{{consumerMatchmakingAgent}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23GraphAsset?oem=Conforming"
												},
												{
													"key": "asset",
													"value": "{{tieraEdcIds}}%23GraphAsset?supplier=Conforming",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Double Remote SparQL over the Dataspace",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100&asset={{oemEdcIds}}%23GraphAsset?oem=Diagnosis2022",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100"
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}#GraphAsset?oem=Diagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Non-Allowed Double Remote SparQL over the Dataspace",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT * { SERVICE <http://ifconfig.me> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }&asset={{oemEdcIds}}%23GraphAsset?oem=Diagnosis2022",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT * { SERVICE <http://ifconfig.me> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }"
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23GraphAsset?oem=Diagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Dataspace Query",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?connector ?asset \n       ?name\n       (MIN(?adescription) AS ?description) \n        (MAX(?aversion) AS ?version) \n       (GROUP_CONCAT(DISTINCT ?acontentType;SEPARATOR=\",\") AS ?contentType) \n       ?protocol\n       (CONCAT(\"<\",GROUP_CONCAT(?aontology;SEPARATOR=\">,<\"),\">\") AS ?isDefinedBy) \n       (MIN(?ashape) AS ?shape)\n WHERE { \n     ?connector <https://w3id.org/catenax/ontology/common#offers> ?asset. \n     ?asset <https://w3id.org/catenax/ontology/common#contenttype> ?acontentType; \n            <https://w3id.org/catenax/ontology/common#name> ?name; \n            <https://purl.org/dc/terms/type> ?type; \n            <https://w3id.org/catenax/ontology/common#version> ?aversion; \n            <https://w3id.org/catenax/ontology/common#description> ?adescription;\n\t\t\t\t\t\t<https://w3id.org/catenax/ontology/common#implementsProtocol> ?protocol. \n\n    OPTIONAL {\n        ?asset <http://www.w3.org/2000/01/rdf-schema#isDefinedBy> ?aontology; \n               <http://www.w3.org/ns/shacl#shapesGraph> ?ashape\n    }\n} GROUP BY ?connector ?asset ?name ?type ?protocol"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Data)",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"WBAAL31029PZ00001\"^^xsd:string \"Getriebe\"^^xsd:string \"0\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    #?oemConnector cx:offersAsset ?diagnoseAsset.\n    #?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n    #               rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    SERVICE ?oemConnector {\n        GRAPH <urn:cx:Graph:oem:Diagnosis2022> {\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Function)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?invocation ?distance ?time\nWHERE { \n    GRAPH <urn:cx:Graph:tierA:LifetimeGearbox> {\n        ?invocation a cx-lifetime:LifetimePrognosis;\n              cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^json:Object; \n              cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^json:Object; \n              cx-lifetime:loadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^json:Object; \n              cx-lifetime:loadCollectiveComponent \"GearOil\"^^xsd:string; \n              cx-lifetime:loadCollectiveMileage \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^json:Object; \n              cx-lifetime:loadCollectiveRegistrationDate \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^json:Object; \n              cx-lifetime:remainingDistance ?distance; \n              cx-lifetime:remainingTime ?time.\n    }\n}"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=https://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:LifetimeGearbox",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:LifetimeGearbox",
													"description": "Dataspace Asset",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http://tiera-control-plane:8282%23urn:cx:Graph:tierA:LifetimeGearbox",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:LifetimeGearbox"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Batch Function)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\n\nSELECT ?invocation ?healthValues\nWHERE { \n    GRAPH <urn:cx:Graph:tierA:HealthIndicatorGearbox> {\n        ?invocation a cx-health:HealthIndication;\n                      cx-health:requestComponentId <urn:cx:AnonymousSerializedPart#GB4711>;\n                      cx-health:classifiedLoadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^json:Object; \n                      cx-health:classifiedLoadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^json:Object; \n                      cx-health:classifiedLoadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^json:Object; \n                      cx-health:adaptionValueVersion \"VER_AV_001\"^^xsd:string; \n                      cx-health:adaptionValueTimestamp \"2022-10-12T08:17:18.734Z\"^^xsd:dateTime;\n                      cx-health:adaptionValueMileage \"82563.02\"^^xsd:double; \n                      cx-health:adaptionValueOperatingTime \"45667765\"^^xsd:long;\n                      cx-health:adaptionValueList \"[ 0.543534, 0.543535, 0.543536, 0.543537 ]\"^^json:Object;\n                      cx-health:indicatorVersion ?iversion;\n                      cx-health:responseComponentId ?component;\n                      cx-health:healthIndicatorValues ?healthValues.    \n    }\n}"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=http://tiera-control-plane:8282%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
													"description": "Dataspace Asset",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http://tiera-control-plane:8282%23urn:cx:Graph:tierA:HealthIndicatorGearbox"
												},
												{
													"key": "asset",
													"value": "https://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Federated SparQL (Shortcut Over Backends)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT  ?van ?description ?serializedPartName ?distance ?time ?vin ?troubleCode ?telematicsDetail WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"WBAAL31029PZ00001\"^^xsd:string \"P0745\"^^xsd:string) }.\n    \n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        GRAPH ?diagnoseAsset {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?description.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?serializedPartName;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\n        ?prognosisAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/prognosis_ontology.ttl>.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?prognosisAsset {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?distance; \n                    cx-lifetime:remainingTime ?time.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Federated SparQL (over Dataspace)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?vin ?van ?troubleCode ?description ?serializedPartName ?distance ?time WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"WBAAL31029PZ00001\"^^xsd:string \"P0745\"^^xsd:string) }.\n\n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        GRAPH ?diagnoseAsset {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?description.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?serializedPartName;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\n        ?prognosisAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/prognosis_ontology.ttl>.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?prognosisAsset {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?distance; \n                    cx-lifetime:remainingTime ?time.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Federated Batch SparQL (over Dataspace)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX json:          <https://json-schema.org/draft/2020-12/schema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#                            \"Health Indicator Prognosis\"                                    #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - HI Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?vin ?van ?indicatorComponentId ?health WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?partType) { (\"WBAAL31029PZ00002\"^^xsd:string \"clutch\"^^xsd:string) }.\n\n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdfs:isDefinedBy \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/diagnosis_ontology.ttl>\"^^xsd:string.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n        GRAPH ?diagnoseAsset {    \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.2 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileage ?mileage;\n             cx-telematics:operatingTime ?operatingTime;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:whenRecorded ?recordedTime;\n                          cx-diag:hasAdaptionValues ?adaptionValues;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.3 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?healthAsset.\n        ?healthAsset rdfs:isDefinedBy \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl>\"^^xsd:string.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasAdaptionVersion ?adaptionVersion;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?healthAsset {\n                ?invocation rdf:type cx-health:HealthIndication;\n                                     cx-health:requestComponentId ?serializedPart;\n                                     cx-health:classifiedLoadCollectiveFile ?loadSpectrumFile;\n                                     cx-health:classifiedLoadCollectiveHeader ?loadSpectrumHeader;\n                                     cx-health:classifiedLoadCollectiveBody ?loadSpectrum;\n                                     cx-health:adaptionValueVersion ?adaptionVersion; \n                                     cx-health:adaptionValueTimestamp ?recordedTime;\n                                     cx-health:adaptionValueMileage ?mileage; \n                                     cx-health:adaptionValueOperatingTime ?operatingTime;\n                                     cx-health:adaptionValueList ?adaptionValues;\n                                     cx-health:indicatorVersion ?indicatorVersion;\n                                     cx-health:responseComponentId ?indicatorComponentId;\n                                     cx-health:healthIndicatorValues ?health.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n} \n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Supply Chain Trace",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?vin ?van ?troubleCode ?oemConnector ?diagnoseAsset WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n    \n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    SERVICE ?oemConnector {\n        VALUES(?van) { str(?vin) }.\n    }\n\n   # now we do reporting/operationalising on the CONSUMER side\n} \n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?(vin=WBAAL31029PZ00001)&(vin=WBAAL31029PZ00002)&troubleCode=P0746",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00001)"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00002)"
												},
												{
													"key": "troubleCode",
													"value": "P0746"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Show Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Health",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Health"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill."
									},
									"response": []
								},
								{
									"name": "Execute Dataspace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/sparql-results+xml"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=SkillAsset%3Foem%3DDataspace",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Foem%3DDataspace"
												},
												{
													"key": "()",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Register Lifetime Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - Federated Data Catalogue containing common (dataspace, business parterners, wmi),        #\n#     and domain ontologies.                                                                 #\n# - A Graph Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                    #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Graph Contract Offering from SUPPLIER (e.g. ZF) to OEM                                 #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?van ?troubleCode ?description ?affectedPart ?distanceKm ?timeDays ?vin WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n    \n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?telematicsAsset.\n    ?telematicsAsset rdf:type cx:GraphAsset;\n                     rdfs:isDefinedBy cx-telematics:Ontology.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 For each subordinate GRAPH, an asset negotiation between CONSUMER and OEM will occur\n        ####\n        GRAPH ?telematicsAsset {\n\n           ####\n           # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n           #     and gets some master data with it \n           ####\n           ?van cx:isAnonymousVehicle ?vin;\n                cx:hasRegistration ?registration.\n\n           ####\n           # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n           ####\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-telematics:Code ?troubleCode;\n                cx-telematics:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-telematics:Description ?description.\n        \n            ####\n            # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n            #     focussed to the problematic partType (Telematics Graph) \n            ####\n            ?van cx-telematics:latestMileageReceived ?mileage;\n                 cx-telematics:latestDetailReceived ?telematicsDetail.\n            ?telematicsDetail cx-telematics:hasPartType ?partType;\n                            cx-telematics:hasLoadSpectrum ?loadSpectrum.\n\n            ####\n            # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n            #     and the supplier address in the dataspace\n            ####\n            ?serializedPart cx:isComponentOf+ ?van;\n                            cx:hasPartType ?partType;\n                            cx:hasName ?affectedPart;\n                            cx:hasSupplier [\n                                cx:hasConnector ?tieraConnector\n                            ].           \n        } # Leave the OEM#Telematics context (back to the Federated Data Catalogue of the OEM)\n\n        ####\n        # 3.5 The OEM looks up the connector and contract offers \n        ####\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\n        ?prognosisAsset rdf:type cx:GraphAsset; rdfs:isDefinedBy cx-lifetime:Ontology.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n            GRAPH ?prognosisAsset {\n\n                ####\n                # 4.1 The SUPPLIER adds additional measurement information\n                ####\n                ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                                  cx-telematics:hasHeader ?loadSpectrumHeader.\n\n                ####\n                # 4.2 and invokes a prognosis model associated the part type using the load-spectrum data\n                ####\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?affectedPart;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?distanceKm; \n                    cx-lifetime:remainingTime ?timeDays.\n            \n            } # SUPPLIER#Prognosis context -> back to FDC of SUPPLIER\n        \n        } # SUPPLIER context -> back to FDC of OEM\n\n    } # OEM context -> back to FDC of CONSUMER\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Lifetime",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
									},
									"response": []
								},
								{
									"name": "Execute Lifetime Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:Lifetime&(vin=WBAAL31029PZ00001&troubleCode=P0746&troubleCode=P0745)&(vin=WBAAL31029PZ00002&troubleCode=P0744)&(vin=WBAAL31029PZ00003&troubleCode=P0743)",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00001"
												},
												{
													"key": "troubleCode",
													"value": "P0746"
												},
												{
													"key": "troubleCode",
													"value": "P0745)"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00002"
												},
												{
													"key": "troubleCode",
													"value": "P0744)"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00003"
												},
												{
													"key": "troubleCode",
													"value": "P0743)"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Lifetime Skill Post Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"vin\",\n            \"troubleCode\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00001\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0746\"\n                }\n            },\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00001\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0745\"\n                }\n            },\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00002\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0744\"\n                }\n            },\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00003\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0743\"\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:Lifetime",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute RUL Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?vin=FGPTXINYZAVJYK&vin=FVARQFZDICATNV&vin=VKKTXVZTRKRNSB&asset=SkillAsset%3Fconsumer%3DRemainingUsefulLifeDirect",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{skillProviderEdc}}%23SkillAsset%3Fremote%3DRemainingUsefulLife2",
													"disabled": true
												},
												{
													"key": "runMode",
													"value": "CONSUMER",
													"disabled": true
												},
												{
													"key": "vin",
													"value": "FNLQNRVCOFLHAQ",
													"disabled": true
												},
												{
													"key": "vin",
													"value": "FGPTXINYZAVJYK"
												},
												{
													"key": "vin",
													"value": "FKUBNDMDXQNFHI",
													"disabled": true
												},
												{
													"key": "vin",
													"value": "HHXDGSMSUTWFUO",
													"disabled": true
												},
												{
													"key": "vin",
													"value": "FVARQFZDICATNV"
												},
												{
													"key": "vin",
													"value": "VKKTXVZTRKRNSB"
												},
												{
													"key": "vin",
													"value": "HGWQDJCIGBSKXH",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLifeDirect"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute RUL Skill (EDC)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=SkillAsset%3Fconsumer%3DRemainingUsefulLife&van=FNLQNRVCOFLHAQ",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLife"
												},
												{
													"key": "van",
													"value": "FNLQNRVCOFLHAQ"
												},
												{
													"key": "van",
													"value": "FGPTXINYZAVJYK",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FKUBNDMDXQNFHI",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HHXDGSMSUTWFUO",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FVARQFZDICATNV",
													"disabled": true
												},
												{
													"key": "van",
													"value": "VKKTXVZTRKRNSB",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HGWQDJCIGBSKXH",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute Search Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:TroubleCodeSearch&(vin=WBAAL31029PZ00001&problemArea=Getriebe&minVersion=2)",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:TroubleCodeSearch"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00001"
												},
												{
													"key": "problemArea",
													"value": "Getriebe"
												},
												{
													"key": "minVersion",
													"value": "2)"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Post Federated Search (over Dataspace)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"WBAAL31029PZ00001\"^^xsd:string \"Getriebe\"^^xsd:string \"1\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    SERVICE ?oemConnector {\n        GRAPH ?diagnoseAsset {\n\n            ####\n            # the actual subselect carrying the FILTERs\n            ####\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?()=",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "()",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Material Incident Search",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n######\n# Sample \"Material Incident\" Search Skill \n# An incident has\n# - a description of the target material\n# - a geographical region (as a spatial segment)\n# The skill produces\n# - incident site(s) and source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\n\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \n      (\"Natural Rubber\"^^xsd:string \"7.5\"^^xsd:double \"8\"^^xsd:double \"98\"^^xsd:double \"98.5\"^^xsd:double) \n  }\n\n  ## Look for production sites in the region\n  ## using the BPNM/Golden Record Catalogue\n  ?site cx:hasGeoInformation [\n      cx:hasLatitude ?lat;\n      cx:hasLongitude ?lon\n  ].\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?part5.\n          ?part5 cx:partName ?part5Name;\n                 cx:isProducedBy ?site5.\n     }\n  }\n\n  BIND(COALESCE(?part5,?part4,?part3,?part2) as ?product)\n  BIND(COALESCE(?part5Name,?part4Name,?part3Name,?part2Name) as ?productName)\n  BIND(COALESCE(?site5,?site4,?site3,?site2) as ?productSite)\n\n  ?vendor cx:hasSite ?productSite.\n\n  ?site2 cx:hasGeoInformation [\n      cx:hasLatitude ?lat2;\n      cx:hasLongitude ?lon2\n  ].\n\n  ?site3 cx:hasGeoInformation [\n         cx:hasLatitude ?lat3;\n         cx:hasLongitude ?lon3\n  ].\n\n   ?site4 cx:hasGeoInformation [\n          cx:hasLatitude ?lat4;\n          cx:hasLongitude ?lon4\n   ].\n    \n    ?productSite cx:hasGeoInformation [\n                 cx:hasLatitude ?lat5;\n                 cx:hasLongitude ?lon5\n    ].\n  \n} \n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Material Site Trace",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX bpns: <bpn:site:>\n\n######\n# Sample \"Material Site\" Trace Skill \n# An trace incident has\n# - a description of the target material\n# - a bpns number\n# The skill produces\n# - source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 WHERE {\n\n  VALUES (?material ?site) { \n      (\"Cathode\"^^xsd:string bpns:BPNS00000003B0Q0) \n  }\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?product.\n          ?product cx:partName ?productName;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  ?vendor cx:hasSite ?site5.\n} \n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Execute Material Incident Search Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "X-Api-Key",
												"value": "bar"
											},
											{
												"key": "Referer",
												"value": "http://localhost:3000/"
											},
											{
												"key": "Origin",
												"value": "http://localhost:3000"
											},
											{
												"key": "Sec-Fetch-Dest",
												"value": "empty"
											},
											{
												"key": "Sec-Fetch-Mode",
												"value": "cors"
											},
											{
												"key": "Sec-Fetch-Site",
												"value": "same-site"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialIncidentSearch&material=Cathode&latmin=12.5&lonmin=13&latmax=74.5&lonmax=75",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialIncidentSearch"
												},
												{
													"key": "material",
													"value": "Cathode"
												},
												{
													"key": "latmin",
													"value": "12.5"
												},
												{
													"key": "lonmin",
													"value": "13"
												},
												{
													"key": "latmax",
													"value": "74.5"
												},
												{
													"key": "lonmax",
													"value": "75"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Material Incident Search Skill Variant",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialIncidentSearch&material=Natural Rubber&latmin=7.5&lonmin=98&latmax=8&lonmax=98.5",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialIncidentSearch"
												},
												{
													"key": "material",
													"value": "Natural Rubber"
												},
												{
													"key": "latmin",
													"value": "7.5"
												},
												{
													"key": "lonmin",
													"value": "98"
												},
												{
													"key": "latmax",
													"value": "8"
												},
												{
													"key": "lonmax",
													"value": "98.5"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Material Site Trace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialSiteTrace&material=Cathode&site=BPNS00000003B0Q0",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialSiteTrace"
												},
												{
													"key": "material",
													"value": "Cathode"
												},
												{
													"key": "site",
													"value": "BPNS00000003B0Q0"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Site Trace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:SiteTrace&site=BPNS00000003B0Q0",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:SiteTrace"
												},
												{
													"key": "site",
													"value": "BPNS00000003B0Q0"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Product Site Trace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:ProductTrace&binding=0&currentDepth=0&maxDepth=3&currentSite=bpn:site:BPNS000000000DQB&currentProduct=urn:uuid:5031bc82-b24a-4e49-9b88-dc27e93bebdc",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:ProductTrace"
												},
												{
													"key": "binding",
													"value": "0"
												},
												{
													"key": "currentDepth",
													"value": "0"
												},
												{
													"key": "maxDepth",
													"value": "3"
												},
												{
													"key": "currentSite",
													"value": "bpn:site:BPNS000000000DQB"
												},
												{
													"key": "currentProduct",
													"value": "urn:uuid:5031bc82-b24a-4e49-9b88-dc27e93bebdc"
												},
												{
													"key": "currentSite",
													"value": "bpn:site:BPNS0000000002XY",
													"disabled": true
												},
												{
													"key": "currentProduct",
													"value": "urn:uuid:0255ac81-6e0f-4dce-bbac-82d7bae91202",
													"disabled": true
												},
												{
													"key": "currentSite",
													"value": "bpn:site:BPNS0000000006V6",
													"disabled": true
												},
												{
													"key": "currentProduct",
													"value": "urn:uuid:4ee895b2-0778-43f4-87cf-c433d805e87f",
													"disabled": true
												},
												{
													"key": "currentSite",
													"value": "bpn:site:BPNS000004711DMY",
													"disabled": true
												},
												{
													"key": "currentProduct",
													"value": "urn:uuid:0733946c-59c6-41ae-9570-cb43a6e4c79e",
													"disabled": true
												},
												{
													"key": "currentSite",
													"value": "bpn:site:BPNS000000815DMY",
													"disabled": true
												},
												{
													"key": "currentProduct",
													"value": "urn:uuid:68904173-ad59-4a77-8412-3e73fcafbd8b",
													"disabled": true
												},
												{
													"key": "currentSite",
													"value": "bpn:site:BPNS000001111DMY",
													"disabled": true
												},
												{
													"key": "currentProduct",
													"value": "urn:uuid:65e1554e-e5cd-4560-bac1-1352582122fb",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Material Trace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialTrace&maxDepth=3&incidentSite=bpn:site:BPNS000000000DQB&incidentMaterial=Rubber",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialTrace"
												},
												{
													"key": "maxDepth",
													"value": "3"
												},
												{
													"key": "incidentSite",
													"value": "bpn:site:BPNS000000000DQB"
												},
												{
													"key": "incidentMaterial",
													"value": "Rubber"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Query Quality Endpoint/Asset Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect * where { \n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\n        GRAPH <urn:cx:Graph:oem:Quality> {\n        \tSELECT ?part WHERE {\n  \t\t\t\t?part rdf:type cx:Part\n\t\t\t} \n    \t}\n    }\n} limit 100 \n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Material Taxonomy",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\nSELECT ?child ?isInstance WHERE {\n    VALUES (?material) { \n        (cx:EngineeringMaterial) \n    }\n    OPTIONAL {\n        ?child rdfs:subClassOf ?material.\n        BIND(\"false\"^^xsd:boolean AS ?isInstance).\n    }\n    OPTIONAL {\n        ?child rdf:type ?material.\n        BIND(\"true\"^^xsd:boolean AS ?isInstance).\n    }\n}\n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialTaxonomy&lang=EN&parentMaterial=https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23EngineeringMaterial",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialTaxonomy"
												},
												{
													"key": "lang",
													"value": "EN"
												},
												{
													"key": "lang",
													"value": "DE",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23EngineeringMaterial"
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23MetalMaterial",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23Alloy",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23CathodeMaterial",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23PolymerMaterial",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23OrganicMaterial",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute (Optional Material) Trace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"maxDepth\",\n            \"incidentSite\",\n            \"incidentMaterial\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"maxDepth\": {\n                    \"type\": \"literal\",\n                    \"value\": \"3\"\n                },\n                \"incidentSite\": {\n                    \"type\": \"uri\",\n                    \"value\": \"bpn:site:BPNS000000000DQB\"\n                },\n                \"incidentMaterial\": {\n                    \"type\": \"literal\",\n                    \"value\": \"\"\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialTrace",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialTrace"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Query OEM CONF",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect * where { \n    SERVICE <{{oemProviderEdc}}> {\n        GRAPH <GraphAsset?oem=Conforming> {\n        \tSELECT * WHERE {\n  \t\t\t\t?subject rdf:type ?object\n\t\t\t} \n    \t}\n    }\n} limit 100 \n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "RUL Adaption Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?operatingTime ?mileage ?recordDate ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES ( ?ls_type) { \n      (<https://w3id.org/catenax/taxonomy#GearOil>) (<https://w3id.org/catenax/taxonomy#GearSet>) \n  }\n\n  SERVICE <{{oemProviderAgent5}}/sparql> {  \n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n  }\n\n  SERVICE <{{tierARemotingAgent}}/repositories/rul> {\n      SELECT ?timeHours ?distanceKm WHERE {\n        ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm.\n      }\n  } # SUPPLIER#CATALOG\n\n} \n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "RUL Adaption Copy 2",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl:             <http://www.w3.org/2002/07/owl#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n  }\n\n  ?oem cx-common:id \"{{oemBPNL}}\";\n       cx-common:hasConnector ?oemEDC.\n       \n  ?oemEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; cx-common:id ?reliabilityAssetId].\n\n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n     } # OEM#GRAPH\n\n    ?supplierPartner owl:sameAs ?supplier.\n    ?supplierPartner cx-common:hasConnector ?supplierEDC.\n    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n    SERVICE ?supplierEDC {\n        GRAPH ?prognosisAssetId {\n            SELECT ?distanceKm ?timeHours WHERE {\n                ?invocation a cx-behaviour:RemainingUsefulLife;\n                        cx-behaviour:sender bpnl:{{oemBPNL}};\n                        cx-behaviour:senderConnector ?oemEDC;\n                        cx-behaviour:recipient ?supplier;\n                        cx-behaviour:recipientConnector ?supplierEDC;\n                        cx-behaviour:targetDate ?recordDate;\n                        cx-behaviour:timeStamp ?recordDate;\n                        cx-behaviour:component ?assembly;\n                        cx-behaviour:observationType ?ls_type;\n                        cx-behaviour:statusDate ?recordDate;\n                        cx-behaviour:statusOperatingHours ?operatingTime;\n                        cx-behaviour:statusMileage ?mileage;\n                        cx-behaviour:countingValue ?ls_value;\n                        cx-behaviour:countingUnit ?ls_unit;\n                        cx-behaviour:countingMethod ?ls_method;\n                        cx-behaviour:headerChannels ?ls_channels;\n                        cx-behaviour:bodyClasses ?ls_classes;\n                        cx-behaviour:bodyCountsList ?ls_values;\n                        cx-behaviour:remainingOperatingHours ?timeHours;\n                        cx-behaviour:remainingRunningDistance ?distanceKm.\n            }\n        } # SUPPLIER#GRAPH          \n    } # SUPPLIER#CATALOG\n\n  } # OEM#CATALOG\n\n} # SELECT\n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "RUL KA DEV + ZF",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly \n                ?supplier ?operatingTime ?mileage \n                ?recordDate ?distanceKm ?timeHours \nWHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES ( ?ls_type) { \n      (\"GearOil\"^^xsd:string) \n  }\n\n  SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {  \n    GRAPH <GraphAsset?oem=BehaviourTwinReliability> {  \n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n    }\n\n    SERVICE <edcs://bt-edc-ka-ocp0900009.apps.c7von4sy.westeurope.aroapp.io> {\n      GRAPH <GraphAsset?supplier=BehaviourTwinRUL3> {\n\n        ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm.\n      }\n    } # SUPPLIER#CATALOG\n  }\n\n} \n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute RUL Skill (E2E)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=SkillAsset%3Fconsumer%3DRemainingUsefulLifeE2E&van=FNLQNRVCOFLHAQ&van=FGPTXINYZAVJYK&van=HGWQDJCIGBSKXH",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLifeE2E"
												},
												{
													"key": "van",
													"value": "FNLQNRVCOFLHAQ"
												},
												{
													"key": "van",
													"value": "FGPTXINYZAVJYK"
												},
												{
													"key": "van",
													"value": "FKUBNDMDXQNFHI",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HHXDGSMSUTWFUO",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FVARQFZDICATNV",
													"disabled": true
												},
												{
													"key": "van",
													"value": "VKKTXVZTRKRNSB",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HGWQDJCIGBSKXH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute Behaviour Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"van\",\n            \"resultType\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FNLQNRVCOFLHAQ\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#RemainingUsefulLifeResult\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FGPTXINYZAVJYK\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#RemainingUsefulLifeResult\"\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset={{oemEdcIdsUrlencode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis&runMode=PROVIDER",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlencode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis",
													"description": "IRI of the Skill (urlencoded)"
												},
												{
													"key": "runMode",
													"value": "PROVIDER",
													"description": "Where the Skill is Executed"
												},
												{
													"key": "van",
													"value": "FNLQNRVCOFLHAQ",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FGPTXINYZAVJYK",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FKUBNDMDXQNFHI",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HHXDGSMSUTWFUO",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FVARQFZDICATNV",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "VKKTXVZTRKRNSB",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HGWQDJCIGBSKXH",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "resultType",
													"value": "https%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fbehaviour%23RemainingUsefulLifeResult",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "resultType",
													"value": "https%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fbehaviour%23HealthIndicationResult",
													"description": "Parameter to the skill",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute Behaviour Skill Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset={{oemEdcIdsUrlencode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis&runMode=PROVIDER&van=FNLQNRVCOFLHAQ&resultType=https%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fbehaviour%23RemainingUsefulLifeResult",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlencode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis",
													"description": "IRI of the Skill (urlencoded)"
												},
												{
													"key": "runMode",
													"value": "PROVIDER",
													"description": "Where the Skill is Executed"
												},
												{
													"key": "van",
													"value": "FNLQNRVCOFLHAQ",
													"description": "Parameter to the skill"
												},
												{
													"key": "van",
													"value": "FGPTXINYZAVJYK",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FKUBNDMDXQNFHI",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HHXDGSMSUTWFUO",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "FVARQFZDICATNV",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "VKKTXVZTRKRNSB",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "van",
													"value": "HGWQDJCIGBSKXH",
													"description": "Parameter to the skill",
													"disabled": true
												},
												{
													"key": "resultType",
													"value": "https%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fbehaviour%23RemainingUsefulLifeResult",
													"description": "Parameter to the skill"
												},
												{
													"key": "resultType",
													"value": "https%3A%2F%2Fw3id.org%2Fcatenax%2Fontology%2Fbehaviour%23HealthIndicationResult",
													"description": "Parameter to the skill",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "A collection of calls agains the (agent-enabled) EDC control and data plane of the consumer tenant."
						}
					],
					"description": "A Collection of API Calls Against the Consuming and Federation Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "CAB (Conforming Agent)",
					"item": [
						{
							"name": "KA-BIND Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully posted a binding agent SPARQL\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).gt(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/sparql-query"
									},
									{
										"key": "Accept",
										"value": "application/sparql-results+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT * WHERE {\n\n  VALUES (?catenaXId) { \n      (<urn:uuid:0733946c-59c6-41ae-9570-cb43a6e4c79e>) \n  }\n  \n  ?catenaXId rdf:type cx:Part;\n    cx:partSeries ?partTypeInformation_manufacturerPartId;\n    cx:partName ?partTypeInformation_nameAtManufacturere;\n    cx:partProductionDate ?validityPeriod_validFrom;\n    cx:partProductionDate ?validityPeriod_validTo.\n\n  BIND(\"product\"^^xsd:string AS ?partTypeInformation_classification)\n} \n"
								},
								"url": {
									"raw": "{{conformingAgent}}/bind",
									"host": [
										"{{conformingAgent}}"
									],
									"path": [
										"bind"
									]
								}
							},
							"response": []
						},
						{
							"name": "KA-BIND Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Semantically too demanding binding SPARQL\", function () {",
											"    pm.expect(pm.response.code).oneOf([400]);",
											"    pm.expect(pm.response.status).contains(\"constant\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/sparql-query",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/sparql-results+json"
									}
								],
								"url": {
									"raw": "{{conformingAgent}}/bind?query=SELECT ?subject ?object WHERE { ?subject ?predicate ?object.}",
									"host": [
										"{{conformingAgent}}"
									],
									"path": [
										"bind"
									],
									"query": [
										{
											"key": "query",
											"value": "SELECT ?subject ?object WHERE { ?subject ?predicate ?object.}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "KA-MATCH Warning Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully performed match SPARQL post with warning result\", function () {",
											"    pm.expect(pm.response.code).oneOf([200,203]);",
											"    pm.expect(pm.response.json().results.bindings.length).gt(0);",
											"    pm.expect(JSON.parse(pm.response.headers.get(\"cx_warnings\"))).length.gt(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/sparql-query"
									},
									{
										"key": "Accept",
										"value": "application/sparql-results+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT * WHERE {\n\n  VALUES (?catenaXId) { \n      (<urn:uuid:0733946c-59c6-41ae-9570-cb43a6e4c79e>) \n  }\n  \n  ?catenaXId rdf:type cx:Part;\n    cx:partSeries ?partTypeInformation_manufacturerPartId;\n    cx:partName ?partTypeInformation_nameAtManufacturere;\n    cx:partProductionDate ?validityPeriod_validFrom;\n    cx:partProductionDate ?validityPeriod_validTo.\n\n  BIND(\"product\"^^xsd:string AS ?partTypeInformation_classification)\n} \n"
								},
								"url": {
									"raw": "{{conformingAgent}}/match",
									"host": [
										"{{conformingAgent}}"
									],
									"path": [
										"match"
									]
								}
							},
							"response": []
						},
						{
							"name": "KA-MATCH Warning Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully performed match SPARQL get with warning result\", function () {",
											"    pm.expect(pm.response.code).oneOf([200,203]);",
											"    pm.expect(pm.response.json().results.bindings.length).gt(0);",
											"    pm.expect(JSON.parse(pm.response.headers.get(\"cx_warnings\"))).length.gt(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/sparql-query",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/sparql-results+json"
									}
								],
								"url": {
									"raw": "{{conformingAgent}}/match?query=SELECT ?subject ?object WHERE { ?subject ?predicate ?object.}",
									"host": [
										"{{conformingAgent}}"
									],
									"path": [
										"match"
									],
									"query": [
										{
											"key": "query",
											"value": "SELECT ?subject ?object WHERE { ?subject ?predicate ?object.}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "KA-TRANSFER Multipart Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const regex = /Boundary/g;",
											"pm.test(\"Successfully performed transfer SPARQL post with warning result\", function () {",
											"    pm.expect(pm.response.code).oneOf([200,203]);",
											"    pm.expect(pm.response.text().match(regex)).length.gte(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/sparql-query"
									},
									{
										"key": "Accept",
										"value": "application/sparql-results+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT * WHERE {\n\n  VALUES (?catenaXId) { \n      (<urn:uuid:0733946c-59c6-41ae-9570-cb43a6e4c79e>) \n  }\n  \n  ?catenaXId rdf:type cx:Part;\n    cx:partSeries ?partTypeInformation_manufacturerPartId;\n    cx:partName ?partTypeInformation_nameAtManufacturere;\n    cx:partProductionDate ?validityPeriod_validFrom;\n    cx:partProductionDate ?validityPeriod_validTo.\n\n  BIND(\"product\"^^xsd:string AS ?partTypeInformation_classification)\n} \n"
								},
								"url": {
									"raw": "{{conformingAgent}}/transfer",
									"host": [
										"{{conformingAgent}}"
									],
									"path": [
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "KA-TRANSFER Multipart Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const regex = /Boundary/g;",
											"pm.test(\"Successfully performed transfer SPARQL get with warning result\", function () {",
											"    pm.expect(pm.response.code).oneOf([200,203]);",
											"    pm.expect(pm.response.text().match(regex)).length.gte(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/sparql-query",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/sparql-results+json"
									}
								],
								"url": {
									"raw": "{{conformingAgent}}/transfer?query=SELECT ?subject ?object WHERE { ?subject ?predicate ?object.}",
									"host": [
										"{{conformingAgent}}"
									],
									"path": [
										"transfer"
									],
									"query": [
										{
											"key": "query",
											"value": "SELECT ?subject ?object WHERE { ?subject ?predicate ?object.}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "A Collection of API Calls Against the Dataspace Components of KA."
		},
		{
			"name": "Central Services",
			"item": [
				{
					"name": "Vault",
					"item": [
						{
							"name": "Access Cert",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{vaultToken}}"
									}
								],
								"url": {
									"raw": "https://vault.demo.catena-x.net/v1/:folder/data/:secret",
									"protocol": "https",
									"host": [
										"vault",
										"demo",
										"catena-x",
										"net"
									],
									"path": [
										"v1",
										":folder",
										"data",
										":secret"
									],
									"variable": [
										{
											"key": "folder",
											"value": "behaviour-twin-pilot"
										},
										{
											"key": "secret",
											"value": "dlr-daps-cert-dev"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wallet & BDRS",
					"item": [
						{
							"name": "Create Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"miw_token\",pm.response.json().access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_CON}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_CON}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_CX}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_CX}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_OEM}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_OEM}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_SUPPLIER}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_SUPPLIER}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "sb-1dad8779-948e-4227-8ee0-344806a52aa8!b497177|ica-production-dim-prod-eu10-004-prod-dis-cloud-approuter!b174292",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "971a1d24-8bdf-47c2-8778-91991b678080$49svoQ6GfJUas69jUjZ_jq0QCnGop4LKlVybDZTAsbc=",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://bpnl000000000sm0-knowledge--agent--manufacturer.authentication.eu10.hana.ondemand.com/oauth/token",
									"protocol": "https",
									"host": [
										"bpnl000000000sm0-knowledge--agent--manufacturer",
										"authentication",
										"eu10",
										"hana",
										"ondemand",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Token Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"miw_token\",pm.response.json().access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_CON}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_CON}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_CX}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_CX}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_OEM}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_OEM}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_SUPPLIER}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_SUPPLIER}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "sb-1dad8779-948e-4227-8ee0-344806a52aa8!b497177|ica-production-dim-prod-eu10-004-prod-dis-cloud-approuter!b174292",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "971a1d24-8bdf-47c2-8778-91991b678080$49svoQ6GfJUas69jUjZ_jq0QCnGop4LKlVybDZTAsbc=",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://bpnl000000000vjx-knowledge--agent--consumer.authentication.eu10.hana.ondemand.com/oauth/token",
									"protocol": "https",
									"host": [
										"bpnl000000000vjx-knowledge--agent--consumer",
										"authentication",
										"eu10",
										"hana",
										"ondemand",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Token Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"miw_token\",pm.response.json().access_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_CON}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_CON}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_CX}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_CX}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_OEM}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_OEM}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{keycloak_miw_client_SUPPLIER}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{keycloak_miw_secret_SUPPLIER}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "sb-1058de06-db69-47d9-a393-aa7e130f23d7!b497178|ica-production-dim-prod-eu10-004-prod-dis-cloud-approuter!b174292",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "7187beb9-d343-4e00-a34b-8a62e1b0a3cb$1LWdiVTyrAzR2RNN-fWGKpq7J40x-1DMV8kMOa2AuO4=",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://bpnl000000000tlb-knowledge--agent--supplier.authentication.eu10.hana.ondemand.com/oauth/token",
									"protocol": "https",
									"host": [
										"bpnl000000000tlb-knowledge--agent--supplier",
										"authentication",
										"eu10",
										"hana",
										"ondemand",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Credential Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"current_credential\",pm.response.json().jwt);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"grantAccess\": {\n        \"scope\":\"read\",\n        \"credentialTypes\": [\"MembershipCredential\"],\n        \"providerDid\": \"did:web:portal-backend.int.catena-x.net:api:administration:staticdata:did:BPNL000000000SM0\",\n        \"consumerDid\": \"did:web:portal-backend.int.catena-x.net:api:administration:staticdata:did:BPNL000000000SM0\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dis-integration-service-prod.eu10.dim.cloud.sap/api/v2.0.0/iatp/catena-x-portal",
									"protocol": "https",
									"host": [
										"dis-integration-service-prod",
										"eu10",
										"dim",
										"cloud",
										"sap"
									],
									"path": [
										"api",
										"v2.0.0",
										"iatp",
										"catena-x-portal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Presentation from DIM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.collectionVariables.set(\"vp_token\", jsonData.presentation[0]);",
											"",
											"pm.test(\"Assert not empty\", function () {",
											"   ",
											"    pm.expect(jsonData.presentation[0]) != null",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{current_credential}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{si_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": [\n    \"https://w3id.org/tractusx-trust/v0.8\",\n    \"https://identity.foundation/presentation-exchange/submission/v1\"\n  ],\n  \"@type\": \"PresentationQueryMessage\",\n\t\"scope\": [\n        \"org.eclipse.tractusx.vc.type:MembershipCredential:read\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dis-agent-prod.eu10.dim.cloud.sap/api/v1.0.0/iatp/presentations/query",
									"protocol": "https",
									"host": [
										"dis-agent-prod",
										"eu10",
										"dim",
										"cloud",
										"sap"
									],
									"path": [
										"api",
										"v1.0.0",
										"iatp",
										"presentations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check DID Resolution",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{vp_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://bpn-did-resolution-service.int.catena-x.net/api/directory/bpn-directory",
									"protocol": "https",
									"host": [
										"bpn-did-resolution-service",
										"int",
										"catena-x",
										"net"
									],
									"path": [
										"api",
										"directory",
										"bpn-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					],
					"description": "Interacts with the Managed Identity Wallet Subsystem",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{miw_token}}",
								"type": "string"
							}
						]
					}
				},
				{
					"name": "Portal",
					"item": [
						{
							"name": "Access Ontology Details",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/semantichub/:model",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"semantichub",
										":model"
									],
									"variable": [
										{
											"key": "model",
											"value": "https%3A%2F%2Fraw.githubusercontent.com%2Fcatenax-ng%2Fproduct-knowledge%2Fmain%2Finfrastructure%2Fconsumer%2Fresources%2Fcx-ontology.json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Ontologies from Repo",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/catenax-ng/product-knowledge/contents/ontology?ref=release/v0.7.4",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										"catenax-ng",
										"product-knowledge",
										"contents",
										"ontology"
									],
									"query": [
										{
											"key": "ref",
											"value": "release/v0.7.4"
										},
										{
											"key": "ref",
											"value": "main",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Website",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://knowledge.dev.demo.catena-x.net/:path",
									"protocol": "https",
									"host": [
										"knowledge",
										"dev",
										"demo",
										"catena-x",
										"net"
									],
									"path": [
										":path"
									],
									"variable": [
										{
											"key": "path",
											"value": "consumer-frontend/static/js/main.31177f6b.js"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Keycloak Public Key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://centralidp.int.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/certs",
									"protocol": "https",
									"host": [
										"centralidp",
										"int",
										"catena-x",
										"net"
									],
									"path": [
										"auth",
										"realms",
										"CX-Central",
										"protocol",
										"openid-connect",
										"certs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Integration Tests",
			"item": [
				{
					"name": "00_KA",
					"item": [
						{
							"name": "1.0 Deregister Existing Oem Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Contract Definition was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{oemEdcControl}}/data/contractdefinitions/:contract",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions",
										":contract"
									],
									"variable": [
										{
											"key": "contract",
											"value": "oemOffer",
											"description": "Id of the Contract Definition"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "1.1 Deregister Existing Oem Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Data Graph Asset was successful (in case no agreements were pending)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{oemEdcControl}}/data/assets/:asset",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"assets",
										":asset"
									],
									"variable": [
										{
											"key": "asset",
											"value": "urn:cx:Graph:oem:Diagnosis2022",
											"description": "Id of the Asset"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "1.2 Disable Oem Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Oem Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{oemEdcControl}}/data/policydefinitions/:policy",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions",
										":policy"
									],
									"variable": [
										{
											"key": "policy",
											"value": "oemPolicy",
											"description": "Id of the Policy"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "1.3 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer Deletion was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "1.5 Register Oem Data Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Data Graph Asset was successful (in case no agreements were pending)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n      \"asset:prop:name\": \"Diagnostic Trouble Code Catalogue Version 2022\",\n      \"asset:prop:description\": \"A sample graph asset/offering referring to a specific diagnosis resource.\",\n      \"asset:prop:version\": \"0.5.5-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#GraphAsset\",\n      \"rdfs:isDefinedBy\": \"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\",\n      \"cx:protocol\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:Diagnosis2022> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DTC ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Affects ;\\n        sh:class OemDiagnosedParts ;\\n    ] ;\\n\\nOemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n      \"baseUrl\": \"http://oem-provider-agent:8080/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{oemEdcControl}}/data/assets",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"assets"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "1.6 Enable Oem Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Oem Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"oemPolicy\",\n  \"policy\": {\n    \"target\": \"urn:cx:Graph:oem:.*\",\n    \"permissions\": [\n        {\n            \"target\": \"urn:cx:Graph:oem:Diagnosis.*\",\n            \"action\": {\n                \"type\": \"USE\"\n            },\n            \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{oemEdcControl}}/data/policydefinitions",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "1.7 Register Oem Graph Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"oemOffer\",\n  \"accessPolicyId\": \"oemPolicy\",\n  \"contractPolicyId\": \"oemPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Graph:oem:.*\"\n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{oemEdcControl}}/data/contractdefinitions",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a contract."
							},
							"response": []
						},
						{
							"name": "1.8 Check Propagation into Consumer Data Catalogue Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).gte(1);",
											"    pm.expect(pm.response.json().results.bindings[0].asset.value).eq(\"urn:cx:Graph:oem:Diagnosis2022\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "2.0 Deregister Existing Tiera Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Contract Definition was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{tieraEdcControl}}/data/contractdefinitions/:contract",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions",
										":contract"
									],
									"variable": [
										{
											"key": "contract",
											"value": "tierAOffer",
											"description": "Id of the Contract Definition"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "2.1 Deregister Tier1 Function Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Function Graph Asset was successful (or conflicted because of existing agreements).\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{tieraEdcControl}}/data/assets/urn:cx:Graph:tierA:LifetimeGearbox",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"assets",
										"urn:cx:Graph:tierA:LifetimeGearbox"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "2.2 Disable Tier1 Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Tier1 Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{tieraEdcControl}}/data/policydefinitions/:policy",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions",
										":policy"
									],
									"variable": [
										{
											"key": "policy",
											"value": "tierAPolicy"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "2.3 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer Deletion was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "2.5 Register Tier1 Function Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Function Graph Asset was successful (or pending because of existing agreements)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:LifetimeGearbox\",\n      \"asset:prop:name\": \"Lifetime Prognosis Service for Gearboxes\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:policy-id\": \"gobang\",\n      \"asset:prop:cx:requesttype\": \"application/sparql\",\n      \"asset:prop:cx:apitype\": \"application/knowledge-agent-query\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:shapesGraph\": \"@prefix : <urn:cx:Graph:tierA:LifetimeGearbox> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n :Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-lifetime:LifetimePrognosis ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003CPIY> ].\\n\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"baseUrl\": \"http://tiera-remoting-agent:8081/rdf4j-server/repositories/prognosis\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tieraEdcControl}}/data/assets",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"assets"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "2.6 EnableTier1 Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"tierAPolicy\",\n  \"target\": \"urn:cx:Graph:tierA:.*\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Graph:tierA:.*\",\n        \"action\": {\n        \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tieraEdcControl}}/data/policydefinitions",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "2.7 Register Tier1 Graph Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"tierAOffer\",\n  \"accessPolicyId\": \"tierAPolicy\",\n  \"contractPolicyId\": \"tierAPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Graph:tierA:.*\"\n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tieraEdcControl}}/data/contractdefinitions",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a contract."
							},
							"response": []
						},
						{
							"name": "2.8 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).gte(1);",
											"    pm.expect(pm.response.json().results.bindings[0].asset.value).eq(\"urn:cx:Graph:tierA:LifetimeGearbox\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "3.0 Deregister Existing Consumer Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Contract Definition was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{consumerEdcControl}}/data/contractdefinitions/:contract",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions",
										":contract"
									],
									"variable": [
										{
											"key": "contract",
											"value": "consumerOffer",
											"description": "Id of the Contract Definition"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "3.1 Deregister Consumer Skill Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Skill Asset was successful (if not part of an agreement)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{consumerEdcControl}}/data/assets/:asset",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"assets",
										":asset"
									],
									"variable": [
										{
											"key": "asset",
											"value": "urn:cx:Skill:consumer:LifetimeGearbox"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a skill asset."
							},
							"response": []
						},
						{
							"name": "3.2 Disable Consumer Skill Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Consumer Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{consumerEdcControl}}/data/policydefinitions/:policy",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions",
										":policy"
									],
									"variable": [
										{
											"key": "policy",
											"value": "consumerPolicy"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a skill policy."
							},
							"response": []
						},
						{
							"name": "3.3 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer Deletion was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "3.5 Register Consumer Skill Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful (if not blocked by agreement)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:LifetimeGearbox\",\n      \"asset:prop:name\": \"Remaining Useful Lifetime Skill for Vehicles\",\n      \"asset:prop:description\": \"A sample skill asset/offering implemented via SparQL.\",\n      \"asset:prop:version\": \"0.5.5-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"rdf:type\":\"https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#SkillAsset\",\n      \"rdfs:isDefinedBy\": \"https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:LifetimeGearbox\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT ?reason ?code ?description ?version ?partend ?partcat ?partclass WHERE {\\n  # Select Business Partner\\n  ?Oem cx:BPNL \\\"BPNL00000003COJN\\\".\\n\\n  # Search for Trouble Codes of the Business Partner\\n  # related to a cause in the \\\"Kabelbaum\\\"\\n  ?Dtc rdf:type cx-diag:DTC.\\n  ?Dtc cx:provisionedBy ?Oem.\\n  ?Dtc cx-diag:PossibleCauses ?reason.\\n  FILTER contains(?reason,\\\"Kabelbaum\\\").\\n  ?Dtc cx-diag:Code ?code.\\n  ?Dtc cx-diag:Description ?description.\\n  ?Dtc cx-diag:Version ?version.\\n\\n  # Navigate to the affected parts\\n  # and show only parts with a classification \\\"Powertrain\\\"\\n  ?Dtc cx-diag:affects ?Part.\\n  ?Part cx-diag:Category ?partcat.\\n  ?Part cx-diag:EnDenomination ?partend.\\n  ?Part cx-diag:Classification ?partclass.\\n  FILTER contains(?partclass,'Powertrain').\\n\\n}\\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{consumerEdcControl}}/data/assets",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"assets"
									]
								},
								"description": "Calls the datamanagement API in order to create a skill asset."
							},
							"response": []
						},
						{
							"name": "3.6 Enable Consumer Skill Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Consumer Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"consumerPolicy\",\n  \"policy\": {\n      \"target\": \"urn:cx:Skill:consumer.*\",\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Skill:consumer:Lifetime.*\",\n        \"action\": {\n            \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{consumerEdcControl}}/data/policydefinitions",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a skill policy."
							},
							"response": []
						},
						{
							"name": "3.7 Register Tier1 Skill Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"consumerOffer\",\n  \"accessPolicyId\": \"consumerPolicy\",\n  \"contractPolicyId\": \"consumerPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Skill:consumer:.*\"\n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{consumerEdcControl}}/data/contractdefinitions",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a skill contract."
							},
							"response": []
						},
						{
							"name": "3.8 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).gte(1);",
											"    pm.expect(pm.response.json().results.bindings[0].asset.value).eq(\"urn:cx:Skill:consumer:LifetimeGearbox\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						}
					],
					"description": "Integration Tests for Knowledge Agents Framework"
				},
				{
					"name": "01_BTVH",
					"item": [
						{
							"name": "00_KA-216_General_Connectivity_OEM",
							"item": [
								{
									"name": "1 Access Own Catalog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"@id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(pm.response.json()[\"dcat:dataset\"]).to.have.length.gte(0);",
													"    pm.response.json()[\"dcat:dataset\"].map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{oemEdcControl}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{oemEdcControl}}/management/v2/catalog/request",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "2 Query the Provisioning Agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Provisioning Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(16);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(4);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"adaptionValues\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"recordDate\");",
													"        pm.expect(binding.recordDate).to.have.property(\"type\");",
													"        pm.expect(binding.recordDate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"healthType\");",
													"        pm.expect(binding.healthType).to.have.property(\"type\");",
													"        pm.expect(binding.healthType).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"body_count\");",
													"        pm.expect(binding.body_count).to.have.property(\"type\");",
													"        pm.expect(binding.body_count).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"body_classes\");",
													"        pm.expect(binding.body_classes).to.have.property(\"type\");",
													"        pm.expect(binding.body_classes).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"countUnit\");",
													"        pm.expect(binding.countUnit).to.have.property(\"type\");",
													"        pm.expect(binding.countUnit).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"countMethod\");",
													"        pm.expect(binding.countMethod).to.have.property(\"type\");",
													"        pm.expect(binding.countMethod).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"channels\");",
													"        pm.expect(binding.channels).to.have.property(\"type\");",
													"        pm.expect(binding.channels).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?adaptionValues ?operatingTime ?mileage ?recordDate ?healthType ?project ?body_count ?body_classes ?countUnit ?countMethod ?channels WHERE {\n\n  VALUES (?van ?aggregate ?healthType) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string \"Clutch\"^^xsd:string) \n      (\"FGPTXINYZAVJYK\"^^xsd:string \"Differential Gear\"^^xsd:string \"Clutch\"^^xsd:string) \n      (\"DVAJDTLJMKKZGY\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearOil\"^^xsd:string) \n      (\"RDUGZNKNCEPLTL\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearSet\"^^xsd:string)  \n  }\n  \n  ?vehicle rdf:type cx:Vehicle;\n           cx:vehicleIdentificationNumber ?van;\n           cx:hasAdaption ?adaption.\n\n  ?adaption cx:vehicleCurrentMileage ?mileage;\n            cx:vehicleOperatingHours ?operatingTime;\n            cx:vehicleCurrentMileage ?mileage;\n            cx:vehicleCurrentStateDateTime ?recordDate;\n            cx:hasValues ?adaptionValues.\n\n  ?assembly rdf:type cx:AssemblyGroup;\n            cx:partName ?aggregate;\n            cx:isPartOf ?vehicle;\n            cx:isProducedBy ?supplier;\n            cx:hasLoadSpectrum ?lc.\n\n  ?lc rdf:type cx:LoadSpectrum;\n      cx:loadSpectrumDescription ?healthType;\n      cx:loadSpectrumType ?body_count;\n      cx:hasLoadSpectrumValues [\n      cx:loadSpectrumChannelIndex ?body_classes; \n      cx:loadSpectrumCountingUnit ?countUnit; \n      cx:loadSpectrumCountingMethod ?countMethod; \n      cx:loadSpectrumChannelValues ?channels ].\n\n  OPTIONAL {\n    ?lc cx:loadSpectrumName ?project\n  }\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/t1/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"t1",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Test Federated Data Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Federated Data Catalogue Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value == 'bpn:legal:BPNL00000003CQI9' && binding.predicate.value == 'https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#hasConnector';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-216](https://jira.catena-x.net/browse/KA-216)"
						},
						{
							"name": "01_KA-217_General_Connectivity_Supplier",
							"item": [
								{
									"name": "1 Access Own Catalog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{oemEdcControl}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/catalog/request",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "2 Test the HI Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Provisioning Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"requestRefId\");",
													"    pm.expect(pm.response.json()).to.have.property(\"healthIndicatorOutputs\");",
													"    pm.expect(pm.response.json().healthIndicatorOutputs).to.have.length(2);",
													"    pm.response.json().healthIndicatorOutputs.map(function(output) {",
													"        pm.expect(output).to.have.property(\"version\");",
													"        pm.expect(output).to.have.property(\"componentId\");",
													"        pm.expect(output).to.have.property(\"healthIndicatorValues\");",
													"        pm.expect(output.healthIndicatorValues).to.have.length.gte(1);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "hi_input",
													"type": "file",
													"src": "/Users/A29078924/Projects/catenax/product-knowledge/dataspace/mock/prognosis/tests/data/sample-hi-input.json"
												}
											]
										},
										"url": {
											"raw": "{{tierABackend}}/api/hi",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"hi"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "3 Query the Remoting Agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(1);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"indicatorVersion\");",
													"        pm.expect(binding.indicatorVersion).to.have.property(\"type\");",
													"        pm.expect(binding.indicatorVersion).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"indicatorComponentId\");",
													"        pm.expect(binding.indicatorComponentId).to.have.property(\"type\");",
													"        pm.expect(binding.indicatorComponentId).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"health\");",
													"        pm.expect(binding.health).to.have.property(\"type\");",
													"        pm.expect(binding.health).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\n\nSELECT ?indicatorVersion ?indicatorComponentId ?health WHERE   {\n  VALUES ( ?countUnit ?adaptionValues ?channels ?counts ?classes ?assembly ?recordDate ?healthType ?operatingTime ?countMethod ?mileage) {\n  ( \"unit:ONE\" \n    \"[0.2, 0.3, 0.4]\"^^<https://json-schema.org/draft/2020-12/schema#Object> \n    \"[ {\\\\x0A  \\\"unit\\\" : \\\"unit:rpm\\\",\\\\x0A  \\\"numberOfBins\\\" : 128,\\\\x0A  \\\"channelName\\\" : \\\"N_TU\\\",\\\\x0A  \\\"upperLimit\\\" : 12700.0,\\\\x0A  \\\"lowerLimit\\\" : -100.0\\\\x0A}, {\\\\x0A  \\\"unit\\\" : \\\"unit:Nm\\\",\\\\x0A  \\\"numberOfBins\\\" : 128,\\\\x0A  \\\"channelName\\\" : \\\"T_TU\\\",\\\\x0A  \\\"upperLimit\\\" : 1290.0,\\\\x0A  \\\"lowerLimit\\\" : -1270.0\\\\x0A}, {\\\\x0A  \\\"unit\\\" : \\\"unit:ONE\\\",\\\\x0A  \\\"numberOfBins\\\" : 10,\\\\x0A  \\\"channelName\\\" : \\\"Z_GANG\\\",\\\\x0A  \\\"upperLimit\\\" : 9.5,\\\\x0A  \\\"lowerLimit\\\" : -0.5\\\\x0A} ]\" \n    \"{\\\\x0A  \\\"countsList\\\" : [ 8.165716991470617E-8, 2.6589701519696973E-5, 4.996414281777106E-5, 8.877176878741011E-5, 1.2583420902956277E-4, 2.1605499205179513E-4, 5.809103022329509E-4, 8.848882862366736E-4, 0.0011256651487201452, 0.0014202258316799998, 0.0014436225173994899, 0.0016900197369977832, 0.0023243564646691084, 0.0029973441269248724, 0.004415211733430624, 0.004894567653536797, 0.005345028359442949, 0.005830397829413414, 0.010435677133500576, 0.014282779768109322, 0.01441910769790411, 0.015517636202275753, 0.016832217574119568, 0.016946539282798767, 0.01801016554236412, 0.018330466002225876, 0.018912214785814285, 0.020088570192456245, 0.021580204367637634, 0.022674864158034325, 0.02454369328916073, 0.02779177948832512, 0.030732547864317894, 0.03433700650930405, 0.03941313177347183, 0.04150734096765518, 0.04265172779560089, 0.042704273015260696, 0.043251294642686844, 0.04357834905385971, 0.04631785675883293, 0.04637407511472702, 0.04712093621492386, 0.04748912900686264, 0.050515756011009216, 0.05066641792654991, 0.05156601592898369, 0.05449165776371956, 0.056410789489746094, 0.05758173391222954 ],\\\\x0A  \\\"countsName\\\" : \\\"Counts\\\"\\\\x0A}\" \n    \"[ {\\\\x0A  \\\"className\\\" : \\\"N_TU-class\\\",\\\\x0A  \\\"classList\\\" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 3, 3, 1, 3, 3, 2, 3, 2, 4, 2, 4, 5, 5, 5, 6, 6, 6, 6, 1, 2, 4, 2, 4, 6, 4, 4, 4, 2, 2 ]\\\\x0A}, {\\\\x0A  \\\"className\\\" : \\\"T_TU-class\\\",\\\\x0A  \\\"classList\\\" : [ 62, 65, 63, 63, 64, 63, 67, 64, 64, 64, 66, 65, 64, 65, 65, 64, 64, 62, 65, 65, 65, 62, 62, 64, 66, 62, 62, 62, 63, 66, 65, 65, 62, 62, 67, 62, 62, 62, 66, 64, 65, 62, 62, 62, 62, 66, 66, 66, 62, 65 ]\\\\x0A}, {\\\\x0A  \\\"className\\\" : \\\"Z_GANG-class\\\",\\\\x0A  \\\"classList\\\" : [ 5, 5, 9, 7, 8, 5, 1, 3, 4, 2, 1, 3, 2, 1, 4, 1, 5, 4, 9, 6, 7, 3, 7, 6, 6, 4, 3, 9, 3, 8, 5, 8, 8, 3, 5, 3, 6, 8, 8, 7, 2, 3, 6, 4, 7, 4, 6, 9, 5, 4 ]\\\\x0A} ]\"\n    <urn:uuid:719133c9-d219-4278-b724-9f64efc42b42> \n    \"2022-08-21T12:00:00.000Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> \n    \"GearSet\" \n    \"1282\"^^<http://www.w3.org/2001/XMLSchema#int> \n    \"LRD\" \n    \"76543\"^^<http://www.w3.org/2001/XMLSchema#int>)     \n   }     \n  \n    ?invocation rdf:type cx-health:HealthIndication;\n            cx-health:requestComponentId ?assembly;\n            cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n            cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n            cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n            cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n            cx-health:classifiedLoadCollectiveChannels ?channels;\n            cx-health:classifiedLoadCollectiveClasses ?classes;\n            cx-health:classifiedLoadCollectiveCounts ?counts;\n            cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n            cx-health:adaptionValueTimestamp ?recordDate;\n            cx-health:adaptionValueMileage ?mileage; \n            cx-health:adaptionValueOperatingTime ?operatingTime;\n            cx-health:adaptionValueList ?adaptionValues;\n            cx-health:indicatorVersion ?indicatorVersion;\n            cx-health:responseComponentId ?indicatorComponentId;\n            cx-health:healthIndicatorValues ?health. \n\n} "
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/health",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"health"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "3 Test Federated Data Catalogue Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Federated Data Catalogue Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value == 'bpn:legal:BPNL00000003CQI9' && binding.predicate.value == 'https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#hasConnector';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-217](https://jira.catena-x.net/browse/KA-217)"
						},
						{
							"name": "02_KA-218_Data_Graph_Asset_OEM",
							"item": [
								{
									"name": "1 Register Data Graph Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Data Asset Is Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?oem=BehaviourTwin\", \n        \"properties\": {\n            \"name\": \"OEM portion of the Behaviour Twin RUL/HI Testdataset.\",\n            \"name@de\": \"OEM Anteil an den Verhaltenszwilling RUL/HI Testdaten.\",\n            \"description\": \"A graph asset/offering mounting Carena-X Testdata for Behaviour Twin.\",\n            \"description@de\": \"Ein Graph Angebot welches Catena-X Testdaten beinhaltet.\",\n            \"version\": \"CX_RuL_Testdata_v1.0.0\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/telematics>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix cx-common: <https://w3id.org/catenax/ontology/common#>. \\n@prefix : <GraphAsset?oem=BehaviourTwin#> .\\n@prefix cx-tele: <https://w3id.org/catenax/ontology/telematics#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .@prefix : <urn:cx:Graph:oem:BehaviourTwin> .\\n\\n:OemLoadSpectrum rdf:type sh:NodeShape ;\\n  sh:targetClass cx-tele:LoadSpectrum ;\\n  sh:property [\\n        sh:path cx-tele:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003AYRE> \\n    ] ;\\n  sh:property [\\n        sh:path cx-tele:Version ;\\n        sh:hasValue \\\"0\\\"^^xsd:long \\n    ] ;\\n  sh:property [\\n        sh:path cx-tele:component ;\\n        sh:class :SupplierParts \\n    ] .\\n\\n:SupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-tele:VehicleComponent ;\\n  sh:property [\\n        sh:path cx-tele:isProducedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003B2OM> \\n    ] .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"GraphAsset?oem=BehaviourTwin\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{oemProviderAgent}}/sparql\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\",\n        \"cx-common:acceptsContentType\":\"application/sparql-results+json\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/management/v2/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "2 Create Graph Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Policy Established\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@type\": \"PolicyDefinitionRequestDto\",\n    \"@id\": \"Policy?oem=GraphPolicy\",\n    \"policy\": {\n\t\t\"@type\": \"Policy\",\n\t\t\"odrl:permission\" : [{\n\t\t\t\"odrl:action\" : \"USE\",\n\t\t\t\"odrl:constraint\" : {\n\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\"odrl:or\" : [\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003AYRE\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003B2OM\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003CPIY\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003CQI9\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003COJN\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}]\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/management/v2/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "3 Define Graph Contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?oem=GraphContract\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?oem=GraphPolicy\",\n    \"contractPolicyId\": \"Policy?oem=GraphPolicy\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?oem=Graph\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/management/v2/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "4 Check Federated Data Catalogue Appearance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check Federated Data Catalogue Appearance\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(1);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(1);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.asset.value == 'urn:cx:Graph:oem:BehaviourTwin';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://bmw-control.dev.demo.catena-x.net> ?pr ?asset.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?asset WHERE { <edcs://bmw-control.dev.demo.catena-x.net> ?pr ?asset.}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-218](https://jira.catena-x.net/browse/KA-218)"
						},
						{
							"name": "03_KA-219_Function_Graph_Asset_Supplier",
							"item": [
								{
									"name": "1 Register Function Graph Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Function Graph Asset Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?supplier=BehaviourTwinHI\", \n        \"properties\": {\n            \"name\": \"Health Prognosis Service for Gearboxes\",\n            \"description\": \"A sample graph asset/offering referring to a specific prognosis resource.\",\n            \"version\": \"1.9.3-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/function>,<https://w3id.org/catenax/ontology/prognosis>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix cx-common: <https://w3id.org/catenax/ontology/common#>. \\n@prefix : <GraphAsset?supplier=BehaviourTwinHI#> .\\n@prefix cx-prognosis: <https://w3id.org/catenax/ontology/prognosis#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\n:Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-prognosis:Function ;\\n  sh:property [\\n        sh:path cx-prognosis:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003CPIY> ].\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?supplier=BehaviourTwinHI\", \n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{tierARemotingAgent}}/repositories/health\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{supplierBackendAuthKey}}\",\n        \"authCode\": \"{{supplierBackendAuthCode}}\"\n    }\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/assets",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "2 Create A Graph Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Policy Established\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@type\": \"PolicyDefinitionRequestDto\",\n    \"@id\": \"Policy?supplier=GraphPolicy\",\n    \"policy\": {\n\t\t\"@type\": \"Policy\",\n\t\t\"odrl:permission\" : [{\n\t\t\t\"odrl:action\" : \"USE\",\n\t\t\t\"odrl:constraint\" : {\n\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\"odrl:or\" : [\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003AYRE\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003B2OM\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003CPIY\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003CQI9\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : \"EQ\",\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL00000003COJN\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}]\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/policydefinitions",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "3 Define Graph Contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?supplier=GraphContract\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?supplier=GraphPolicy\",\n    \"contractPolicyId\": \"Policy?supplier=GraphPolicy\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?supplier=Graph\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/contractdefinitions",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								}
							]
						},
						{
							"name": "04_KA-220_Skill_Delegation_OEM",
							"item": [
								{
									"name": "1 Check Federated Data Catalogue Appearance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check Federated Data Catalogue Appearance\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(1);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(1);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.asset.value == 'urn:cx:Graph:tierA:HealthIndicatorGearbox';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://dlr-agent-control.dev.demo.catena-x.net> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?asset WHERE { <edcs://dlr-agent-control.dev.demo.catena-x.net> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset.}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "2 Perform a Remote Skill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{tieraEdcControl}}%23GraphAsset%3Fsupplier%3DBehaviourTwinHI",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{tieraEdcControl}}%23GraphAsset%3Fsupplier%3DBehaviourTwinHI"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							]
						},
						{
							"name": "05_KA-221_Vehicle_Health_Skill_OEM",
							"item": [
								{
									"name": "1 Register HI Skill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX cx-health: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/vehicle_health.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n##########################################################\n# Sample for a Federated (OEM-Deployed) SparQL Skill which\n#  - Jumps right into self-owned telematics assets given a set of candidate VANs, assembly groups and load spectrum types\n#  - Feeds the gathered data into the respective supplier connector/agent to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n##########################################################\n\nSELECT ?oemEDC ?telematicsAsset ?van ?aggregate ?assembly ?healthType ?recordDate ?mileage ?operatingTime ?health WHERE {\n\n    ###\n    # Input parameter declaration \n    ###\n    VALUES (?van ?aggregate ?healthType) { \n      (\"@van\"^^xsd:string \"@aggregate\"^^xsd:string \"@healthType\"^^xsd:string) \n    }\n    \n    <bpn:legal:BPNL00000003AYRE> cx:hasConnector ?oemEDC.\n    ?oemEDC <https://w3id.org/catenax/ontology/common#offers> [ \n        <https://w3id.org/catenax/ontology/common#id> ?telematicsAsset;\n        rdfs:isDefinedBy <https://w3id.org/catenax/ontology/telematics>].\n  \n    SERVICE ?oemEDC { \n        GRAPH ?telematicsAsset {\n\n            ###\n            # Lookup vehicle and current telematics header\n            ###\n            ?vehicle rdf:type cx:Vehicle;\n            cx:vehicleIdentificationNumber ?van;\n            cx:hasAdaption [\n                    cx:vehicleOperatingHours ?operatingTime;\n                    cx:vehicleCurrentMileage ?mileage;\n                    cx:vehicleCurrentStateDateTime ?recordDate;\n                    cx:hasValues ?adaptionValues\n            ]\n            .\n\n            ###\n            # Level-1 Down Traceability to Assembly Groups\n            ###\n            ?assembly rdf:type cx:AssemblyGroup;\n                cx:partName ?aggregate;\n                cx:isPartOf ?vehicle;\n                cx:isProducedBy ?supplier;\n                # Intersect Assembly Group with Telematics Details to get the right load spectrum\n                cx:hasLoadSpectrum [ rdf:type cx:LoadSpectrum;\n                    cx:loadSpectrumDescription ?healthType;\n                    cx:loadSpectrumType ?channels;\n                    \n                    ###\n                    # and finally obtain the actual measurements (>50kb per instance, aware your web server settings)\n                    ###\n                    cx:hasLoadSpectrumValues [\n                        cx:loadSpectrumChannelIndex ?classes; \n                        cx:loadSpectrumCountingUnit ?countUnit; \n                        cx:loadSpectrumCountingMethod ?countMethod; \n                        cx:loadSpectrumChannelValues ?counts \n                    ]\n                ]\n                .\n        }\n\n        ###\n        # Lookup the federated data catalogue (per supplier)\n        ###\n        ?supplier cx:hasConnector ?supplierEDC.\n        ?supplierEDC <https://w3id.org/catenax/ontology/common#offers> [ \n             <https://w3id.org/catenax/ontology/common#id> ?healthIndicatorAsset;\n             rdfs:isDefinedBy <https://w3id.org/catenax/ontology/prognosis>]  .\n\n        SERVICE ?supplierEDC { \n            GRAPH ?healthIndicatorAsset {\n                ?invocation rdf:type cx-health:HealthIndication;\n                        cx-health:requestComponentId ?assembly;\n                        cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n                        cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n                        cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n                        cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n                        cx-health:classifiedLoadCollectiveChannels ?channels;\n                        cx-health:classifiedLoadCollectiveClasses ?classes;\n                        cx-health:classifiedLoadCollectiveCounts ?counts;\n                        cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n                        cx-health:adaptionValueTimestamp ?recordDate;\n                        cx-health:adaptionValueMileage ?mileage; \n                        cx-health:adaptionValueOperatingTime ?operatingTime;\n                        cx-health:adaptionValueList ?adaptionValues;\n                        cx-health:indicatorVersion ?indicatorVersion;\n                        cx-health:responseComponentId ?indicatorComponentId;\n                        cx-health:healthIndicatorValues ?health.    \n            }\n        }\n    }\n} # SELECT\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent/skill?asset=SkillAsset?oem=HealthIndicatorSkill",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset?oem=HealthIndicatorSkill"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
									},
									"response": []
								},
								{
									"name": "2 Execute Health Indicator Skill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(8);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"healthType\");",
													"        pm.expect(binding.healthType).to.have.property(\"type\");",
													"        pm.expect(binding.healthType).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"recordDate\");",
													"        pm.expect(binding.recordDate).to.have.property(\"type\");",
													"        pm.expect(binding.recordDate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"health\");",
													"        pm.expect(binding.health).to.have.property(\"type\");",
													"        pm.expect(binding.health).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\", \"aggregate\", \"healthType\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"QTALZJQURYYQDJ\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FGPTXINYZAVJYK\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HHXDGSMSUTWFUO\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RGZCDKEJHDSNCB\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RDUGZNKNCEPLTL\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"DVAJDTLJMKKZGY\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"VKKTXVZTRKRNSB\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RHVDQXSXBBZSOV\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HGWQDJCIGBSKXH\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"ZFYBNQOXEPSETK\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"KHLBGCBEIZGPMH\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"WLPVJZVMWOEACX\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FVARQFZDICATNV\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } }\n\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?asset=SkillAsset?oem=HealthIndicatorSkill",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "SkillAsset?oem=HealthIndicatorSkill"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								}
							]
						}
					],
					"description": "Integration Tests for Behaviour Twin/Vehicle Health implemented with Knowledge Agents"
				},
				{
					"name": "I_02_BTRUL",
					"item": [
						{
							"name": "I_02_00_CAB_SETUP",
							"item": [
								{
									"name": "I_02_00_02_CLOSED_POLICY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@type\": \"PolicyDefinitionRequestDto\",\n    \"@id\": \"Policy?cab=Asset&mode=closed\",\n    \"policy\": {\n\t\t\"@type\": \"Policy\",\n\t\t\"odrl:permission\" : [{\n\t\t\t\"odrl:action\" : \"USE\",\n\t\t\t\"odrl:constraint\" : {\n\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\"odrl:rightOperand\" : \"{{cabBPNL}}\"\n\t\t\t}\n\t\t}]\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/policydefinitions",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "I_02_00_03_OPEN_CONTRACT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?cab=Asset&mode=open\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?cab=Asset&mode=open\",\n    \"contractPolicyId\": \"Policy?cab=Asset&mode=open\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?cab=Asset&mode=open\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/contractdefinitions",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "I_02_00_04_CLOSED_CONTRACT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?cab=Asset&mode=closed\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?cab=Asset&mode=closed\",\n    \"contractPolicyId\": \"Policy?cab=Asset&mode=closed\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?cab=Asset&mode=closed\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/contractdefinitions",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "I_02_00_05_OPEN_GRAPH_ASSET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?cab=Conforming&mode=open\", \n        \"properties\": {\n            \"name\": \"Open Conforming Asset.\",\n            \"description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?cab=Conforming&mode=open#> .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?cab=Conforming&mode=open\", \n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{cabConformingAgent}}/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_06_CLOSED_GRAPH_ASSET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?cab=Conforming&mode=closed\", \n        \"properties\": {\n            \"name\": \"Closed Conforming Asset.\",\n            \"description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=closed\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?cab=Conforming&mode=closed#> .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?cab=Conforming&mode=closed\", \n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{cabConformingAgent}}/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_07_UNFEDERATED_GRAPH_ASSET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?cab=Conforming&mode=unfederated\", \n        \"properties\": {\n            \"name\": \"Unfederated Conforming Asset.\",\n            \"description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Graph&mode=open\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?cab=Conforming&mode=unfederated#> .\\n\",\n            \"cx-common:isFederated\": \"false^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?cab=Conforming&mode=unfederated\", \n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{cabConformingAgent}}/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_08_OPEN_SKILL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=ALL&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dopen&isFederated=true",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "distributionMode",
													"value": "ALL",
													"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
												},
												{
													"key": "contract",
													"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
													"description": "Name of the contract to publish the skill under"
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dopen",
													"description": "Id of the skill"
												},
												{
													"key": "isFederated",
													"value": "true"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "I_02_00_09_OPEN_SKILL_ALT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"SkillAsset?cab=Conforming&mode=open\", \n        \"properties\": {\n            \"name\": \"Open Skill\",\n            \"description\": \"A conformity assessment skill.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n            \"rdf:type\": \"cx-common:SkillAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n            \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=all\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        },\n        \"privateProperties\": {\n            \"cx-common:query\":\"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"SkillAsset?cab=Conforming&mode=open\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_10_CLOSED_SKILL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=closed> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=ALL&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dclosed&contract=Contract%3Fcab%3DAsset%26mode%3Dclosed&isFederated=false",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "distributionMode",
													"value": "ALL",
													"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dclosed",
													"description": "Name of the contract to publish the skill under"
												},
												{
													"key": "contract",
													"value": "Contract%3Fcab%3DAsset%26mode%3Dclosed",
													"description": "Id of the skill"
												},
												{
													"key": "isFederated",
													"value": "false",
													"description": "Whether it is visible in the federated catalogue"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "I_02_00_11_CLOSED_SKILL_ALT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"SkillAsset?cab=Conforming&mode=closed\", \n        \"properties\": {\n            \"name\": \"Closed Skill\",\n            \"description\": \"A conformity assessment skill.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=closed\",\n            \"rdf:type\": \"cx-common:SkillAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n            \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=all\",\n            \"cx-common:isFederated\": \"false^^xsd:boolean\"\n        },\n        \"privateProperties\": {\n            \"cx-common:query\":\"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=closed> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"SkillAsset?cab=Conforming&mode=closed\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_12_PROVIDER_SKILL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=PROVIDER&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dprovider&isFederated=true",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "distributionMode",
													"value": "PROVIDER",
													"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
												},
												{
													"key": "contract",
													"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
													"description": "Name of the contract to publish the skill under"
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dprovider",
													"description": "Id of the skill"
												},
												{
													"key": "isFederated",
													"value": "true",
													"description": "Whether it is visible in the federated catalogue"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "I_02_00_13_PROVIDER_SKILL_ALT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"SkillAsset?cab=Conforming&mode=provider\", \n        \"properties\": {\n            \"name\": \"Provider-Forced Skill\",\n            \"description\": \"A conformity assessment skill.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n            \"rdf:type\": \"cx-common:SkillAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n            \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=provider\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        },\n        \"privateProperties\": {\n            \"cx-common:query\":\"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"SkillAsset?cab=Conforming&mode=provider\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_14_CONSUMER_SKILL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=CONSUMER&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dconsumer&isFederated=true",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "distributionMode",
													"value": "CONSUMER",
													"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
												},
												{
													"key": "contract",
													"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
													"description": "Name of the contract to publish the skill under"
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dconsumer",
													"description": "Id of the skill"
												},
												{
													"key": "isFederated",
													"value": "true",
													"description": "Whether it is visible in the federated catalogue"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "I_02_00_15_CONSUMER_SKILL_ALT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"SkillAsset?cab=Conforming&mode=consumer\", \n        \"properties\": {\n            \"name\": \"Consumer-Forced Skill\",\n            \"description\": \"A conformity assessment skill.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n            \"rdf:type\": \"cx-common:SkillAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n            \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=consumer\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        },\n        \"privateProperties\": {\n            \"cx-common:query\":\"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"SkillAsset?cab=Conforming&mode=consumer\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_16_UNFEDERATED_SKILL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=ALL&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dunfederated&isFederated=false",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "distributionMode",
													"value": "ALL",
													"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
												},
												{
													"key": "contract",
													"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
													"description": "Name of the contract to publish the skill under"
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dunfederated",
													"description": "Id of the skill"
												},
												{
													"key": "isFederated",
													"value": "false"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "I_02_00_17_UNFEDERATED_SKILL_ALT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"SkillAsset?cab=Conforming&mode=unfederated\", \n        \"properties\": {\n            \"name\": \"Unfederated Skill\",\n            \"description\": \"A conformity assessment skill.\",\n            \"version\": \"1.9.4-SNAPSHOT\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n            \"rdf:type\": \"cx-common:SkillAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n            \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=all\",\n            \"cx-common:isFederated\": \"false^^xsd:boolean\"\n        },\n        \"privateProperties\": {\n            \"cx-common:query\":\"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"SkillAsset?cab=Conforming&mode=unfederated\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/assets",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "I_02_00_18_EDC_OWN_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listing of CAB Catalogue with open assets\", function () {",
													"    var jsonRequest=JSON.parse(pm.request.body.raw);",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    var jsonResponse=pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"@id\");",
													"    pm.expect(jsonResponse).to.have.property(\"@type\");",
													"    pm.expect(jsonResponse).to.have.property(\"@context\");",
													"    var type=jsonResponse[\"@type\"];",
													"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
													"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
													"    var participant=pm.response.json()[\"edc:participantId\"];",
													"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
													"    var service=jsonResponse[\"dcat:service\"];",
													"    pm.expect(service).to.have.property(\"@id\");",
													"    pm.expect(service).to.have.property(\"@type\");",
													"    var serviceType=service[\"@type\"];",
													"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(service).to.have.property(\"dct:terms\");",
													"    var serviceTerms=service[\"dct:terms\"];",
													"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
													"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
													"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
													"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
													"                ",
													"    var dataSets=jsonResponse['dcat:dataset'];",
													"    pm.expect(dataSets).to.be.not.null;",
													"    if(!Array.isArray(dataSets)) {",
													"        dataSets=[dataSets];",
													"    }",
													"",
													"    pm.expect(dataSets).to.be.of.length.gte(0);",
													"",
													"    dataSets.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"@type\");",
													"        var contractOfferType=contractOffer[\"@type\"];        ",
													"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
													"",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        var policy=contractOffer[\"odrl:hasPolicy\"];",
													"        pm.expect(policy).to.have.property(\"@id\");",
													"        pm.expect(policy).to.have.property(\"@type\");",
													"        var policyType=policy[\"@type\"];",
													"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
													"        pm.expect(policy).to.have.property(\"odrl:permission\");",
													"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
													"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
													"        pm.expect(policy).to.have.property(\"odrl:target\");",
													"        var policyTarget=policy[\"odrl:target\"];",
													"",
													"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
													"        var distributions=contractOffer[\"dcat:distribution\"];",
													"        pm.expect(distributions).to.be.not.null;",
													"        if(!Array.isArray(distributions)) {",
													"            distributions=[distributions];",
													"        }",
													"        distributions.map( function(distribution) {",
													"            pm.expect(distribution).to.have.property(\"@type\");",
													"            var distributionType=distribution[\"@type\"];",
													"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
													"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
													"            pm.expect(distribution).to.have.property(\"dct:format\");",
													"            var distributionFormat=distribution[\"dct:format\"];",
													"            pm.expect(distributionFormat).to.have.property(\"@id\");",
													"            var distributionFormatId=distributionFormat[\"@id\"];",
													"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
													"        });",
													"",
													"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"        var contenttype=contractOffer[\"edc:contenttype\"];",
													"        pm.expect(contenttype).to.contain(\"application/json\");",
													"        pm.expect(contenttype).to.contain(\"application/xml\");",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
													"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
													"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
													"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
													"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
													"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
													"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
													"    });",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=consumer';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=provider';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													" pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=closed';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													" pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=closed';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													" pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=unfederated';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													" pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=unfederated';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{cabEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{cabEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 200,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\"\n    }\n}\n"
										},
										"url": {
											"raw": "{{cabEdcControl}}/management/v2/catalog/request",
											"host": [
												"{{cabEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								}
							]
						},
						{
							"name": "I_02_01_OEM_GENERAL",
							"item": [
								{
									"name": "I_02_01_01_EDC_OWN_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listing of Own Catalogue\", function () {",
													"    var jsonRequest=JSON.parse(pm.request.body.raw);",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    var jsonResponse=pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"@id\");",
													"    pm.expect(jsonResponse).to.have.property(\"@type\");",
													"    pm.expect(jsonResponse).to.have.property(\"@context\");",
													"    var type=jsonResponse[\"@type\"];",
													"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
													"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
													"    var participant=pm.response.json()[\"edc:participantId\"];",
													"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
													"    var service=jsonResponse[\"dcat:service\"];",
													"    pm.expect(service).to.have.property(\"@id\");",
													"    pm.expect(service).to.have.property(\"@type\");",
													"    var serviceType=service[\"@type\"];",
													"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(service).to.have.property(\"dct:terms\");",
													"    var serviceTerms=service[\"dct:terms\"];",
													"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
													"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
													"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
													"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
													"                ",
													"    var dataSets=jsonResponse['dcat:dataset'];",
													"    pm.expect(dataSets).to.be.not.null;",
													"    if(!Array.isArray(dataSets)) {",
													"        dataSets=[dataSets];",
													"    }",
													"",
													"    dataSets.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"@type\");",
													"        var contractOfferType=contractOffer[\"@type\"];        ",
													"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
													"",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        var policy=contractOffer[\"odrl:hasPolicy\"];",
													"        pm.expect(policy).to.have.property(\"@id\");",
													"        pm.expect(policy).to.have.property(\"@type\");",
													"        var policyType=policy[\"@type\"];",
													"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
													"        pm.expect(policy).to.have.property(\"odrl:permission\");",
													"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
													"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
													"        pm.expect(policy).to.have.property(\"odrl:target\");",
													"        var policyTarget=policy[\"odrl:target\"];",
													"",
													"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
													"        var distributions=contractOffer[\"dcat:distribution\"];",
													"        pm.expect(distributions).to.be.not.null;",
													"        if(!Array.isArray(distributions)) {",
													"            distributions=[distributions];",
													"        }",
													"        distributions.map( function(distribution) {",
													"            pm.expect(distribution).to.have.property(\"@type\");",
													"            var distributionType=distribution[\"@type\"];",
													"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
													"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
													"            pm.expect(distribution).to.have.property(\"dct:format\");",
													"            var distributionFormat=distribution[\"dct:format\"];",
													"            pm.expect(distributionFormat).to.have.property(\"@id\");",
													"            var distributionFormatId=distributionFormat[\"@id\"];",
													"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
													"        });",
													"",
													"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"        var contenttype=contractOffer[\"edc:contenttype\"];",
													"        pm.expect(contenttype).to.contain(\"application/json\");",
													"        pm.expect(contenttype).to.contain(\"application/xml\");",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
													"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
													"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
													"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
													"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
													"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
													"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{oemEdcProviderControl}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/catalog/request",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "I_02_01_02_PROVISIONING_AGENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(17);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(2);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"recordDate\");",
													"        pm.expect(binding.recordDate).to.have.property(\"type\");",
													"        pm.expect(binding.recordDate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_type\");",
													"        pm.expect(binding.ls_type).to.have.property(\"type\");",
													"        pm.expect(binding.ls_type).to.have.property(\"value\");",
													"        pm.expect(binding.ls_type.value).to.be.oneOf([\"GearOil\",\"GearSet\"]);",
													"        pm.expect(binding).to.have.property(\"ls_name\");",
													"        pm.expect(binding.ls_name).to.have.property(\"type\");",
													"        pm.expect(binding.ls_name).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_value\");",
													"        pm.expect(binding.ls_value).to.have.property(\"type\");",
													"        pm.expect(binding.ls_value).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_unit\");",
													"        pm.expect(binding.ls_unit).to.have.property(\"type\");",
													"        pm.expect(binding.ls_unit).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_method\");",
													"        pm.expect(binding.ls_method).to.have.property(\"type\");",
													"        pm.expect(binding.ls_method).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_channels\");",
													"        pm.expect(binding.ls_channels).to.have.property(\"type\");",
													"        pm.expect(binding.ls_channels).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_classes\");",
													"        pm.expect(binding.ls_classes).to.have.property(\"type\");",
													"        pm.expect(binding.ls_classes).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_values\");",
													"        pm.expect(binding.ls_values).to.have.property(\"type\");",
													"        pm.expect(binding.ls_values).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?teleAnalysis ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values WHERE {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_03_PROVISIONING_AGENT_FAIL_NAMESPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph With Incorrect Namespaces\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(17);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://wrongid.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://wrongid.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://wrongid.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://wrongid.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?teleAnalysis ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values WHERE {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_04_PROVISIONING_AGENT_FAIL_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph With Invalid Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle, ?van, ?aggregate, ?assembly, ?supplier, ?teleAnalysis, ?operatingTime, ?mileage, ?recordDate, ?ls_type, ?ls_name, ?ls_value, ?ls_unit, ?ls_method, ?ls_channels, ?ls_classes, ?ls_values {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_05_PROVISIONING_AGENT_FAIL_PROFILE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph With Invalid Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"    pm.expect(pm.response.text()).to.contain(\"https://query.wikidata.org\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?teleAnalysis ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values WHERE {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    SERVICE <https://query.wikidata.org/sparql> {  \n        ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_06_MATCHMAKING_AGENT_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent (Catalogue Only)\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    var tieraBPNL=pm.environment.get(\"tieraBPNL\");",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.endsWith(tieraBPNL) && binding.predicate.value == 'https://w3id.org/catenax/ontology/common#hasConnector';",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/common') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/core') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/vehicle') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/function') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/reliability') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/behaviour') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_07_MATCHMAKING_AGENT_CATALOGUE_FAILURE_NS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent With Wrong Namespaces\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    var tieraBPNL=pm.environment.get(\"tieraBPNL\");",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.endsWith(tieraBPNL) && binding.predicate.value == 'https://w3id.org/catenax/ontology/common#hasConnector';",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/common') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/core') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/vehicle') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/reliability') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object. FILTER(STRSTARTS(STR(?predicate),\"https://wrongid.org\"))}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object. FILTER(STRSTARTS(STR(?predicate),\"https://wrongid.org\"))}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_08_MATCHMAKING_AGENT_CATALOGUE_FAILURE_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent With Wrong Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"    pm.expect(pm.response.json()).to.have.property(\"status\");",
													"    pm.expect(pm.response.json().status).to.be.equal(pm.response.code);",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"    pm.expect(/^[+-\\d]+$/.test(pm.response.json().message)).to.be.equal(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_09_MATCHMAKING_AGENT_WIKIDATA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent (Wikidata Federation)\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(1);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"item\");",
													"        pm.expect(binding.item).to.have.property(\"type\");",
													"        pm.expect(binding.item).to.have.property(\"value\");",
													"        pm.expect(binding.item.value.startsWith(\"http://www.wikidata.org\")).to.be.equal(true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT * { SERVICE <https://query.wikidata.org/sparql> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT * { SERVICE <https://query.wikidata.org/sparql> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_10_EDC_CAB_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listing of CAB Catalogue with open assets\", function () {",
													"    var jsonRequest=JSON.parse(pm.request.body.raw);",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    var jsonResponse=pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"@id\");",
													"    pm.expect(jsonResponse).to.have.property(\"@type\");",
													"    pm.expect(jsonResponse).to.have.property(\"@context\");",
													"    var type=jsonResponse[\"@type\"];",
													"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
													"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
													"    var participant=pm.response.json()[\"edc:participantId\"];",
													"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
													"    var service=jsonResponse[\"dcat:service\"];",
													"    pm.expect(service).to.have.property(\"@id\");",
													"    pm.expect(service).to.have.property(\"@type\");",
													"    var serviceType=service[\"@type\"];",
													"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(service).to.have.property(\"dct:terms\");",
													"    var serviceTerms=service[\"dct:terms\"];",
													"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
													"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
													"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
													"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
													"                ",
													"    var dataSets=jsonResponse['dcat:dataset'];",
													"    pm.expect(dataSets).to.be.not.null;",
													"    if(!Array.isArray(dataSets)) {",
													"        dataSets=[dataSets];",
													"    }",
													"",
													"    pm.expect(dataSets).to.be.of.length.gte(0);",
													"",
													"    dataSets.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"@type\");",
													"        var contractOfferType=contractOffer[\"@type\"];        ",
													"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
													"",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        var policy=contractOffer[\"odrl:hasPolicy\"];",
													"        pm.expect(policy).to.have.property(\"@id\");",
													"        pm.expect(policy).to.have.property(\"@type\");",
													"        var policyType=policy[\"@type\"];",
													"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
													"        pm.expect(policy).to.have.property(\"odrl:permission\");",
													"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
													"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
													"        pm.expect(policy).to.have.property(\"odrl:target\");",
													"        var policyTarget=policy[\"odrl:target\"];",
													"",
													"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
													"        var distributions=contractOffer[\"dcat:distribution\"];",
													"        pm.expect(distributions).to.be.not.null;",
													"        if(!Array.isArray(distributions)) {",
													"            distributions=[distributions];",
													"        }",
													"        distributions.map( function(distribution) {",
													"            pm.expect(distribution).to.have.property(\"@type\");",
													"            var distributionType=distribution[\"@type\"];",
													"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
													"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
													"            pm.expect(distribution).to.have.property(\"dct:format\");",
													"            var distributionFormat=distribution[\"dct:format\"];",
													"            pm.expect(distributionFormat).to.have.property(\"@id\");",
													"            var distributionFormatId=distributionFormat[\"@id\"];",
													"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
													"        });",
													"",
													"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"        var contenttype=contractOffer[\"edc:contenttype\"];",
													"        pm.expect(contenttype).to.contain(\"application/json\");",
													"        pm.expect(contenttype).to.contain(\"application/xml\");",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
													"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
													"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
													"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
													"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
													"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
													"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
													"    });",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=consumer';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=provider';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													" pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=closed' || contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=closed' || contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=unfederated' || contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=unfederated';",
													"        }   ",
													"    )).to.eq(false);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{cabEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/catalog/request",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "I_02_01_11_MATCHMAKING_AGENT_OPEN_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent Against an Open CAB Asset\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    ?subject ?predicate ?object. \n}"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dopen",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dopen"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_12_MATCHMAKING_AGENT_CLOSED_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent Against a Closed CAB Asset\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"    pm.expect(pm.response.json()).to.have.property(\"status\");",
													"    pm.expect(pm.response.json().status).to.be.equal(pm.response.code);",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"    pm.expect(/^[+-\\d]+$/.test(pm.response.json().message)).to.be.equal(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    ?subject ?predicate ?object. \n}"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dclosed",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dclosed"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-216](https://jira.catena-x.net/browse/KA-216)"
						},
						{
							"name": "I_02_02_SUPPLIER_GENERAL",
							"item": [
								{
									"name": "I_02_02_01_EDC_OWN_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listing of Own Catalogue\", function () {",
													"    var jsonRequest=JSON.parse(pm.request.body.raw);",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    var jsonResponse=pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"@id\");",
													"    pm.expect(jsonResponse).to.have.property(\"@type\");",
													"    pm.expect(jsonResponse).to.have.property(\"@context\");",
													"    var type=jsonResponse[\"@type\"];",
													"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
													"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
													"    var participant=pm.response.json()[\"edc:participantId\"];",
													"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
													"    var service=jsonResponse[\"dcat:service\"];",
													"    pm.expect(service).to.have.property(\"@id\");",
													"    pm.expect(service).to.have.property(\"@type\");",
													"    var serviceType=service[\"@type\"];",
													"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(service).to.have.property(\"dct:terms\");",
													"    var serviceTerms=service[\"dct:terms\"];",
													"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
													"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
													"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
													"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
													"                ",
													"    var dataSets=jsonResponse['dcat:dataset'];",
													"    pm.expect(dataSets).to.be.not.null;",
													"    if(!Array.isArray(dataSets)) {",
													"        dataSets=[dataSets];",
													"    }",
													"",
													"    dataSets.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"@type\");",
													"        var contractOfferType=contractOffer[\"@type\"];        ",
													"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
													"",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        var policy=contractOffer[\"odrl:hasPolicy\"];",
													"        pm.expect(policy).to.have.property(\"@id\");",
													"        pm.expect(policy).to.have.property(\"@type\");",
													"        var policyType=policy[\"@type\"];",
													"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
													"        pm.expect(policy).to.have.property(\"odrl:permission\");",
													"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
													"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
													"        pm.expect(policy).to.have.property(\"odrl:target\");",
													"        var policyTarget=policy[\"odrl:target\"];",
													"",
													"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
													"        var distributions=contractOffer[\"dcat:distribution\"];",
													"        pm.expect(distributions).to.be.not.null;",
													"        if(!Array.isArray(distributions)) {",
													"            distributions=[distributions];",
													"        }",
													"        distributions.map( function(distribution) {",
													"            pm.expect(distribution).to.have.property(\"@type\");",
													"            var distributionType=distribution[\"@type\"];",
													"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
													"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
													"            pm.expect(distribution).to.have.property(\"dct:format\");",
													"            var distributionFormat=distribution[\"dct:format\"];",
													"            pm.expect(distributionFormat).to.have.property(\"@id\");",
													"            var distributionFormatId=distributionFormat[\"@id\"];",
													"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
													"        });",
													"",
													"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"        var contenttype=contractOffer[\"edc:contenttype\"];",
													"        pm.expect(contenttype).to.contain(\"application/json\");",
													"        pm.expect(contenttype).to.contain(\"application/xml\");",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
													"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
													"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
													"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
													"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
													"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
													"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{tieraEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/catalog/request",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "I_02_02_02_BACKEND_SERVICE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Asynchronous Prognosis Service\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,202]);",
													"    pm.expect(pm.response.json()).to.have.property(\"timestamp\");",
													"    pm.expect(pm.response.json()).to.have.property(\"result\");",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "{{tieraAuthorization}}",
												"value": "{{tieraToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"header\": {\n    \"notificationID\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"senderBPN\": \"BPN0000SUPPLIER\",\n    \"senderAddress\": \"edcs://supplier.com/edc\",\n    \"recipientAddress\": \"https://supplier.com/edc\",\n    \"recipientBPN\": \"BPN0000SUPPLIER\",\n    \"severity\": \"MINOR\",\n    \"status\": \"SENT\",\n    \"targetDate\": \"2022-11-24T22:07:02.611048800Z\",\n    \"timeStamp\": \"2022-11-24T11:24:36.744320Z\",\n    \"classification\": \"RemainingUsefulLifePredictor\",\n    \"respondAssetId\": \"{{remotingAgent}}/callback\"\n  },\n  \"content\": {\n    \"requestRefId\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"endurancePredictorInputs\": [\n      {\n        \"componentId\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n        \"classifiedLoadSpectrumGearOil\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"GearOil\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        },\n        \"classifiedLoadSpectrumGearSet\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"GearSet\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        }\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tierAAsynchronBackend}}/api/v1/routine/notification",
											"host": [
												"{{tierAAsynchronBackend}}"
											],
											"path": [
												"api",
												"v1",
												"routine",
												"notification"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "I_02_02_03_BACKEND_SERVICE_FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wrongly Invoking the Asynchronous Prognosis Service\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "{{tieraAuthorization}}",
												"value": "{{tieraToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"header\": {\n    \"notificationID\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"senderBPN\": \"BPN0000SUPPLIER\",\n    \"senderAddress\": \"edcs://supplier.com/edc\",\n    \"recipientAddress\": \"https://supplier.com/edc\",\n    \"recipientBPN\": \"BPN0000SUPPLIER\",\n    \"severity\": \"MINOR\",\n    \"status\": \"SENT\",\n    \"targetDate\": \"2022-11-24T22:07:02.611048800Z\",\n    \"timeStamp\": \"2022-11-24T11:24:36.744320Z\",\n    \"classification\": \"RemainingUsefulLifePredictor\",\n    \"respondAssetId\": \"{{remotingAgent}}/callback\"\n  },\n  \"content\": {\n    \"requestRefId\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"endurancePredictorInputs\": [\n      {\n        \"componentId\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n        \"classifiedLoadSpectrumClutch\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"Clutch\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        }\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tierAAsynchronBackend}}/api/v1/routine/notification",
											"host": [
												"{{tierAAsynchronBackend}}"
											],
											"path": [
												"api",
												"v1",
												"routine",
												"notification"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "I_02_02_04_REMOTING_AGENT_CALLBACK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Remoting Agent Callback\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"referencedNotificationID\":\"DUMMY\",\n        \"sender\":\"TESTMANAGEMENT\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{remotingAgent}}/callback",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"callback"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_02_05_REMOTING_AGENT_CALLBACK_FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wrongly Invoking the Remoting Agent Callback\", function () {",
													"    pm.expect(pm.response.code).oneOf([400,500]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"shitID\":\"DUMMY\"\n        \"sender\":\"TESTMANAGEMENT\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{remotingAgent}}/callback",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"callback"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_02_06_REMOTING_AGENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(4);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(2);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"invocation\");",
													"        pm.expect(binding.invocation).to.have.property(\"type\");",
													"        pm.expect(binding.invocation).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"component\");",
													"        pm.expect(binding.component).to.have.property(\"type\");",
													"        pm.expect(binding.component).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation ?component ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component ?ls_type) { (<urn:uuid:1> \"GearOil\"^^xsd:string) (<urn:uuid:1> \"GearSet\"^^xsd:string) (<urn:uuid:2> \"GearSet\"^^xsd:string) (<urn:uuid:2> \"GearOil\"^^xsd:string)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_07_REMOTING_AGENT_FAIL_LACKING_ARGUMENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With a Lacking Argument\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(4);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(2);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"invocation\");",
													"        pm.expect(binding.invocation).to.have.property(\"type\");",
													"        pm.expect(binding.invocation).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"component\");",
													"        pm.expect(binding.component).to.have.property(\"type\");",
													"        pm.expect(binding.component).to.have.property(\"value\");",
													"        pm.expect(binding).not.to.have.property(\"timeHours\");",
													"        pm.expect(binding).not.to.have.property(\"distanceKm\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation ?component ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_08_REMOTING_AGENT_FAIL_NAMESPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With Wrong Namespace\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"    pm.expect(pm.response.text()).to.contain(\"https://w3id.org\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://wrongid.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation ?component ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_09_REMOTING_AGENT_FAIL_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With Incorrect Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://wrongid.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation, ?component, ?timeHours, ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_10_REMOTING_AGENT_FAIL_PROFILE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With Wrong Namespace\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"    pm.expect(pm.response.text()).to.contain(\"https://query.wikidata.org\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://wrongid.org/catenax/ontology/behaviour#>\n\nSELECT ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  SERVICE <https://query.wikidata.org/sparql> {  \n        ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> \n  }\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_11_MATCHMAKING_AGENT_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent (Catalogue Only)\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    var oemBPNL=pm.environment.get(\"oemBPNL\");",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.endsWith(oemBPNL) && binding.predicate.value == 'https://w3id.org/catenax/ontology/common#hasConnector';",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/common') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/core') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/vehicle') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/function') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/reliability') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/behaviour') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_02_12_MATCHMAKING_AGENT_CATALOGUE_FAILURE_NS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent With Wrong Namespaces\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    var oemBPNL=pm.environment.get(\"oemBPNL\");",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.endsWith(oemBPNL) && binding.predicate.value == 'https://w3id.org/catenax/ontology/common#hasConnector';",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/common') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/core') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/vehicle') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/reliability') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object. FILTER(STRSTARTS(STR(?predicate),\"https://wrongid.org\"))}",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object. FILTER(STRSTARTS(STR(?predicate),\"https://wrongid.org\"))}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_02_13_MATCHMAKING_AGENT_CATALOGUE_FAILURE_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent With Wrong Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"    pm.expect(pm.response.json()).to.have.property(\"status\");",
													"    pm.expect(pm.response.json().status).to.be.equal(pm.response.code);",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"    pm.expect(/^[+-\\d]+$/.test(pm.response.json().message)).to.be.equal(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?query=SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_02_14_MATCHMAKING_AGENT_WIKIDATA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent (Wikidata Federation)\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(1);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"item\");",
													"        pm.expect(binding.item).to.have.property(\"type\");",
													"        pm.expect(binding.item).to.have.property(\"value\");",
													"        pm.expect(binding.item.value.startsWith(\"http://www.wikidata.org\")).to.be.equal(true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?query=SELECT * { SERVICE <https://query.wikidata.org/sparql> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT * { SERVICE <https://query.wikidata.org/sparql> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_02_15_EDC_CAB_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listing of CAB Catalogue with open assets\", function () {",
													"    var jsonRequest=JSON.parse(pm.request.body.raw);",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    var jsonResponse=pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"@id\");",
													"    pm.expect(jsonResponse).to.have.property(\"@type\");",
													"    pm.expect(jsonResponse).to.have.property(\"@context\");",
													"    var type=jsonResponse[\"@type\"];",
													"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
													"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
													"    var participant=pm.response.json()[\"edc:participantId\"];",
													"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
													"    var service=jsonResponse[\"dcat:service\"];",
													"    pm.expect(service).to.have.property(\"@id\");",
													"    pm.expect(service).to.have.property(\"@type\");",
													"    var serviceType=service[\"@type\"];",
													"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(service).to.have.property(\"dct:terms\");",
													"    var serviceTerms=service[\"dct:terms\"];",
													"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
													"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
													"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
													"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
													"                ",
													"    var dataSets=jsonResponse['dcat:dataset'];",
													"    pm.expect(dataSets).to.be.not.null;",
													"    if(!Array.isArray(dataSets)) {",
													"        dataSets=[dataSets];",
													"    }",
													"",
													"    pm.expect(dataSets).to.be.of.length.gte(0);",
													"",
													"    dataSets.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"@type\");",
													"        var contractOfferType=contractOffer[\"@type\"];        ",
													"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
													"",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        var policy=contractOffer[\"odrl:hasPolicy\"];",
													"        pm.expect(policy).to.have.property(\"@id\");",
													"        pm.expect(policy).to.have.property(\"@type\");",
													"        var policyType=policy[\"@type\"];",
													"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
													"        pm.expect(policy).to.have.property(\"odrl:permission\");",
													"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
													"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
													"        pm.expect(policy).to.have.property(\"odrl:target\");",
													"        var policyTarget=policy[\"odrl:target\"];",
													"",
													"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
													"        var distributions=contractOffer[\"dcat:distribution\"];",
													"        pm.expect(distributions).to.be.not.null;",
													"        if(!Array.isArray(distributions)) {",
													"            distributions=[distributions];",
													"        }",
													"        distributions.map( function(distribution) {",
													"            pm.expect(distribution).to.have.property(\"@type\");",
													"            var distributionType=distribution[\"@type\"];",
													"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
													"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
													"            pm.expect(distribution).to.have.property(\"dct:format\");",
													"            var distributionFormat=distribution[\"dct:format\"];",
													"            pm.expect(distributionFormat).to.have.property(\"@id\");",
													"            var distributionFormatId=distributionFormat[\"@id\"];",
													"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
													"        });",
													"",
													"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"        var contenttype=contractOffer[\"edc:contenttype\"];",
													"        pm.expect(contenttype).to.contain(\"application/json\");",
													"        pm.expect(contenttype).to.contain(\"application/xml\");",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
													"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
													"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
													"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
													"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
													"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
													"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
													"    });",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=consumer';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=provider';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													" pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=closed' || contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=closed' || contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=unfederated' || contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=unfederated';",
													"        }   ",
													"    )).to.eq(false);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{cabEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/catalog/request",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "I_02_02_16_MATCHMAKING_AGENT_OPEN_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent Against an Open CAB Asset\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    ?subject ?predicate ?object. \n}"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?asset={{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dopen",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dopen"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_17_MATCHMAKING_AGENT_CLOSED_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent Against a Closed CAB Asset\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"    pm.expect(pm.response.json()).to.have.property(\"status\");",
													"    pm.expect(pm.response.json().status).to.be.equal(pm.response.code);",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"    pm.expect(/^[+-\\d]+$/.test(pm.response.json().message)).to.be.equal(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    ?subject ?predicate ?object. \n}"
										},
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?asset={{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dclosed",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dclosed"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-217](https://jira.catena-x.net/browse/KA-217)"
						}
					],
					"description": "Integration Tests for Knowledge Agents based on the Behaviour Twin Remaining Useful Life Scenario"
				}
			],
			"description": "Contains all Integration Test Suites"
		},
		{
			"name": "E2E Tests",
			"item": [
				{
					"name": "E2E_02_BT",
					"item": [
						{
							"name": "E2E_02_00_OEM_SETUP",
							"item": [
								{
									"name": "E2E_02_00_01_OEM_GRAPH_POLICY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Policy Established\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Policy?oem=Graph\",\n    \"policy\": {\n        \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n        \"@type\": \"Set\",\n        \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Graph\",\n        \"permission\": [\n            {\n                \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n                \"action\": \"USE\",\n                \"constraint\": {\n                    \"@type\": \"LogicalConstraint\",\n                    \"or\": [\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{oemBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{cabBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{consumerBPNL}}\"\n                        },\n                        {\n                            \"@type\": \"Constraint\",\n                            \"leftOperand\": \"BusinessPartnerNumber\",\n                            \"operator\": \"eq\",\n                            \"rightOperand\": \"{{tieraBPNL}}\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/policydefinitions",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "E2E_02_00_02_OEM_GRAPH_CONTRACT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?oem=Graph\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?oem=Graph\",\n    \"contractPolicyId\": \"Policy?oem=Graph\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?oem=Graph\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/contractdefinitions",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "E2E_02_00_03_OEM_RELIABILITY_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Data Asset Is Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n     \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n     \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n     \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n     \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n     \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n     \"sh\": \"http://www.w3.org/ns/shacl#\",\n     \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n     \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"cx-taxo:GraphAsset?oem=BehaviourTwinReliability\",\n    \"properties\": {\n        \"cx-common:name\": \"Reliability Data Service\",\n        \"cx-common:description\": \"Test Telematics Data as provided by an OEM.\",\n        \"cx-common:description@de\": \"Test Telematik Daten eines OEM.\",\n        \"cx-common:version\": \"CX_RuL_Testdata_v1.0.0\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n        \"dct:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/taxonomy>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/reliability>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix schema: <http://schema.org/> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix edc: <https://w3id.org/edc/v0.0.1/ns/> .\\n@prefix cx-common: <https://w3id.org/catenax/ontology/common#> .\\n@prefix cx-core: <https://w3id.org/catenax/ontology/core#> .\\n@prefix cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#> .\\n@prefix cx-reliability: <https://w3id.org/catenax/ontology/reliability#> .\\n@prefix cx-sh: <https://w3id.org/catenax/ontology/schema#> .\\n@prefix cx-taxo: <https://w3id.org/catenax/taxonomy#> .\\n@prefix : <https://w3id.org/catenax/taxonomy#GraphAsset?oem=BehaviourTwinReliability&shapeObject=> .\\n\\n:LoadSpectrumShape a sh:NodeShape ;\\n    sh:targetClass  cx-reliability:LoadSpectrum;\\n    sh:property :observationOfShape, \\n                :countingValueShape, \\n                :countingUnitShape, \\n                :countingMethodShape, \\n                :channelsShape, \\n                :classesShape, \\n                :valuesShape.\\n\\n:observationOfShape a sh:PropertyShape;\\n    sh:path cx-reliability:observationOf;\\n    sh:in (cx-taxo:GearOil cx-taxo:GearSet cx-taxo:Clutch).\\n\\n:countingValueShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingValue.\\n\\n:countingUnitShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingUnit.\\n\\n:countingMethodShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingMethod.\\n\\n:countingMethodShape a sh:PropertyShape;\\n    sh:path cx-reliability:countingMethod.\\n\\n:channelsShape a sh:PropertyShape;\\n    sh:path cx-reliability:channels.\\n\\n:classesShape a sh:PropertyShape;\\n    sh:path cx-reliability:classes.\\n\\n:valuesShape a sh:PropertyShape;\\n    sh:path cx-reliability:values.\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n\t\t\"privateProperties\": {\n\t\t},\n    \"dataAddress\": {\n        \"id\": \"cx-taxo:GraphAsset?oem=BehaviourTwinReliability\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{oemProviderAgent}}/sparql\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"(http|edc)s?://.*\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v3/assets",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v3",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-218](https://jira.catena-x.net/browse/KA-218)",
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "{{oemEdcApiKey}}",
										"type": "string"
									},
									{
										"key": "key",
										"value": "X-Api-Key",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "E2E_02_01_SUPPLIER_SETUP",
							"item": [
								{
									"name": "E2E_02_01_00_SUPPLIER_GRAPH_POLICY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Policy Established\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"@context\": {\n\t\t\"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n\t\t\"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n\t},\n\t\"@id\": \"Policy?supplier=Graph\",\n\t\"policy\": {\n\t\t\"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n\t\t\"@type\": \"Set\",\n\t\t\"uid\": \"https://w3id.org/catenax/ontology/common#Policy?supplier=Graph\",\n\t\t\"permission\": [\n\t\t\t{\n\t\t\t\t\"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n\t\t\t\t\"action\": \"USE\",\n\t\t\t\t\"constraint\": {\n\t\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\t\"or\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"@type\": \"Constraint\",\n\t\t\t\t\t\t\t\"leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\"operator\": \"eq\",\n\t\t\t\t\t\t\t\"rightOperand\": \"{{oemBPNL}}\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"@type\": \"Constraint\",\n\t\t\t\t\t\t\t\"leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\"operator\": \"eq\",\n\t\t\t\t\t\t\t\"rightOperand\": \"{{tieraBPNL}}\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"@type\": \"Constraint\",\n\t\t\t\t\t\t\t\"leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\t\"operator\": \"eq\",\n\t\t\t\t\t\t\t\"rightOperand\": \"{{cabBPNL}}\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/policydefinitions",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "E2E_02_01_01_SUPPLIER_GRAPH_CONTRACT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?supplier=Graph\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?supplier=Graph\",\n    \"contractPolicyId\": \"Policy?supplier=Graph\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?supplier=Graph\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v2/contractdefinitions",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "E2E_02_01_02_SUPPLIER_BEHAVIOUR_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Function Graph Asset Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"@context\": {\n\t\t\"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n\t\t\"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\t\t\"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n\t\t\"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n\t\t\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n\t\t\"sh\": \"http://www.w3.org/ns/shacl#\",\n\t\t\"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n\t\t\"dc\": \"https://purl.org/dc/terms/\"\n\t},\n\t\"@id\": \"cx-taxo:GraphAsset?supplier=HealthIndicatorGearbox\",\n\t\"properties\": {\n\t\t\"cx-common:name\": \"Health Prognosis Service for Gearboxes\",\n\t\t\"cx-common:description\": \"A second sample graph asset/offering referring to a specific prognosis resource.\",\n\t\t\"cx-common:description@de\": \"Ein weiteres Beispielasset für eine Prognosefunktion.\",\n\t\t\"cx-common:version\": \"1.12.19\",\n\t\t\"cx-common:contenttype\": \"application/json, application/xml\",\n\t\t\"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n\t\t\"dc:type\": \"cx-taxo:GraphAsset\",\n\t\t\"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/function>,<https://w3id.org/catenax/ontology/behaviour>,<https://w3id.org/catenax/ontology/behaviour>\",\n\t\t\"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n\t\t\"sh:shapesGraph\": \"    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix schema: <http://schema.org/> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix edc: <https://w3id.org/edc/v0.0.1/ns/> .\\n@prefix cx-common: <https://w3id.org/catenax/ontology/common#> .\\n@prefix cx-core: <https://w3id.org/catenax/ontology/core#> .\\n@prefix cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#> .\\n@prefix cx-reliability: <https://w3id.org/catenax/ontology/reliability#> .\\n@prefix cx-sh: <https://w3id.org/catenax/ontology/schema#> .\\n@prefix cx-taxo: <https://w3id.org/catenax/taxonomy#> .\\n@prefix : <https://w3id.org/catenax/taxonomy#GraphAsset?supplier=BehaviourTwinHI&shapeObject=> .\\n\\n# Prognosis Function\\n:PrognosisFunctionShape rdf:type sh:NodeShape ;\\n    sh:targetClass cx-behaviour:PrognosisFunction;\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingMethod;\\n        sh:path cx-behaviour:countingMethod;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingValue;\\n        sh:path cx-behaviour:countingValue;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingUnit;\\n        sh:path cx-behaviour:countingUnit;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:channels;\\n        sh:path cx-behaviour:headerChannels;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:classes;\\n        sh:path cx-behaviour:bodyClasses;\\n    ].\\n\\n    # Prognosis Function\\n    :PrognosisFunctionShape a sh:NodeShape ;\\n        sh:targetClass cx-behaviour:PrognosisFunction;\\n        sh:property[\\n            cx-sh:hasAsArgument cx-reliability:countingMethod;\\n            sh:path cx-behaviour:countingMethod;\\n        ];\\n        sh:property[\\n            cx-sh:hasAsArgument cx-reliability:countingValue;\\n            sh:path cx-behaviour:countingValue;\\n        ];\\n        sh:property[\\n            cx-sh:hasAsArgument cx-reliability:countingUnit;\\n            sh:path cx-behaviour:countingUnit;\\n        ];\\n        sh:property[\\n            cx-sh:hasAsArgument cx-reliability:channels;\\n            sh:path cx-behaviour:headerChannels;\\n        ];\\n        sh:property[\\n            cx-sh:hasAsArgument cx-reliability:classes;\\n            sh:path cx-behaviour:bodyClasses;\\n        ].\\n    \\n:HealthIndicationShape a sh:NodeShape ;\\n    cx-sh:extensionOf :PrognosisFunctionShape;\\n    sh:targetClass cx-behaviour:HealthIndication;\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:observationOf;\\n        sh:path cx-behaviour:observationType;\\n        sh:in ( cx-taxo:Clutch );\\n    ];\\n    sh:property :HealthIndicationResultShape.\\n    \\n:HealthIndicationResultShape a sh:PropertyShape;\\n    cx-sh:outputOf :HealthIndicationShape;\\n    sh:path cx-behaviour:HealthIndicationResult .\",\n\t\t\"cx-common:isFederated\": \"true^^xsd:boolean\"\n\t},\n\t\"dataAddress\": {\n\t\t\"id\": \"cx-taxo:GraphAsset?supplier=HealthIndicatorGearbox\",\n\t\t\"@type\": \"DataAddress\",\n\t\t\"baseUrl\": \"{{tierARemotingAgent}}/repositories/health\",\n\t\t\"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n\t\t\"proxyPath\": \"false\",\n\t\t\"proxyMethod\": \"true\",\n\t\t\"proxyQueryParams\": \"true\",\n\t\t\"proxyBody\": \"true\",\n\t\t\"authKey\": \"{{supplierBackendAuthKey}}\",\n\t\t\"authCode\": \"{{supplierBackendAuthCode}}\",\n\t\t\"cx-common:allowServicePattern\": \"{{tierARemotingAgent}}/repositories/health\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v3/assets",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v3",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "E2E_02_01_03_SUPPLIER_BEHAVIOUR_GRAPH_VARIANT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Function Graph Asset Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dc\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"cx-taxo:GraphAsset?supplier=BehaviourTwinRUL\",\n    \"properties\": {\n        \"cx-common:name\": \"Lifetime Prognosis Service for Gearboxes\",\n        \"cx-common:description\": \"A sample graph asset/offering referring to a specific prognosis resource.\",\n        \"cx-common:description@de\": \"Ein Beispielasset für eine Prognosefunktion.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?supplier=Graph\",\n        \"dc:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>,<https://w3id.org/catenax/ontology/core>,<https://w3id.org/catenax/ontology/function>,<https://w3id.org/catenax/ontology/behaviour>,<https://w3id.org/catenax/ontology/behaviour>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\\n@prefix schema: <http://schema.org/> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix edc: <https://w3id.org/edc/v0.0.1/ns/> .\\n@prefix cx-common: <https://w3id.org/catenax/ontology/common#> .\\n@prefix cx-core: <https://w3id.org/catenax/ontology/core#> .\\n@prefix cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#> .\\n@prefix cx-fx: <https://w3id.org/catenax/ontology/function#> .\\n@prefix cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#> .\\n@prefix cx-reliability: <https://w3id.org/catenax/ontology/reliability#> .\\n@prefix cx-sh: <https://w3id.org/catenax/ontology/schema#> .\\n@prefix cx-taxo: <https://w3id.org/catenax/taxonomy#> .\\n@prefix : <https://w3id.org/catenax/taxonomy#GraphAsset?supplier=BehaviourTwinRUL&shapeObject=> .\\n\\n# Prognosis Function\\n:PrognosisFunctionShape rdf:type sh:NodeShape ;\\n    sh:targetClass cx-behaviour:PrognosisFunction;\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingMethod;\\n        sh:path cx-behaviour:countingMethod;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingValue;\\n        sh:path cx-behaviour:countingValue;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:countingUnit;\\n        sh:path cx-behaviour:countingUnit;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:channels;\\n        sh:path cx-behaviour:headerChannels;\\n    ];\\n    sh:property [\\n        cx-sh:hasAsArgument cx-reliability:classes;\\n        sh:path cx-behaviour:bodyClasses;\\n    ].\\n\\n:RemainingUsefulLifeShape rdf:type sh:NodeShape ;\\n    cx-sh:extensionOf :PrognosisFunctionShape;\\n    sh:targetClass cx-behaviour:RemainingUsefulLife ;\\n      sh:property[\\n        cx-sh:hasAsArgument cx-reliability:observationOf;\\n        sh:path cx-behaviour:observationType;\\n        sh:in ( cx-taxo:GearSet cx-taxo:GearOil );\\n    ];\\n    sh:property :RemainingUsefulLifeResultShape.\\n\\n:RemainingUsefulLifeResult rdf:type sh:PropertyShape;\\n    cx-sh:outputOf :RemainingUsefulLifeShape;\\n    sh:path cx-behaviour:RemainingUsefulLifeResult .\\n\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"dataAddress\": {\n        \"id\": \"cx-taxo:GraphAsset?supplier=BehaviourTwinRUL\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{tierARemotingAgent}}/repositories/rul\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{supplierBackendAuthKey}}\",\n        \"authCode\": \"{{supplierBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"{{tierARemotingAgent}}/repositories/rul\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/management/v3/assets",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"management",
												"v3",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								}
							],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "value",
										"value": "{{tieraEdcApiKey}}",
										"type": "string"
									},
									{
										"key": "key",
										"value": "X-Api-Key",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "E2E_02_02_CONSUMER_PROVIDER_SETUP",
							"item": [
								{
									"name": "E2E_02_02_01_OPEN_POLICY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Policy?provider=Asset&mode=open\",\n    \"policy\": {\n        \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n        \"@type\": \"Set\",\n        \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Graph\",\n        \"permission\": [\n            {\n                \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n                \"action\": \"USE\",\n                \"constraint\": []\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/policydefinitions",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "E2E_02_02_02_OPEN_CONTRACT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,204,409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?provider=Asset&mode=open\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?provider=Asset&mode=open\",\n    \"contractPolicyId\": \"Policy?provider=Asset&mode=open\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?provider=Asset&mode=open\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/contractdefinitions",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "E2E_02_02_03_REGISTER_RUL_SKILL_REMOTE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\nPREFIX owl:    <http://www.w3.org/2002/07/owl#> \nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"@van\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (cx-taxo:GearOil) (cx-taxo:GearSet) \n  }\n\n  bpnl:{{oemBPNL}} cx-common:hasConnector ?oemEDC.\n  ?oemEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; cx-common:id ?reliabilityAssetId].\n  \n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n    } # OEM#GRAPH\n\n    ?supplierSite owl:sameAs ?supplier.\n    ?supplierSite cx-common:hasConnector ?supplierEDC.\n    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n    SERVICE ?supplierEDC {\n        GRAPH ?prognosisAssetId {\n            SELECT ?distanceKm ?timeHours WHERE {\n                ?invocation a cx-behaviour:RemainingUsefulLife;\n                        cx-behaviour:sender bpnl:{{oemBPNL}};\n                        cx-behaviour:senderConnector ?oemEDC;\n                        cx-behaviour:recipient ?supplier;\n                        cx-behaviour:recipientConnector ?supplierEDC;\n                        cx-behaviour:targetDate ?recordDate;\n                        cx-behaviour:timeStamp ?recordDate;\n                        cx-behaviour:component ?assembly;\n                        cx-behaviour:observationType ?ls_type;\n                        cx-behaviour:statusDate ?recordDate;\n                        cx-behaviour:statusOperatingHours ?operatingTime;\n                        cx-behaviour:statusMileage ?mileage;\n                        cx-behaviour:countingValue ?ls_value;\n                        cx-behaviour:countingUnit ?ls_unit;\n                        cx-behaviour:countingMethod ?ls_method;\n                        cx-behaviour:headerChannels ?ls_channels;\n                        cx-behaviour:bodyClasses ?ls_classes;\n                        cx-behaviour:bodyCountsList ?ls_values;\n                        cx-behaviour:remainingOperatingHours ?timeHours;\n                        cx-behaviour:remainingRunningDistance ?distanceKm.\n            }\n        } # SUPPLIER#GRAPH          \n    } # SUPPLIER#CATALOG\n\n  } # OEM#CATALOG\n\n} # SELECT\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote&distributionMode=PROVIDER&contract=Contract%3Fprovider%3DAsset%26mode%3Dopen&isFederated=true",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote"
												},
												{
													"key": "distributionMode",
													"value": "PROVIDER"
												},
												{
													"key": "contract",
													"value": "Contract%3Fprovider%3DAsset%26mode%3Dopen"
												},
												{
													"key": "isFederated",
													"value": "true"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
									},
									"response": []
								},
								{
									"name": "E2E_02_02_04_REGISTER_RUL_SKILL_LOCAL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\nPREFIX owl:    <http://www.w3.org/2002/07/owl#> \nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"@van\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (cx-taxo:GearOil) (cx-taxo:GearSet) \n  }\n\n  bpnl:{{oemBPNL}} cx-common:hasConnector ?oemEDC.\n  ?oemEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; cx-common:id ?reliabilityAssetId].\n  \n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n    } # OEM#GRAPH\n\n    ?supplierSite owl:sameAs ?supplier.\n    ?supplierSite cx-common:hasConnector ?supplierEDC.\n    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n    SERVICE ?supplierEDC {\n        GRAPH ?prognosisAssetId {\n            SELECT ?distanceKm ?timeHours WHERE {\n                ?invocation a cx-behaviour:RemainingUsefulLife;\n                        cx-behaviour:sender bpnl:{{oemBPNL}};\n                        cx-behaviour:senderConnector ?oemEDC;\n                        cx-behaviour:recipient ?supplier;\n                        cx-behaviour:recipientConnector ?supplierEDC;\n                        cx-behaviour:targetDate ?recordDate;\n                        cx-behaviour:timeStamp ?recordDate;\n                        cx-behaviour:component ?assembly;\n                        cx-behaviour:observationType ?ls_type;\n                        cx-behaviour:statusDate ?recordDate;\n                        cx-behaviour:statusOperatingHours ?operatingTime;\n                        cx-behaviour:statusMileage ?mileage;\n                        cx-behaviour:countingValue ?ls_value;\n                        cx-behaviour:countingUnit ?ls_unit;\n                        cx-behaviour:countingMethod ?ls_method;\n                        cx-behaviour:headerChannels ?ls_channels;\n                        cx-behaviour:bodyClasses ?ls_classes;\n                        cx-behaviour:bodyCountsList ?ls_values;\n                        cx-behaviour:remainingOperatingHours ?timeHours;\n                        cx-behaviour:remainingRunningDistance ?distanceKm.\n            }\n        } # SUPPLIER#GRAPH          \n    } # SUPPLIER#CATALOG\n\n  } # OEM#CATALOG\n\n} # SELECT\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent/skill?asset=SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal&distributionMode=CONSUMER&contract=Contract%3Fprovider%3DAsset%26mode%3Dopen&isFederated=true",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal"
												},
												{
													"key": "distributionMode",
													"value": "CONSUMER"
												},
												{
													"key": "contract",
													"value": "Contract%3Fprovider%3DAsset%26mode%3Dopen"
												},
												{
													"key": "isFederated",
													"value": "true"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
									},
									"response": []
								},
								{
									"name": "E2E_02_02_05_REGISTER_RUL_SKILL_CONSUMER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\nPREFIX owl:    <http://www.w3.org/2002/07/owl#> \nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"@van\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (cx-taxo:GearOil) (cx-taxo:GearSet) \n  }\n\n  bpnl:{{oemBPNL}} cx-common:hasConnector ?oemEDC.\n  ?oemEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; cx-common:id ?reliabilityAssetId].\n  \n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n    } # OEM#GRAPH\n\n    ?supplierSite owl:sameAs ?supplier.\n    ?supplierSite cx-common:hasConnector ?supplierEDC.\n    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n    SERVICE ?supplierEDC {\n        GRAPH ?prognosisAssetId {\n            SELECT ?distanceKm ?timeHours WHERE {\n                ?invocation a cx-behaviour:RemainingUsefulLife;\n                        cx-behaviour:sender bpnl:{{oemBPNL}};\n                        cx-behaviour:senderConnector ?oemEDC;\n                        cx-behaviour:recipient ?supplier;\n                        cx-behaviour:recipientConnector ?supplierEDC;\n                        cx-behaviour:targetDate ?recordDate;\n                        cx-behaviour:timeStamp ?recordDate;\n                        cx-behaviour:component ?assembly;\n                        cx-behaviour:observationType ?ls_type;\n                        cx-behaviour:statusDate ?recordDate;\n                        cx-behaviour:statusOperatingHours ?operatingTime;\n                        cx-behaviour:statusMileage ?mileage;\n                        cx-behaviour:countingValue ?ls_value;\n                        cx-behaviour:countingUnit ?ls_unit;\n                        cx-behaviour:countingMethod ?ls_method;\n                        cx-behaviour:headerChannels ?ls_channels;\n                        cx-behaviour:bodyClasses ?ls_classes;\n                        cx-behaviour:bodyCountsList ?ls_values;\n                        cx-behaviour:remainingOperatingHours ?timeHours;\n                        cx-behaviour:remainingRunningDistance ?distanceKm.\n            }\n        } # SUPPLIER#GRAPH          \n    } # SUPPLIER#CATALOG\n\n  } # OEM#CATALOG\n\n} # SELECT\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerMatchmakingAgent}}/api/agent/skill?asset=SkillAsset?consumer=RemainingUsefulLife&distributionMode=PROVIDER&isFederated=false",
											"host": [
												"{{consumerMatchmakingAgent}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "SkillAsset?consumer=RemainingUsefulLife"
												},
												{
													"key": "distributionMode",
													"value": "PROVIDER"
												},
												{
													"key": "isFederated",
													"value": "false"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
									},
									"response": []
								},
								{
									"name": "E2E_02_02_06_REGISTER_BEH_SKILL_PROVIDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Behaviour Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX schema: <http://schema.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-sh: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX cx-core: <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-reliability: <https://w3id.org/catenax/ontology/reliability#> \nPREFIX cx-schema: <https://w3id.org/catenax/ontology/schema#>\nPREFIX cx-vehicle: <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\n\n################################################################\n# Sample for a Provider-Deployed Goal-Oriented SparQL Skill which\n#  - Depending on the targetted result\n#  - Finds the right supplier prognosis asset and its preconditions\n#  - jumps into the OEM-owned reliability asset to obtain the required data\n#  - feeds the gathered data back into the respective supplier connector/agent \n#    to perform a behavioural prognosis\n# Author: cgjung\n# (c) 2023-2024 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?van ?supplier ?vehicle ?assembly ?operatingTime ?mileage ?prognosis WHERE {\n\n  VALUES (?van ?aggregate ?result_type) { \n      (\"@van\"^^xsd:string \"Differential Gear\"^^xsd:string <@resultType>) \n  }\n\n  # Determine the prognosis assets\n  ?output sh:path ?result_type.\n  ?output cx-sh:outputOf ?functionShape. \n  ?assetFunction cx-sh:shapeObject ?functionShape.\n  ?functionConnector cx-common:offers ?assetFunction.\n  ?functionShape cx-sh:extensionOf* ?parentFunctionShape.\n  ?functionShape sh:targetClass ?function.\n  ?parentFunctionShape sh:property ?functionProperty.\n  ?functionProperty cx-sh:hasAsArgument ?argument.\n  ?functionProperty sh:in ?parameters.\n  ?parameters rdf:rest*/rdf:first ?ls_type.\n\n  # Determine the target\n  ?assetData cx-sh:shapeObject ?nodeShape.\n  ?dataConnector cx-common:offers ?assetData.\n  ?nodeShape sh:property ?propertyShape.\n  ?propertyShape sh:path ?argument. \n  ?propertyShape sh:in ?parameters_target.\n  ?parameters_target rdf:rest*/rdf:first ?ls_type.\n\n  SERVICE ?dataConnector { \n    GRAPH ?assetData { \n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n         ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n         ?teleAnalysis rdf:type cx-reliability:Analysis;\n             cx-reliability:analysedObject ?assembly;\n             cx-reliability:operatingHoursOfVehicle ?operatingTime;\n             cx-reliability:mileageOfVehicle ?mileage;\n             cx-core:startDateTime ?recordDate;\n             cx-reliability:result [\n                 cx-core:id ?ls_type;\n                 cx-core:name ?ls_name;\n                 cx-reliability:countingValue ?ls_value;\n                 cx-reliability:countingUnit ?ls_unit;\n                 cx-reliability:countingMethod ?ls_method;\n                 cx-reliability:channels ?ls_channels;\n                 cx-reliability:classes ?ls_classes;\n                 cx-reliability:values ?ls_values\n             ].\n     }\n  }\n\n  SERVICE ?functionConnector {\n    GRAPH ?assetFunction { \n      SELECT ?prognosis WHERE {\n        ?invocation a ?function;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate ?recordDate;\n              cx-behaviour:timeStamp ?recordDate;\n              cx-behaviour:component ?assembly;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate ?recordDate;\n              cx-behaviour:statusOperatingHours ?operatingTime;\n              cx-behaviour:statusMileage ?mileage;\n              cx-behaviour:countingValue ?ls_value;\n              cx-behaviour:countingUnit ?ls_unit;\n              cx-behaviour:countingMethod ?ls_method;\n              cx-behaviour:headerChannels ?ls_channels;\n              cx-behaviour:bodyClasses ?ls_classes;\n              cx-behaviour:bodyCountsList ?ls_values;\n              ?result_type ?prognosis.\n      }\n    }\n  } # SUPPLIER#CATALOG\n\n} # SELECT"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent/skill?asset=cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis&distributionMode=PROVIDER&contract=Contract%3Foem%3DSkill&allowServicesPattern=edcs%3F%3A%2F%2F.*&denyServicesPattern=https%3F%3A%2F%2F.*",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis"
												},
												{
													"key": "distributionMode",
													"value": "PROVIDER"
												},
												{
													"key": "contract",
													"value": "Contract%3Foem%3DSkill"
												},
												{
													"key": "allowServicesPattern",
													"value": "edcs%3F%3A%2F%2F.*"
												},
												{
													"key": "denyServicesPattern",
													"value": "https%3F%3A%2F%2F.*"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "E2E_02_03_OEM_CALL_SUPPLIER",
							"item": [
								{
									"name": "E2E_02_03_01_OEM_FEDERATED_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check Federated Data Catalogue Appearance\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(2);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(1);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.id.value == 'cx-taxo:GraphAsset?supplier=BehaviourTwinRUL';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?asset ?id WHERE { <{{tieraEdcIdsUrlSparql}}> <https://w3id.org/catenax/ontology/common%23offers> ?asset. ?asset <https://w3id.org/catenax/ontology/common%23id> ?id}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?asset ?id WHERE { <{{tieraEdcIdsUrlSparql}}> <https://w3id.org/catenax/ontology/common%23offers> ?asset. ?asset <https://w3id.org/catenax/ontology/common%23id> ?id}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_03_02_OEM_CALL_REMOTE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinRUL",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinRUL"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_03_03_OEM_CALL_REMOTE_FAIL_INVALID_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinDummy",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinDummy"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_02_04_OEM_CALL_REMOTE_FAIL_INVALID_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinRUL",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinRUL"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_02_05_OEM_CALL_REMOTE_FAIL_NS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json().results.bindings.length).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    FILTER(STRSTARTS(STR(?predicate),\"http://wrongid\")).\n    ?subject ?predicate ?object. \n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinRUL",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{tieraEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Fsupplier%3DBehaviourTwinRUL"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							]
						},
						{
							"name": "E2E_02_04_PROVIDER_CALL_OEM",
							"item": [
								{
									"name": "E2E_02_04_01_PROVIDER_FEDERATED_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check Federated Data Catalogue Appearance\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(2);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(1);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.id.value == 'cx-taxo:GraphAsset?oem=BehaviourTwinReliability';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cabAgentPlane}}/agent?query=SELECT ?asset ?id WHERE { <{{oemEdcIdsUrlSparql}}> <https://w3id.org/catenax/ontology/common%23offers> ?asset. ?asset <https://w3id.org/catenax/ontology/common%23id> ?id}",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?asset ?id WHERE { <{{oemEdcIdsUrlSparql}}> <https://w3id.org/catenax/ontology/common%23offers> ?asset. ?asset <https://w3id.org/catenax/ontology/common%23id> ?id}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_04_02_PROVIDER_CALL_REMOTE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/agent?asset={{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinReliability",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinReliability"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_04_03_PROVIDER_CALL_REMOTE_FAIL_INVALID_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/agent?asset={{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinDummy",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinDummy"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_04_04_PROVIDER_CALL_REMOTE_FAIL_INVALID_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/agent?asset={{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinReliability",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinReliability"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "E2E_02_04_05_PROVIDER_CALL_REMOTE_FAIL_NS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json().results.bindings.length).to.be.eq(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    FILTER(STRSTARTS(STR(?predicate),\"http://wrongid\")).\n    ?subject ?predicate ?object. \n}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{cabAgentPlane}}/agent?asset={{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinReliability",
											"host": [
												"{{cabAgentPlane}}"
											],
											"path": [
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23cx-taxo%3AGraphAsset%3Foem%3DBehaviourTwinReliability"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIzYlFRZDIwRjZwOVR6OFFKZEtteHZ2bTNtRGd5aWNrcmtjbFFoSHY4YmUwIn0.eyJleHAiOjE3MjE3Mjk3MjQsImlhdCI6MTcyMTcyOTQyNCwiYXV0aF90aW1lIjoxNzIxNzI5NDIzLCJqdGkiOiJjOTJlMTYwYi1jZjVlLTQ0NjEtOGU1Ni0wNmE5MzMzNGE2NzgiLCJpc3MiOiJodHRwczovL2NlbnRyYWxpZHAuaW50LmNhdGVuYS14Lm5ldC9hdXRoL3JlYWxtcy9DWC1DZW50cmFsIiwiYXVkIjpbIkNsMS1DWC1SZWdpc3RyYXRpb24iLCJDbDItQ1gtUG9ydGFsIiwiQ2w3LUNYLUJQRE0iLCJ0ZWNobmljYWxfcm9sZXNfbWFuYWdlbWVudCIsIkNsNS1DWC1DdXN0b2RpYW4iLCJDbDI0LUNYLVNTSS1DcmVkZW50aWFsSXNzdWVyIiwiYWNjb3VudCIsIkNsMy1DWC1TZW1hbnRpYyIsIkNsMjMtQ1gtUG9saWN5LUh1YiJdLCJzdWIiOiJmYTYwMGI1Yi0yZWJkLTQ4NzMtOTE2OC05NWNiZjViYzk4ZGIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJDbDItQ1gtUG9ydGFsIiwibm9uY2UiOiI5OWExYTgyYy1lMGM0LTRiNjAtOTEzYS0xMTIzMGViMWE5ODUiLCJzZXNzaW9uX3N0YXRlIjoiNjdjMGU1MzMtYmM3ZS00YmVhLWEwYmMtNTJiNTY5MGFiMDg3IiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHBzOi8vcG9ydGFsLmludC5jYXRlbmEteC5uZXQiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwiZGVmYXVsdC1yb2xlcy1jYXRlbmEteCByZWFsbSIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiQ2w3LUNYLUJQRE0iOnsicm9sZXMiOlsicmVhZF9tZXRhZGF0YSIsInJlYWRfY2hhbmdlbG9nIiwicmVhZF9wYXJ0bmVyX21lbWJlciIsInJlYWRfY2hhbmdlbG9nX21lbWJlciJdfSwidGVjaG5pY2FsX3JvbGVzX21hbmFnZW1lbnQiOnsicm9sZXMiOlsiQlBETSBQb29sIENvbnN1bWVyIl19LCJDbDUtQ1gtQ3VzdG9kaWFuIjp7InJvbGVzIjpbInZpZXdfd2FsbGV0Il19LCJDbDEtQ1gtUmVnaXN0cmF0aW9uIjp7InJvbGVzIjpbInZpZXdfcmVnaXN0cmF0aW9uIl19LCJDbDI0LUNYLVNTSS1DcmVkZW50aWFsSXNzdWVyIjp7InJvbGVzIjpbInZpZXdfdXNlX2Nhc2VfcGFydGljaXBhdGlvbiIsInZpZXdfY3JlZGVudGlhbF9yZXF1ZXN0cyIsInZpZXdfY2VydGlmaWNhdGVzIiwicmVxdWVzdF9zc2ljcmVkZW50aWFsIiwicmV2b2tlX2NyZWRlbnRpYWwiXX0sIkNsMi1DWC1Qb3J0YWwiOnsicm9sZXMiOlsibW9kaWZ5X3VzZXJfYWNjb3VudCIsImRlbGV0ZV9pZHAiLCJzZXR1cF9pZHAiLCJhZGRfaWRwIiwidmlld19jb21wYW55X2RhdGEiLCJkZWxldGVfbm90aWZpY2F0aW9ucyIsImFkZF9jb25uZWN0b3JzIiwiQ29tcGFueSBBZG1pbiIsImRlbGV0ZV9kb2N1bWVudHMiLCJ2aWV3X2Nvbm5lY3RvcnMiLCJ2aWV3X3RlY2hfdXNlcl9tYW5hZ2VtZW50Iiwic3Vic2NyaWJlX2FwcHMiLCJyZXF1ZXN0X3NzaWNyZWRlbnRpYWwiLCJhZGRfc2VsZl9kZXNjcmlwdGlvbnMiLCJ2aWV3X2FwcF9sYW5ndWFnZSIsImFkZF90ZWNoX3VzZXJfbWFuYWdlbWVudCIsInVwbG9hZF9jZXJ0aWZpY2F0ZXMiLCJ2aWV3X3BhcnRuZXJfbmV0d29yayIsInVwZGF0ZV9jb21wYW55X3JvbGUiLCJkZWxldGVfY2VydGlmaWNhdGVzIiwidmlld19zZXJ2aWNlX29mZmVyaW5nIiwidmlld191c2VyX2FjY291bnQiLCJ2aWV3X2NsaWVudF9yb2xlcyIsInZpZXdfZG9jdW1lbnRzIiwidmlld191c2VfY2FzZV9wYXJ0aWNpcGF0aW9uIiwidmlld19zdWJzY3JpcHRpb24iLCJkZWxldGVfY29ubmVjdG9ycyIsInZpZXdfb3duX3VzZXJfYWNjb3VudCIsInZpZXdfdGVjaG5pY2FsX3NldHVwIiwidGVjaG5pY2FsX3JvbGVzX21hbmFnZW1lbnQiLCJ1bnN1YnNjcmliZV9zZXJ2aWNlcyIsImNvbmZpZ3VyZV9wYXJ0bmVyX3JlZ2lzdHJhdGlvbiIsInZpZXdfaWRwIiwidmlld19ub3RpZmljYXRpb25zIiwidmlld19hdXRvc2V0dXBfc3RhdHVzIiwiZGVsZXRlX293bl91c2VyX2FjY291bnQiLCJ2aWV3X21hbmFnZWRfaWRwIiwic3Vic2NyaWJlX3NlcnZpY2UiLCJ2aWV3X2FwcF9zdWJzY3JpcHRpb24iLCJ2aWV3X3NlcnZpY2VfbWFya2V0cGxhY2UiLCJ2aWV3X2NlcnRpZmljYXRlcyIsIm1vZGlmeV9jb25uZWN0b3JzIiwiYWRkX3VzZXJfYWNjb3VudCIsInZpZXdfbWVtYmVyc2hpcCIsImRlbGV0ZV91c2VyX2FjY291bnQiLCJ2aWV3X3VzZV9jYXNlcyIsImRlbGV0ZV90ZWNoX3VzZXJfbWFuYWdlbWVudCIsImRpc2FibGVfaWRwIiwidW5zdWJzY3JpYmVfYXBwcyIsInZpZXdfdXNlcl9tYW5hZ2VtZW50Iiwidmlld19hcHBzIiwidXBkYXRlX293bl91c2VyX2FjY291bnQiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfSwiQ2wzLUNYLVNlbWFudGljIjp7InJvbGVzIjpbImFkZF9zZW1hbnRpY19tb2RlbCIsInVwZGF0ZV9zZW1hbnRpY19tb2RlbCIsImRlbGV0ZV9zZW1hbnRpY19tb2RlbCIsInZpZXdfc2VtYW50aWNfbW9kZWwiXX0sIkNsMjMtQ1gtUG9saWN5LUh1YiI6eyJyb2xlcyI6WyJ2aWV3X3BvbGljeV9odWIiXX19LCJzY29wZSI6Im9wZW5pZCBjYXRlbmEgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjY3YzBlNTMzLWJjN2UtNGJlYS1hMGJjLTUyYjU2OTBhYjA4NyIsImJwbiI6IkJQTkwwMDAwMDAwMDBUTEIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkNocmlzdG9waCBKdW5nIiwib3JnYW5pc2F0aW9uIjoiS25vd2xlZGdlIEFnZW50IFN1cHBsaWVyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiNWZiY2NiZTEtNmMyNy00MmVkLWJhOTktODJjM2NhMjE0NmQ2IiwiZ2l2ZW5fbmFtZSI6IkNocmlzdG9waCIsImZhbWlseV9uYW1lIjoiSnVuZyIsImVtYWlsIjoiYy1qdW5nQHQtc3lzdGVtcy5jb20ifQ.M1LU2adNqsQO7eLwP0BpjJXf7-DcAG3HlRe1yQgyzpT3j8G0rqYK6gwQodwzEBBmytO1dDACLQImB9QXy3lkyUikqVxO738kCw2ouIPcgs1EKvwxJB8QB1s4zxha_609lGN0nwIo-qJMFzxYE8iOPf3gAcneLY9Wk2ADC-zj45fhE8mfT44JDDM1vmMNJUEFWKhcXlNnuNzyn969FE_9L4rlMwC8PPqw6vvKacvJIVE9PsOS0atNEz6mL7XoA5WWDB8capU-nO4RJyEQQCHuwkhuuLCEukgqAIWZxlEbegbqgOgbGWSM67USQWYLWsgaZ2knupHCW9PSMUnlDZESMw",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "E2E_02_05_CONSUMER_CALL",
							"item": [
								{
									"name": "E2E_02_05_01_RUL_SKILL_ADHOC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(1);",
													"",
													"    var sampleVan=pm.environment.get(\"sampleVAN\");",
													"",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding.van.value).to.be.equal(sampleVan);",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX cx-behaviour:    <https://w3id.org/catenax/ontology/behaviour#>\nPREFIX cx-taxo: <https://w3id.org/catenax/taxonomy#>\nPREFIX owl:    <http://www.w3.org/2002/07/owl#> \nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \nPREFIX bpnl:\t\t    <bpn:legal:>\nPREFIX oem:             <GraphAsset?oem=>\nPREFIX supplier:        <GraphAsset?supplier=>\n\n################################################################\n# Sample for a Federated (Consumer-Deployed) SparQL Skill which\n#  - Jumps into an OEM-owned reliability asset given a set of candidate VANs\n#  - Feeds the gathered data back into the respective supplier connector/agent \n#.   to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n################################################################\n\nSELECT DISTINCT ?vehicle ?van ?aggregate ?assembly ?supplier ?distanceKm ?timeHours WHERE {\n\n  VALUES (?van ?aggregate) { \n      (\"{{sampleVAN}}\"^^xsd:string \"Differential Gear\"^^xsd:string) \n  }\n\n  VALUES (?ls_type) { \n      (cx-taxo:GearOil) (cx-taxo:GearSet) \n  }\n\n  bpnl:{{oemBPNL}} cx-common:hasConnector ?oemEDC.\n  ?oemEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>; cx-common:id ?reliabilityAssetId].\n  \n  SERVICE ?oemEDC {  \n      GRAPH ?reliabilityAssetId {\n        ?vehicle rdf:type cx-vehicle:Vehicle;\n            cx-vehicle:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx-vehicle:Part;\n            cx-vehicle:name ?aggregate;\n            cx-vehicle:isPartOf ?vehicle;\n            cx-vehicle:supplier ?supplier.\n            \n        ?teleAnalysis rdf:type cx-reliability:Analysis;\n            cx-reliability:analysedObject ?assembly;\n            cx-reliability:operatingHoursOfVehicle ?operatingTime;\n            cx-reliability:mileageOfVehicle ?mileage;\n            cx-core:startDateTime ?recordDate;\n            cx-reliability:result [\n                cx-core:id ?ls_type;\n                cx-core:name ?ls_name;\n                cx-reliability:countingValue ?ls_value;\n                cx-reliability:countingUnit ?ls_unit;\n                cx-reliability:countingMethod ?ls_method;\n                cx-reliability:channels ?ls_channels;\n                cx-reliability:classes ?ls_classes;\n                cx-reliability:values ?ls_values\n            ].\n    } # OEM#GRAPH\n\n    ?supplierSite owl:sameAs ?supplier.\n    ?supplierSite cx-common:hasConnector ?supplierEDC.\n    ?supplierEDC cx-common:offers [ rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>; cx-common:id ?prognosisAssetId].\n\n    SERVICE ?supplierEDC {\n        GRAPH ?prognosisAssetId {\n            SELECT ?distanceKm ?timeHours WHERE {\n                ?invocation a cx-behaviour:RemainingUsefulLife;\n                        cx-behaviour:sender bpnl:{{oemBPNL}};\n                        cx-behaviour:senderConnector ?oemEDC;\n                        cx-behaviour:recipient ?supplier;\n                        cx-behaviour:recipientConnector ?supplierEDC;\n                        cx-behaviour:targetDate ?recordDate;\n                        cx-behaviour:timeStamp ?recordDate;\n                        cx-behaviour:component ?assembly;\n                        cx-behaviour:observationType ?ls_type;\n                        cx-behaviour:statusDate ?recordDate;\n                        cx-behaviour:statusOperatingHours ?operatingTime;\n                        cx-behaviour:statusMileage ?mileage;\n                        cx-behaviour:countingValue ?ls_value;\n                        cx-behaviour:countingUnit ?ls_unit;\n                        cx-behaviour:countingMethod ?ls_method;\n                        cx-behaviour:headerChannels ?ls_channels;\n                        cx-behaviour:bodyClasses ?ls_classes;\n                        cx-behaviour:bodyCountsList ?ls_values;\n                        cx-behaviour:remainingOperatingHours ?timeHours;\n                        cx-behaviour:remainingRunningDistance ?distanceKm.\n            }\n        } # SUPPLIER#GRAPH          \n    } # SUPPLIER#CATALOG\n\n  } # OEM#CATALOG\n\n} # SELECT\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerMatchmakingAgent}}/api/agent",
											"host": [
												"{{consumerMatchmakingAgent}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_02_RUL_SKILL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FGPTXINYZAVJYK\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HHXDGSMSUTWFUO\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RGZCDKEJHDSNCB\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerMatchmakingAgent}}/api/agent?asset=SkillAsset%3Fconsumer%3DRemainingUsefulLife",
											"host": [
												"{{consumerMatchmakingAgent}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLife"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_03_RUL_SKILL_WRONG_VEHICLES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(0);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"OFLHAQFNLQNRVC\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RYYQDJQTALZJQU\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"AVJYKFGPTXINYZ\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"WFUOHHXDGSMSUT\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HDSNCBRGZCDKEJ\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"EPLTLRDUGZNKNC\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"KKZGYDVAJDTLJM\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=SkillAsset%3Fconsumer%3DRemainingUsefulLife",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "SkillAsset%3Fconsumer%3DRemainingUsefulLife"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_04_RUL_SKILL_REMOTE_IMPLICIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FGPTXINYZAVJYK\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HHXDGSMSUTWFUO\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RGZCDKEJHDSNCB\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset={{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_05_RUL_SKILL_REMOTE_EXPLICIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FGPTXINYZAVJYK\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HHXDGSMSUTWFUO\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RGZCDKEJHDSNCB\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?runMode=PROVIDER&asset={{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "runMode",
													"value": "PROVIDER"
												},
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_06_RUL_SKILL_REMOTE_WRONG_MODE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Error of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([400,500]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FGPTXINYZAVJYK\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HHXDGSMSUTWFUO\"}},\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RGZCDKEJHDSNCB\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?runMode=CONSUMER&asset={{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "runMode",
													"value": "CONSUMER"
												},
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeRemote"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_07_RUL_SKILL_LOCAL_IMPLICIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=0; //expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset={{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_08_RUL_SKILL_LOCAL_EXPLICIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=0 //expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?runMode=CONSUMER&asset={{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "runMode",
													"value": "CONSUMER"
												},
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_09_RUL_SKILL_LOCAL_WRONG_MODE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Error of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([400,500]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"}}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?runMode=PROVIDER&asset={{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "runMode",
													"value": "PROVIDER"
												},
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23SkillAsset%3Fprovider%3DRemainingUsefulLifeLocal"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_10_BT_SKILL_RUL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"prognosis\");",
													"        pm.expect(binding.prognosis).to.have.property(\"type\");",
													"        pm.expect(binding.prognosis).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"van\",\n            \"resultType\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FNLQNRVCOFLHAQ\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#RemainingUsefulLifeResult\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FGPTXINYZAVJYK\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#RemainingUsefulLifeResult\"\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerMatchmakingAgent}}/api/agent?asset={{oemEdcIdsUrlEncode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis&runMode=PROVIDER",
											"host": [
												"{{consumerMatchmakingAgent}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis"
												},
												{
													"key": "runMode",
													"value": "PROVIDER"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "E2E_02_05_11_BT_SKILL_HI",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(7);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"prognosis\");",
													"        pm.expect(binding.prognosis).to.have.property(\"type\");",
													"        pm.expect(binding.prognosis).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"van\",\n            \"resultType\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FNLQNRVCOFLHAQ\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#HealthIndicationResult\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FGPTXINYZAVJYK\"\n                },\n                \"resultType\": {\n                    \"type\": \"uri\",\n                    \"value\": \"https://w3id.org/catenax/ontology/behaviour#HealthIndicationResult\"\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset={{oemEdcIdsUrlEncode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis&runMode=PROVIDER",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{oemEdcIdsUrlEncode}}%23cx-taxo%3ASkillAsset%3Foem%3DBehaviourPrognosis"
												},
												{
													"key": "runMode",
													"value": "PROVIDER"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								}
							]
						},
						{
							"name": "E2E_02_06_PROVIDER_CALL",
							"item": [
								{
									"name": "E2E_02_06_01_LIST_SKILLS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gte(2);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset).to.have.property(\"privateProperties\");",
													"        pm.expect(asset[\"privateProperties\"]).to.have.property(\"https://w3id.org/catenax/ontology/common#query\");",
													"    });",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n    },\n    \"offset\": 0,\n    \"limit\": 100,\n    \"sort\": \"DESC\",\n    \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n    \"filterExpression\": [\n     {\n                \"operandLeft\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\n                \"operator\":\"=\",\n                \"operandRight\":\"cx-common:SkillAsset\"\n     }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v3/assets/request",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v3",
												"assets",
												"request"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "E2E_02_06_02_AAS_DESCRIPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AAS 3.0 description was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    res = pm.response.json();",
													"\t\tpm.expect(res).to.have.property('profiles');",
													"\t\tpm.expect(res.profiles).to.have.length.gte(1);",
													"\t\taasProfiles=res.profiles.filter(function(profile) {",
													"\t\t\treturn profile.includes(\"AssetAdministrationShellRepository\");",
													"\t\t});",
													"\t\tpm.expect(aasProfiles.length).to.be.eq(1);",
													"\t\tsubmodelProfiles=res.profiles.filter(function(profile) {",
													"\t\t\treturn profile.includes(\"SubmodelRepository\");",
													"\t\t});",
													"        pm.expect(submodelProfiles.length).to.be.eq(1);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"user-agent": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{providerAasBridge}}/api/v3.0/description",
											"host": [
												"{{providerAasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"description"
											]
										}
									},
									"response": []
								},
								{
									"name": "E2E_02_06_03_AAS_ALL_SHELLS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AAS 3.0 shells was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    res = pm.response.json();",
													"\tpm.expect(res).to.have.property('result');",
													"\tpm.expect(res.result).to.have.length.gte(1);",
													"\tres.result.forEach(function(shell) {",
													"        pm.expect(shell).to.have.property(\"id\");",
													"        pm.expect(shell).to.have.property(\"idShort\");",
													"        pm.expect(shell).to.have.property(\"assetInformation\");",
													"        pm.expect(shell.assetInformation).to.have.property(\"globalAssetId\");",
													"        pm.expect(shell).to.have.property(\"submodels\");",
													"        pm.expect(shell.submodels).to.have.length.gte(1);",
													"        shell.submodels.forEach(function(submodel) {",
													"            pm.expect(submodel).to.have.property(\"keys\");",
													"            pm.expect(submodel.keys).to.have.length.gte(1);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{providerAasBridge}}/api/v3.0/shells",
											"host": [
												"{{providerAasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"shells"
											]
										}
									},
									"response": []
								},
								{
									"name": "E2E_02_06_04_AAS_ALL_SUBMODELS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AAS 3.0 submodels was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    res = pm.response.json();",
													"\tpm.expect(res).to.have.property('result');",
													"\tpm.expect(res.result).to.have.length.gte(1);",
													"\tres.result.forEach(function(submodel) {",
													"        pm.expect(submodel).to.have.property(\"id\");",
													"        pm.expect(submodel).to.have.property(\"idShort\");",
													"        pm.expect(submodel).to.have.property(\"semanticId\");",
													"        pm.expect(submodel.semanticId).to.have.property(\"keys\");",
													"        pm.expect(submodel.semanticId.keys).to.have.length.gte(1);",
													"        pm.expect(submodel).to.have.property(\"submodelElements\");",
													"        pm.expect(submodel.submodelElements).to.have.length.gte(1);",
													"        submodel.submodelElements.forEach(function(submodelElement) {",
													"            pm.expect(submodelElement).to.have.property(\"idShort\");",
													"            pm.expect(submodelElement).to.have.property(\"value\");",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{providerAasBridge}}/api/v3.0/submodels?content=value&level=deep",
											"host": [
												"{{providerAasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"submodels"
											],
											"query": [
												{
													"key": "content",
													"value": "value"
												},
												{
													"key": "level",
													"value": "deep"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "E2E_02_06_05_ONE_SHELL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AAS 3.0 specific shell was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    shell = pm.response.json();",
													"    pm.expect(shell).to.have.property(\"id\");",
													"    pm.expect(shell).to.have.property(\"idShort\");",
													"    pm.expect(shell).to.have.property(\"assetInformation\");",
													"    pm.expect(shell.assetInformation).to.have.property(\"globalAssetId\");",
													"    pm.expect(shell).to.have.property(\"submodels\");",
													"    pm.expect(shell.submodels).to.have.length.gte(1);",
													"    shell.submodels.forEach(function(submodel) {",
													"        pm.expect(submodel).to.have.property(\"keys\");",
													"        pm.expect(submodel.keys).to.have.length.gte(1);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{providerAasBridge}}/api/v3.0/shells/:shellid",
											"host": [
												"{{providerAasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"shells",
												":shellid"
											],
											"variable": [
												{
													"key": "shellid",
													"value": "dHJhY2VhYmlsaXR5L3Vybjp1dWlkOmY1ZWZiZjQ1LTdkODQtNDQ0Mi1iM2I4LTA1Y2YxYzVjNWEwYg=="
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "E2E_02_06_06_NOTEXISTS_SHELL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AAS 3.0 not existant shell wasfailure\", function () {",
													"  pm.expect(pm.response.code).oneOf([400,500]);",
													"  message = pm.response.json();",
													"\tpm.expect(message).to.have.property(\"messages\");",
													"\tpm.expect(message.messages).to.have.length.gte(1);",
													"\tmessage.messages.forEach(function(message) {",
													"\t\t\tpm.expect(message).to.have.property(\"messageType\");",
													"\t\t\tpm.expect(message).to.have.property(\"text\");",
													"\t\t\tpm.expect(message).to.have.property(\"code\");",
													"\t\t\tpm.expect(message).to.have.property(\"timestamp\");",
													"\t});",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{providerAasBridge}}/api/v3.0/shells/:shellid",
											"host": [
												"{{providerAasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"shells",
												":shellid"
											],
											"variable": [
												{
													"key": "shellid",
													"value": "dHJhY2VhYmlsaXR5L3Vybjp1dWlkOmY1ZWZiZjQ1LTdkODQtNDQ0Mi1iM2I4LTA1Y2YxYzVjNWEwYw=="
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "E2E_02_06_07_ONE_SUBMODEL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AAS 3.0 specific submodel was successful\", function () {",
													"  pm.expect(pm.response.code).oneOf([200]);",
													"  submodel = pm.response.json();",
													"\tpm.expect(submodel).to.have.property(\"id\");",
													"\tpm.expect(submodel).to.have.property(\"idShort\");",
													"\tpm.expect(submodel).to.have.property(\"semanticId\");",
													"\tpm.expect(submodel.semanticId).to.have.property(\"keys\");",
													"\tpm.expect(submodel.semanticId.keys).to.have.length.gte(1);",
													"\tpm.expect(submodel).to.have.property(\"submodelElements\");",
													"\tpm.expect(submodel.submodelElements).to.have.length.gte(1);",
													"\tsubmodel.submodelElements.forEach(function(submodelElement) {",
													"\t\t\tpm.expect(submodelElement).to.have.property(\"idShort\");",
													"\t\t\tpm.expect(submodelElement).to.have.property(\"value\");",
													"\t});",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{providerAasBridge}}/api/v3.0/submodels/:submodelIdentifier?level=deep",
											"host": [
												"{{providerAasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"submodels",
												":submodelIdentifier"
											],
											"query": [
												{
													"key": "level",
													"value": "deep"
												},
												{
													"key": "content",
													"value": "value",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "submodelIdentifier",
													"value": "dHJhY2VhYmlsaXR5L3VybjpiYW1tOmlvLmNhdGVuYXgucGFydF9hc19wbGFubmVkOjEuMC4xI1BhcnRBc1BsYW5uZWQvdXJuOnV1aWQ6ZjVlZmJmNDUtN2Q4NC00NDQyLWIzYjgtMDVjZjFjNWM1YTBi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "E2E_02_06_07_NOTEXISTS_SUBMODEL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AAS 3.0 not existant submodel wasfailure\", function () {",
													"  pm.expect(pm.response.code).oneOf([400,500]);",
													"  message = pm.response.json();",
													"\tpm.expect(message).to.have.property(\"messages\");",
													"\tpm.expect(message.messages).to.have.length.gte(1);",
													"\tmessage.messages.forEach(function(message) {",
													"\t\t\tpm.expect(message).to.have.property(\"messageType\");",
													"\t\t\tpm.expect(message).to.have.property(\"text\");",
													"\t\t\tpm.expect(message).to.have.property(\"code\");",
													"\t\t\tpm.expect(message).to.have.property(\"timestamp\");",
													"\t});",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{providerAasBridge}}/api/v3.0/submodels/:submodelIdentifier?level=deep",
											"host": [
												"{{providerAasBridge}}"
											],
											"path": [
												"api",
												"v3.0",
												"submodels",
												":submodelIdentifier"
											],
											"query": [
												{
													"key": "level",
													"value": "deep"
												},
												{
													"key": "content",
													"value": "value",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "submodelIdentifier",
													"value": "dHJhY2VhYmlsaXR5L3VybjpiYW1tOmlvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWQ6MS4wLjAjUGFydFNpdGVJbmZvcm1hdGlvbkFzUGxhbm5lZC91cm46dXVpZDplNWM5NmFiNS04OTZhLTQ4MmMtODc2MS1lZmQ3NDc3N2NhOTg="
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "E2E Tests for Knowledge Agents based on Behaviour Twin/Remaining Useful Life Scenario"
				}
			]
		},
		{
			"name": "Stable Smoke Tests",
			"item": [
				{
					"name": "Create Bearer Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"miw_token\",pm.response.json().access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{keycloak_miw_client_CON}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{keycloak_miw_secret_CON}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_id",
									"value": "{{keycloak_miw_client_OEM}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "{{keycloak_miw_secret_OEM}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{keycloak_miw}}/protocol/openid-connect/token",
							"host": [
								"{{keycloak_miw}}"
							],
							"path": [
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"current_credentials\",JSON.stringify(pm.response.json().content));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{miw_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{miw}}/api/credentials?issuerIdentifier={{miw_authority}}",
							"host": [
								"{{miw}}"
							],
							"path": [
								"api",
								"credentials"
							],
							"query": [
								{
									"key": "issuerIdentifier",
									"value": "BPNL000000000000",
									"disabled": true
								},
								{
									"key": "issuerIdentifier",
									"value": "{{miw_authority}}"
								},
								{
									"key": "holderIdentifier",
									"value": "BPNL00000003CQI9",
									"disabled": true
								},
								{
									"key": "holderIdentifier",
									"value": "BPNL00000003COJN",
									"disabled": true
								},
								{
									"key": "type",
									"value": "SummaryCredential",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"current_vp\",JSON.stringify(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{miw_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"holderIdentifier\": \"{{cabBPNL}}\",\n    \"verifiableCredentials\": {{current_credentials}}      \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{miw}}/api/presentations?asJwt=true&audience={{oemEdcControl}}/api/v1/dsp",
							"host": [
								"{{miw}}"
							],
							"path": [
								"api",
								"presentations"
							],
							"query": [
								{
									"key": "asJwt",
									"value": "true"
								},
								{
									"key": "audience",
									"value": "{{oemEdcControl}}/api/v1/dsp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Presentation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{miw_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{current_vp}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{miw}}/api/presentations/validation?asJwt=true&audience={{oemEdcControl}}/api/v1/dsp",
							"host": [
								"{{miw}}"
							],
							"path": [
								"api",
								"presentations",
								"validation"
							],
							"query": [
								{
									"key": "asJwt",
									"value": "true"
								},
								{
									"key": "audience",
									"value": "{{oemEdcControl}}/api/v1/dsp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Provider Agent (Internally)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "PREFIX cx-common:   <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:     <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:  <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:     <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?oem ?part ?analysis WHERE {\n  # Select Business Partner\n  ?oem rdf:type cx-common:BusinessPartner.\n  ?part rdf:type cx-vehicle:Part;\n        cx-vehicle:manufacturer ?oem.\n  ?analysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?part.\n} LIMIT 40\n"
						},
						"url": {
							"raw": "{{provisioningAgent}}/sparql",
							"host": [
								"{{provisioningAgent}}"
							],
							"path": [
								"sparql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Provider Agent (Internally From Agent Plane)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "PREFIX cx-common:   <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:     <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:  <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:     <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?oem ?part ?analysis WHERE {\n  # Select Business Partner\n  ?oem rdf:type cx-common:BusinessPartner.\n  ?part rdf:type cx-vehicle:Part;\n        cx-vehicle:manufacturer ?oem.\n  ?analysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?part.\n} LIMIT 40\n"
						},
						"url": {
							"raw": "{{oemProviderAgent}}/sparql",
							"host": [
								"{{oemProviderAgent}}"
							],
							"path": [
								"sparql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Remoting Agent (Internally)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://w3id.org/catenax/ontology/prognosis#>\n\nSELECT ?invocation ?prediction ?support\nWHERE { \n  ?invocation a prognosis:Prognosis;         \n              prognosis:name \"Schorsch\"^^xsd:string; \n              prognosis:prediction ?prediction; \n              prognosis:support ?support. \n}"
						},
						"url": {
							"raw": "{{remotingAgent}}/repositories/prognosis",
							"host": [
								"{{remotingAgent}}"
							],
							"path": [
								"repositories",
								"prognosis"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Remoting Agent (Internally From Agent Plane)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://w3id.org/catenax/ontology/prognosis#>\n\nSELECT ?invocation ?prediction ?support\nWHERE { \n  ?invocation a prognosis:Prognosis;         \n              prognosis:name \"Schorsch\"^^xsd:string; \n              prognosis:prediction ?prediction; \n              prognosis:support ?support. \n}"
						},
						"url": {
							"raw": "{{oemRemotingAgent}}/repositories/prognosis",
							"host": [
								"{{oemRemotingAgent}}"
							],
							"path": [
								"repositories",
								"prognosis"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Graph Policy (Provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@type\": \"PolicyDefinitionRequestDto\",\n    \"@id\": \"Policy?oem=Graph\",\n    \"policy\": {\n\t\t\"@type\": \"Policy\",\n\t\t\"odrl:permission\" : [{\n\t\t\t\"odrl:action\" : \"USE\",\n\t\t\t\"odrl:constraint\" : {\n\t\t\t\t\"@type\": \"LogicalConstraint\",\n\t\t\t\t\"odrl:or\" : [{\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL0000000005VV\"\n\t\t\t\t},\n                {\n\t\t\t\t\t\"@type\" : \"Constraint\",\n\t\t\t\t\t\"odrl:leftOperand\" : \"BusinessPartnerNumber\",\n\t\t\t\t\t\"odrl:operator\" : {\n                        \"@id\": \"odrl:eq\"\n                    },\n\t\t\t\t\t\"odrl:rightOperand\" : \"BPNL000000000001\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}]\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/management/v2/policydefinitions",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"policydefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph policy."
					},
					"response": []
				},
				{
					"name": "Create Graph Contract Definition (Provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?oem=GraphContract\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?oem=Graph\",\n    \"contractPolicyId\": \"Policy?oem=Graph\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?oem=Graph\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/management/v2/contractdefinitions",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"contractdefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a contract."
					},
					"response": []
				},
				{
					"name": "Create Data Graph Asset (Provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?oem=Diagnosis2022\", \n        \"properties\": {\n            \"name\": \"Diagnostic Trouble Codes in 2022\",\n            \"description\": \"A sample graph asset/offering referring to diagnosis analyses.\",\n            \"version\": \"1.9.8\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/reliability>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?oem=Diagnosis2022#> .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"GraphAsset?oem=Diagnosis2022\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{oemProviderAgent}}/sparql\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"(http|edc)s?://.*\",\n        \"cx-common:denyServicePattern\": \"http://ifconfig\\\\.me.*\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/management/v2/assets",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "Create Function Graph Asset (Provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\"\n    },\n    \"asset\": {\n        \"@type\": \"Asset\",\n        \"@id\": \"GraphAsset?oem=Prognosis\", \n        \"properties\": {\n            \"name\": \"Age Prognosis\",\n            \"description\": \"A sample graph asset/offering referring to prognosis.\",\n            \"version\": \"1.9.8\",\n            \"contenttype\": \"application/json, application/xml\",\n            \"cx-common:publishedUnderContract\": \"Contract?oem=Graph\",\n            \"rdf:type\": \"cx-common:GraphAsset\",\n            \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/function>\",\n            \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n            \"sh:shapesGraph\": \"@prefix : <GraphAsset?oem=Prognosis#> .\\n\",\n            \"cx-common:isFederated\": \"true^^xsd:boolean\"\n        }\n    },\n    \"dataAddress\": {\n        \"id\":\"GraphAsset?oem=Prognosis\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{oemRemotingAgent}}/repositories/prognosis\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\",\n        \"authKey\": \"{{oemBackendAuthKey}}\",\n        \"authCode\": \"{{oemBackendAuthCode}}\",\n        \"cx-common:allowServicePattern\": \"(http|edc)s?://.*\",\n        \"cx-common:denyServicePattern\": \"http://ifconfig\\\\.me.*\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/management/v2/assets",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "Show Own Catalogue (Provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Listing of Own Catalogue\", function () {",
									"    var jsonRequest=JSON.parse(pm.request.body.raw);",
									"    pm.expect(pm.response.code).oneOf([200]);",
									"    var jsonResponse=pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property(\"@id\");",
									"    pm.expect(jsonResponse).to.have.property(\"@type\");",
									"    pm.expect(jsonResponse).to.have.property(\"@context\");",
									"    var type=jsonResponse[\"@type\"];",
									"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
									"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
									"    var participant=pm.response.json()[\"edc:participantId\"];",
									"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
									"    var service=jsonResponse[\"dcat:service\"];",
									"    pm.expect(service).to.have.property(\"@id\");",
									"    pm.expect(service).to.have.property(\"@type\");",
									"    var serviceType=service[\"@type\"];",
									"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
									"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
									"    pm.expect(service).to.have.property(\"dct:terms\");",
									"    var serviceTerms=service[\"dct:terms\"];",
									"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
									"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
									"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
									"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
									"                ",
									"    var dataSets=jsonResponse['dcat:dataset'];",
									"    pm.expect(dataSets).to.be.not.null;",
									"    if(!Array.isArray(dataSets)) {",
									"        dataSets=[dataSets];",
									"    }",
									"",
									"    dataSets.map(function(contractOffer) {",
									"        pm.expect(contractOffer).to.have.property(\"@id\");",
									"        pm.expect(contractOffer).to.have.property(\"@type\");",
									"        var contractOfferType=contractOffer[\"@type\"];        ",
									"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
									"",
									"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
									"        var policy=contractOffer[\"odrl:hasPolicy\"];",
									"        pm.expect(policy).to.have.property(\"@id\");",
									"        pm.expect(policy).to.have.property(\"@type\");",
									"        var policyType=policy[\"@type\"];",
									"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
									"        pm.expect(policy).to.have.property(\"odrl:permission\");",
									"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
									"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
									"        pm.expect(policy).to.have.property(\"odrl:target\");",
									"        var policyTarget=policy[\"odrl:target\"];",
									"",
									"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
									"        var distributions=contractOffer[\"dcat:distribution\"];",
									"        pm.expect(distributions).to.be.not.null;",
									"        if(!Array.isArray(distributions)) {",
									"            distributions=[distributions];",
									"        }",
									"        distributions.map( function(distribution) {",
									"            pm.expect(distribution).to.have.property(\"@type\");",
									"            var distributionType=distribution[\"@type\"];",
									"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
									"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
									"            pm.expect(distribution).to.have.property(\"dct:format\");",
									"            var distributionFormat=distribution[\"dct:format\"];",
									"            pm.expect(distributionFormat).to.have.property(\"@id\");",
									"            var distributionFormatId=distributionFormat[\"@id\"];",
									"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
									"        });",
									"",
									"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
									"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
									"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
									"        var contenttype=contractOffer[\"edc:contenttype\"];",
									"        pm.expect(contenttype).to.contain(\"application/json\");",
									"        pm.expect(contenttype).to.contain(\"application/xml\");",
									"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
									"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
									"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
									"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
									"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
									"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
									"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
									"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
									"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
									"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{oemEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
						},
						"url": {
							"raw": "{{oemEdcControl}}/management/v2/catalog/request",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"catalog",
								"request"
							]
						},
						"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
					},
					"response": []
				},
				{
					"name": "Query AAS Shells (Provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"AAS 3.0 shells was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200]);",
									"    res = pm.response.json();",
									"\tpm.expect(res).to.have.property('result');",
									"\tpm.expect(res.result).to.have.length.gte(1);",
									"\tres.result.forEach(function(shell) {",
									"        pm.expect(shell).to.have.property(\"id\");",
									"        pm.expect(shell).to.have.property(\"idShort\");",
									"        pm.expect(shell).to.have.property(\"assetInformation\");",
									"        pm.expect(shell.assetInformation).to.have.property(\"globalAssetId\");",
									"        pm.expect(shell).to.have.property(\"submodels\");",
									"        pm.expect(shell.submodels).to.have.length.gte(1);",
									"        shell.submodels.forEach(function(submodel) {",
									"            pm.expect(submodel).to.have.property(\"keys\");",
									"            pm.expect(submodel.keys).to.have.length.gte(1);",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{providerAasBridge}}/api/v3.0/shells",
							"host": [
								"{{providerAasBridge}}"
							],
							"path": [
								"api",
								"v3.0",
								"shells"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Remote Catalogue (Consumer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Listing of Own Catalogue\", function () {",
									"    var jsonRequest=JSON.parse(pm.request.body.raw);",
									"    pm.expect(pm.response.code).oneOf([200]);",
									"    var jsonResponse=pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property(\"@id\");",
									"    pm.expect(jsonResponse).to.have.property(\"@type\");",
									"    pm.expect(jsonResponse).to.have.property(\"@context\");",
									"    var type=jsonResponse[\"@type\"];",
									"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
									"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
									"    var participant=pm.response.json()[\"edc:participantId\"];",
									"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
									"    var service=jsonResponse[\"dcat:service\"];",
									"    pm.expect(service).to.have.property(\"@id\");",
									"    pm.expect(service).to.have.property(\"@type\");",
									"    var serviceType=service[\"@type\"];",
									"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
									"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
									"    pm.expect(service).to.have.property(\"dct:terms\");",
									"    var serviceTerms=service[\"dct:terms\"];",
									"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
									"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
									"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
									"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
									"                ",
									"    var dataSets=jsonResponse['dcat:dataset'];",
									"    pm.expect(dataSets).to.be.not.null;",
									"    if(!Array.isArray(dataSets)) {",
									"        dataSets=[dataSets];",
									"    }",
									"",
									"    dataSets.map(function(contractOffer) {",
									"        pm.expect(contractOffer).to.have.property(\"@id\");",
									"        pm.expect(contractOffer).to.have.property(\"@type\");",
									"        var contractOfferType=contractOffer[\"@type\"];        ",
									"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
									"",
									"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
									"        var policy=contractOffer[\"odrl:hasPolicy\"];",
									"        pm.expect(policy).to.have.property(\"@id\");",
									"        pm.expect(policy).to.have.property(\"@type\");",
									"        var policyType=policy[\"@type\"];",
									"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
									"        pm.expect(policy).to.have.property(\"odrl:permission\");",
									"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
									"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
									"        pm.expect(policy).to.have.property(\"odrl:target\");",
									"        var policyTarget=policy[\"odrl:target\"];",
									"",
									"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
									"        var distributions=contractOffer[\"dcat:distribution\"];",
									"        pm.expect(distributions).to.be.not.null;",
									"        if(!Array.isArray(distributions)) {",
									"            distributions=[distributions];",
									"        }",
									"        distributions.map( function(distribution) {",
									"            pm.expect(distribution).to.have.property(\"@type\");",
									"            var distributionType=distribution[\"@type\"];",
									"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
									"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
									"            pm.expect(distribution).to.have.property(\"dct:format\");",
									"            var distributionFormat=distribution[\"dct:format\"];",
									"            pm.expect(distributionFormat).to.have.property(\"@id\");",
									"            var distributionFormatId=distributionFormat[\"@id\"];",
									"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
									"        });",
									"",
									"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
									"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
									"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
									"        var contenttype=contractOffer[\"edc:contenttype\"];",
									"        pm.expect(contenttype).to.contain(\"application/json\");",
									"        pm.expect(contenttype).to.contain(\"application/xml\");",
									"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
									"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
									"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
									"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
									"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
									"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
									"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
									"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
									"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
									"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{oemEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"@id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
						},
						"url": {
							"raw": "{{consumerEdcControl}}/management/v2/catalog/request",
							"host": [
								"{{consumerEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"catalog",
								"request"
							]
						},
						"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
					},
					"response": []
				},
				{
					"name": "Query Data Graph Asset (Consumer)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "PREFIX cx-common:   <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:     <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:  <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:     <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?oem ?part ?analysis WHERE {\n    SERVICE <{{oemProviderEdc}}> {\n        GRAPH <GraphAsset?oem=Diagnosis2022> {\n            # Select Business Partner\n            ?oem rdf:type cx-common:BusinessPartner.\n            ?part rdf:type cx-vehicle:Part;\n                cx-vehicle:manufacturer ?oem.\n            ?analysis rdf:type cx-reliability:Analysis;\n                cx-reliability:analysedObject ?part.\n        }\n    }\n} LIMIT 40\n"
						},
						"url": {
							"raw": "{{consumerAgentPlane}}/api/agent",
							"host": [
								"{{consumerAgentPlane}}"
							],
							"path": [
								"api",
								"agent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Function Graph Asset (Consumer)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://w3id.org/catenax/ontology/prognosis#>\n\nSELECT ?invocation ?prediction ?support\nWHERE { \n    SERVICE <{{oemProviderEdc}}> {\n        GRAPH <GraphAsset?oem=Prognosis> {\n            ?invocation a prognosis:Prognosis;         \n                        prognosis:name \"Martin\"^^xsd:string; \n                        prognosis:prediction ?prediction; \n                        prognosis:support ?support. \n        }\n    }\n}\n"
						},
						"url": {
							"raw": "{{consumerAgentPlane}}/api/agent",
							"host": [
								"{{consumerAgentPlane}}"
							],
							"path": [
								"api",
								"agent"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "NEGOTIATION_ID",
			"value": ""
		},
		{
			"key": "TRANSFER_ID",
			"value": ""
		},
		{
			"key": "TRANSFER_PROCESS_ID",
			"value": ""
		},
		{
			"key": "vp_token",
			"value": ""
		}
	]
}