#-
# Copyright (c) 2021, 2024 Contributors to the Catena-X Association
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##
## A Docker compose recipe for a sample dataspace using KA technology
## The Dataspace consists of
## - A managed wallet identity including an IDP
## - Some backend sources/systems (databases, services, datalakes)
## - Three tenants/EDCs (OEM, supplier and consumer each having at least one control plane and one data plane)
## - A portal frontend (for the "consumer" tenant)
##

# that is the version of the docker compose runtime
version: "3.9"

###
# All Services
###
services:

  ###
  # Core Services
  ###

  # A relational database for data and service persistence
  postgres:
    image: postgres:15.3-alpine3.18
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./resources/psql/db.sh:/docker-entrypoint-initdb.d/init-database.sh
      - ./resources/psql/seed.sh:/opt/seed.sh
      - ./resources/psql/is_db_ready.sh:/is_db_ready.sh
      - ./resources/data:/tmp/data
    env_file:
      - resources/env.docker
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh /is_db_ready.sh" ]
      interval: 5s
      timeout: 5s
      retries: 50

  # vault by hashicorp
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8201:8201"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./resources/vault:/data
    command: server -dev -config /data/config.json -dev-root-token-id="root" 

  # vault initialization routing
  vault-init:
    image: hashicorp/vault:latest
    container_name: vault-init
    environment:
      VAULT_ADDR: 'http://vault:8201'
      VAULT_TOKEN: 'root'
    volumes:
      - ./resources/vault:/data
      - ./sts-mock/keys:/keys
    command: /data/setup.sh
    depends_on:
      vault:
        condition: service_started

 # An identity provider for sign-on
  keycloak:
    image: quay.io/keycloak/keycloak:21.1
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_HOSTNAME: keycloak
      KC_HEALTH_ENABLED: true
      KC_HOSTNAME_PORT: 6060
      KC_DB: postgres
      KC_DB_SCHEMA: public
      KC_DB_PASSWORD: password
      KC_DB_USERNAME: keycloak
      KC_DB_URL: jdbc:postgresql://postgres/keycloak
      KEYCLOAK_MIW_PUBLIC_CLIENT: miw_public
      MIW_BPN: BPNL000000000000
      ALICE_BPN: BPNL000000000001
      BOB_BPN: BPNL000000000002
      TRUDY_BPN: BPNL000000000003
    command:
      - start-dev
      - --http-port=6060
      - --import-realm
    volumes:
      - ./resources/keycloak/miw_test_realm.json:/opt/keycloak/data/import/miw_test_realm.json
      - ./resources/keycloak/health-check.sh:/opt/keycloak/health-check.sh
    ports:
      - "6060:6060"
    healthcheck:
      test: "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/6060' || exit 1"
      interval: 10s
      timeout: 10s
      retries: 15
    depends_on:
      postgres:
          condition: service_healthy
          
  bdrs:
    image: tractusx/bdrs-server-memory:0.0.4
    container_name: bdrs
    environment:
      EDC_API_AUTH_KEY: ApiDefaultKey
      WEB_HTTP_PORT: 8580
      WEB_HTTP_PATH: /api
      WEB_HTTP_MANAGEMENT_PORT: 8581
      WEB_HTTP_MANAGEMENT_PATH: /api/management
      WEB_HTTP_DIRECTORY_PORT: 8582
      WEB_HTTP_DIRECTORY_PATH: /api/directory
      EDC_IAM_DID_WEB_USE_HTTPS: false
      EDC_IAM_TRUSTED-ISSUER.ISSUER.ID: did:web:sts-mock/trusted-issuer
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "--header", "'X-Api-Key: ApiDefaultKey'", "http://localhost:8580/api/check/health" ]
    ports:
      - "8580:8580"
      - "8581:8581"
      - "8582:8582"

  bdrs-init:
    image: tractusx/bdrs-server-memory:0.0.4
    container_name: bdrs-init
    volumes:
      - ./resources/bdrs:/resources
    command: /resources/setup.sh
    depends_on:
      bdrs:
        condition: service_healthy

  sts-mock:
    build: ./sts-mock
    container_name: sts-mock
    image: ghcr.io/big-data-spaces/sts-mock:latest
    ports:
      - "8888:80"
        
  ###
  # Backend Services
  ###

  ###
  # An data virtualizer (SQL-Over-FS) engine for reviving business data at rest
  data-backend:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/virtualize/dremio
    image: ghcr.io/catenax-ng/product-knowledge/virtualizer-dremio:1.12.17-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "9047:9047" # http
      - "31010:31010" # jdbc
    volumes:
      - ./resources/dremio:/opt/dremio/data
      - ./resources/data:/opt/dremio/local/data/catenax-knowledge-agents
      - ./oem/resources/dremio.conf:/opt/dremio/conf/dremio.conf

  ###
  # An alternative data virtualizer (SQL-Over-FS) engine for reviving business data at rest
  #data-backend:
  #  build:
  #    dockerfile: src/main/docker/Dockerfile
  #    context: ../dataspace/virtualize/druid
  #  image: ghcr.io/catenax-ng/product-knowledge/virtualizer-druid:1.12.17-SNAPSHOT
  #  platform: ${DOCKER_PLATFORM:-linux/amd64}
  #  ports:
  #    - "8888:8888" # http
  #    - "8889:8082" # jdbc
  #  volumes:
  #    - ./resources/druid.runtime.properties:/opt/druid/conf/druid/single-server/micro-quickstart/_common/common.runtime.properties
  #    - ./resources/data:/opt/druid/data

  ###
  # An binding agent (SPARQL-Over-Fs) for binding business data at rest
  #search-backend:
  #    build:
  #      dockerfile: src/main/docker/Dockerfile
  #      context: ../dataspace/agents/sparql-anything
  #    image: ghcr.io/catenax-ng/product-knowledge/facadex-agent:1.12.17-SNAPSHOT
  #    ports:
  #      - "3000:3000"
  #    volumes:
  #      - ./resources/data/zag_fmea.xml:/opt/xyz/zag_fmea.xml

  ###
  # An binding agent (SPARQL-DB) for binding business data via a dedicated engine
  #graph-backend:
  #  image: ontotext/graphdb:10.1.4
  #  ports:
  #    - "7200:7200"

  ###
  # A REST backend 
  service-backend:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/mock/prognosis
    image: ghcr.io/catenax-ng/product-knowledge/prognosis:1.12.17-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "5005:5005" # API

  ###
  # A conformity-testing binding agent
  conforming-agent:
    image: ghcr.io/catenax-ng/tx-knowledge-agents/conforming-agent:1.12.19-SNAPSHOT
#    image: tractusx/conforming-agent:1.12.19-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    environment:
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    ports:
      - "8898:8080" # sparql endpoint
#      - "4038:4040" # debug

  ###
  # A data provisioning agent
  #
  provider-agent:
    image: ghcr.io/catenax-ng/tx-knowledge-agents/provisioning-agent:1.12.19-SNAPSHOT
#    image: tractusx/provisioning-agent:1.12.19-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8080:8080" # sparql endpoint
      - "8081:8081" # possible second, third, ... sparql endpoint
      - "8082:8082" # possible second, third, ... sparql endpoint
      - "8083:8083" # possible second, third, ... sparql endpoint
      - "8084:8084" # possible second, third, ... sparql endpoint
      - "4039:4042" # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      ONTOP_PORT: "8080 8081 8084 8082 8083"
      # Uncomment to enable for debugging, please choose a different port for each endpoint -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
      JAVA_TOOL_OPTIONS: -Xnoagent
      # If you want to enable multiple ontologies, simply list them with spaces, like ONTOP_ONTOLOGY_FILE: /input/cx-ontology.xml /input/cx-ontology2.xml 
      ONTOP_ONTOLOGY_FILE: /opt/ontop/input/cx-ontology.xml
      # If you want to enable multiple mappings, simply list them with spaces, like ONTOP_MAPPING_FILE: /input/dtc.obda /input/loadspectrum.obda 
      ONTOP_MAPPING_FILE: /opt/ontop/input/dtc.obda /opt/ontop/input/hi.obda /opt/ontop/input/rul.psql.obda /opt/ontop/input/trace.obda /opt/ontop/input/quality.obda
      # If you want to enable multiple settings, simply list them with spaces, like ONTOP_PROPERTIES_FILE: /input/settings.properties /input/settings.dremio.properties
      ONTOP_PROPERTIES_FILE: /opt/ontop/input/settings.local.properties /opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.psql.properties /opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.dremio.properties
      # If you want to enable multiple portals, simply list them with spaces, like ONTOP_PORTAL_FILE: /input/portal.toml /input/portal2.toml 
      ONTOP_PORTAL_FILE: /opt/ontop/input/portal.toml 
      # If you want to enable different developer modes, simply list them with spaces, like NTOP_DEV_MODE: true false 
      ONTOP_DEV_MODE: true
    volumes:
      - ./oem/resources/dtc.obda:/opt/ontop/input/dtc.obda
      - ./oem/resources/hi.obda:/opt/ontop/input/hi.obda
      - ./oem/resources/hi.psql.obda:/opt/ontop/input/hi.psql.obda
      - ./oem/resources/trace.obda:/opt/ontop/input/trace.obda
      - ./oem/resources/rul.obda:/opt/ontop/input/rul.obda
      - ./oem/resources/rul.psql.obda:/opt/ontop/input/rul.psql.obda
      - ./oem/resources/quality.obda:/opt/ontop/input/quality.obda
      - ./oem/resources/settings.local.properties:/opt/ontop/input/settings.local.properties
      - ./oem/resources/settings.dremio.properties:/opt/ontop/input/settings.dremio.properties
      - ./oem/resources/settings.druid.properties:/opt/ontop/input/settings.druid.properties
      - ./oem/resources/settings.psql.properties:/opt/ontop/input/settings.psql.properties
      - ./oem/resources/logback.xml:/opt/ontop/log/logback.xml
    depends_on:
      postgres:
        condition: service_healthy
      data-backend:
        condition: service_started

  ###
  # A function providing agent
  tiera-remoting-agent:
    image: ghcr.io/catenax-ng/tx-knowledge-agents/remoting-agent:1.12.19-SNAPSHOT
#    image: tractusx/remoting-agent:1.12.19-SNAPSHOT
    read_only: true
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8200:8081" # sparql endpoint
      - "4042:4040" # debugging endpoint
    environment:
      # dummy environment var
      FOO: bar
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./tiera/resources/tomcat/tmp:/opt/tomcat/temp
      - ./tiera/resources/tomcat/conf:/opt/tomcat/conf/Catalina/localhost
      - ./tiera/resources/tomcat/work:/opt/tomcat/work/Catalina/localhost
      - ./tiera/resources/tomcat/logs:/opt/tomcat/logs
      - ./tiera/resources/rdf4j/conf:/var/rdf4j/server/conf
      - ./tiera/resources/rdf4j/logs:/var/rdf4j/server/logs
      - ./tiera/resources/rdf4j/repositories:/var/rdf4j/server/repositories
    depends_on:
      service-backend:
        condition: service_started

  ###
  # Bridge from provising agent to AAS API
  aas-bridge:
    image: ghcr.io/catenax-ng/tx-knowledge-agents-aas-bridge/aas-bridge:0.13.6-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8700:8443" # AAS-API
      - "4048:4040" # DEBUG
    environment:
      PROVIDER_SPARQL_ENDPOINT: http://sparql.local
      #PROVIDER_SPARQL_ENDPOINT: http://oem-data-plane:8082/api/agent
      #PROVIDER_AGENT_PLANE: http://provider-agent:8082/sparql
      #PROVIDER_SPARQL_ENDPOINT: https://knowledge.int.catena-x.net/oem-provider-agent3/sparql
#      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
#      TIMEOUT_SECONDS: 30
#    volumes:
#      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
    #depends_on:
    #  provider-agent:
    #    condition: service_started

  ###
  # Tenant/Dataspace Section
  ###

  ###
  # Configures the oem control plane (provider)
  oem-control-plane:
    image: tractusx/edc-controlplane-postgresql-hashicorp-vault:0.7.3
#    image: tractusx/edc-controlplane-postgresql-azure-vault:0.7.3
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8090:8080" # API
      - "8091:8081" # MANAGEMENT
      - "8093:8083" # CONTROL
      - "8094:8084" # DSP
      - "8095:0886" # PUBLIC
      - "4040:4040" # DEBUG
    environment:
      # Azure auth
      AZURE_CLIENT_ID:     ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET:     ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID:     ${AZURE_TENANT_ID}
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./oem/resources/controlplane.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
      bdrs:
        condition: service_started
      bdrs-init:
        condition: service_completed_successfully
      sts-mock:
        condition: service_started
      keycloak:
        condition: service_healthy
      

  ###
  # Configures the oem control plane (consumer)
  oem-control-plane2:
    image: tractusx/edc-controlplane-postgresql-hashicorp-vault:0.7.3
#    image: tractusx/edc-controlplane-postgresql-azure-vault:0.7.3
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8097:8080" # API
      - "8098:8081" # MANAGEMENT
      - "8100:8084" # DSP
      - "8101:8086" # PUBLIC
      - "4047:4040" # DEBUG
    environment:
      # Azure auth
      AZURE_CLIENT_ID:     ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET:     ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID:     ${AZURE_TENANT_ID}
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties      
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./oem/resources/controlplane2.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
      bdrs:
        condition: service_started
      bdrs-init:
        condition: service_completed_successfully
      sts-mock:
        condition: service_started
      keycloak:
        condition: service_healthy

  ###
  # Configures the OEM data plane
  oem-data-plane:
#    image: ghcr.io/catenax-ng/tx-knowledge-agents-edc/agentplane-hashicorp:1.13.20-SNAPSHOT
#    image: ghcr.io/catenax-ng/tx-knowledge-agents-edc/agentplane-azure-vault:1.13.20-SNAPSHOT
#    image: tractusx/agentplane-azure-vault:1.13.20-SNAPSHOT
    image: tractusx/agentplane-hashicorp:1.13.20-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8102:8080"  # API/sparql endpoint
      - "8103:8185"  # PUBLIC
      - "8104:8187"  # AGREEMENT CALLBACK
      - "8105:9999" # CONTROL
      - "4041:4040"  # DEBUG
    environment:
      # Azure auth
      AZURE_CLIENT_ID:     ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET:     ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID:     ${AZURE_TENANT_ID}
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./oem/resources/dataplane.properties:/app/configuration.properties
       - ./resources/dataspace_local.ttl:/app/dataspace.ttl
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
      sts-mock:
        condition: service_started
      oem-control-plane:
        condition: service_started
      oem-control-plane2:
        condition: service_started
      tiera-control-plane:
        condition: service_started
      keycloak:
        condition: service_healthy

  ###
  # Configures the tiera control plane (runtime)
  tiera-control-plane:
    image: tractusx/edc-controlplane-postgresql-hashicorp-vault:0.7.3
#    image: tractusx/edc-controlplane-postgresql-azure-vault:0.7.3
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8300:8080" # API
      - "8301:8081" # MANAGEMENT
      - "8303:8083" # CONTROL
      - "8304:8084" # DSP
      - "8305:8086" # PUNLIC
      - "4043:4040" # DEBUG
    environment:
      # Azure auth
      AZURE_CLIENT_ID:     ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET:     ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID:     ${AZURE_TENANT_ID}
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./tiera/resources/controlplane.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
      bdrs:
        condition: service_started
      bdrs-init:
        condition: service_completed_successfully
      sts-mock:
        condition: service_started
      keycloak:
        condition: service_healthy

  ###
  # Configures the supplier data plane
  tiera-data-plane:
#    image: ghcr.io/catenax-ng/tx-knowledge-agents-edc/agentplane-hashicorp:1.13.20-SNAPSHOT
#    image: ghcr.io/catenax-ng/tx-knowledge-agents-edc/agentplane-azure-vault:1.13.20-SNAPSHOT
    image: tractusx/agentplane-hashicorp:1.13.20-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8400:8080"  # API/sparql endpoint
      - "8401:8185"  # PUBLIC
      - "8402:8187"  # AGREEMENT CALLBACK
      - "8403:9999" # CONTROL
      - "4044:4040"  # DEBUG
    environment:
      # Azure auth
      AZURE_CLIENT_ID:     ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET:     ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID:     ${AZURE_TENANT_ID}
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./tiera/resources/dataplane.properties:/app/configuration.properties
      - ./resources/dataspace_local.ttl:/app/dataspace.ttl
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
      sts-mock:
        condition: service_started
      tiera-control-plane:
        condition: service_started
      oem-control-plane:
        condition: service_started
      keycloak:
        condition: service_healthy

  ###
  # Configures the consumer control plane
  consumer-control-plane:
#    image: tractusx/edc-controlplane-postgresql-azure-vault:0.7.3
    image: tractusx/edc-controlplane-postgresql-hashicorp-vault:0.7.3
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8500:8080" # API
      - "8501:8081" # MANAGEMENT
      - "8503:8083" # CONTROL
      - "8504:8084" # PROTOCOL
      - "8505:8086" # PUNLIC
      - "4045:4040" # DEBUG
    environment:
      # Azure auth
      AZURE_CLIENT_ID:     ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET:     ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID:     ${AZURE_TENANT_ID}
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./consumer/resources/controlplane.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
      bdrs:
        condition: service_started
      bdrs-init:
        condition: service_completed_successfully
      sts-mock:
        condition: service_started
      keycloak:
        condition: service_healthy

  ###
  # Configures the consumer data plane
  consumer-data-plane:
#    image: ghcr.io/catenax-ng/tx-knowledge-agents-edc/agentplane-azure-vault:1.13.20-SNAPSHOT
#    image: ghcr.io/catenax-ng/tx-knowledge-agents-edc/agentplane-hashicorp:1.13.20-SNAPSHOT
#    image: tractusx/edc-dataplane-azure-vault:0.7.2
    image: tractusx/agentplane-hashicorp:1.13.20-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8600:8080"  # API/sparql endpoint
      - "8601:8185"  # PUBLIC
      - "8602:8187"  # AGREEMENT CALLBACK
      - "8603:8083" # CONTROL
      - "4046:4040"  # DEBUG
    environment:
      # Azure auth
      AZURE_CLIENT_ID:     ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET:     ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID:     ${AZURE_TENANT_ID}
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties      
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:4040
    volumes:
      - ./consumer/resources/dataplane.properties:/app/configuration.properties
      - ./resources/dataspace_local.ttl:/app/dataspace.ttl
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
      sts-mock:
        condition: service_started
      consumer-control-plane:
        condition: service_started
      tiera-control-plane:
        condition: service_started
      oem-control-plane:
        condition: service_started
      keycloak:
        condition: service_healthy

  ###
  # Configures the consumer matchmaking agent
  consumer-agent:
    image: ghcr.io/catenax-ng/tx-knowledge-agents/matchmaking-agent:1.12.19-SNAPSHOT
#    image: tractusx/agentplane-hashicorp:1.12.19-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8604:8080"  # Agent Source
      - "8605:8187"  # AGREEMENT CALLBACK
      - "8606:8082"  # Public Sparql
      - "4048:4040"  # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties      
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./consumer/resources/matchmaking.properties:/app/configuration.properties
      - ./resources/dataspace_local.ttl:/app/dataspace.ttl
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties
    depends_on:
      consumer-control-plane:
        condition: service_started
      consumer-data-plane:
        condition: service_started
      tiera-control-plane:
        condition: service_started
      oem-control-plane:
        condition: service_started
      keycloak:
        condition: service_healthy

###
# All Volumes
###

volumes:
  postgres_data:
    driver: local
